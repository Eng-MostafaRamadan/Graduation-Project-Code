
graduation_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a414  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a6b4  0800a6b4  0000b6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a734  0800a734  0000b734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800a738  0800a738  0000b738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000001c  24000000  0800a73c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004b1c  2400001c  0800a758  0000c01c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004b38  0800a758  0000cb38  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c01c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e2cc  00000000  00000000  0000c04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003a64  00000000  00000000  0002a316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001930  00000000  00000000  0002dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001372  00000000  00000000  0002f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000423f  00000000  00000000  00030a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c732  00000000  00000000  00034c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017d2d2  00000000  00000000  00051393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ce665  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006be4  00000000  00000000  001ce6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006f  00000000  00000000  001d528c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400001c 	.word	0x2400001c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a69c 	.word	0x0800a69c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000020 	.word	0x24000020
 80002dc:	0800a69c 	.word	0x0800a69c

080002e0 <readStablePot>:
void HAL_Delay_us(uint32_t microseconds);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int readStablePot() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	static int samples[POT_SAMPLES];
	static int index = 0;

	// Exponential moving average filter (better for real-time)
	HAL_ADC_Start(&hadc1);
 80002e6:	4833      	ldr	r0, [pc, #204]	@ (80003b4 <readStablePot+0xd4>)
 80002e8:	f001 fd60 	bl	8001dac <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80002ec:	210a      	movs	r1, #10
 80002ee:	4831      	ldr	r0, [pc, #196]	@ (80003b4 <readStablePot+0xd4>)
 80002f0:	f001 fe5a 	bl	8001fa8 <HAL_ADC_PollForConversion>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d109      	bne.n	800030e <readStablePot+0x2e>
		samples[index] = HAL_ADC_GetValue(&hadc1);
 80002fa:	482e      	ldr	r0, [pc, #184]	@ (80003b4 <readStablePot+0xd4>)
 80002fc:	f001 ff48 	bl	8002190 <HAL_ADC_GetValue>
 8000300:	4602      	mov	r2, r0
 8000302:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <readStablePot+0xd8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4611      	mov	r1, r2
 8000308:	4a2c      	ldr	r2, [pc, #176]	@ (80003bc <readStablePot+0xdc>)
 800030a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	index = (index + 1) % POT_SAMPLES;
 800030e:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <readStablePot+0xd8>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	4b2a      	ldr	r3, [pc, #168]	@ (80003c0 <readStablePot+0xe0>)
 8000316:	fb83 1302 	smull	r1, r3, r3, r2
 800031a:	4413      	add	r3, r2
 800031c:	10d9      	asrs	r1, r3, #3
 800031e:	17d3      	asrs	r3, r2, #31
 8000320:	1ac9      	subs	r1, r1, r3
 8000322:	460b      	mov	r3, r1
 8000324:	011b      	lsls	r3, r3, #4
 8000326:	1a5b      	subs	r3, r3, r1
 8000328:	1ad1      	subs	r1, r2, r3
 800032a:	4b23      	ldr	r3, [pc, #140]	@ (80003b8 <readStablePot+0xd8>)
 800032c:	6019      	str	r1, [r3, #0]

	// Exponential moving average (more responsive than simple average)
	float alpha = 0.2; // Smoothing factor
 800032e:	4b25      	ldr	r3, [pc, #148]	@ (80003c4 <readStablePot+0xe4>)
 8000330:	603b      	str	r3, [r7, #0]
	static float filteredValue = 0;
	if(filteredValue == 0) {
 8000332:	4b25      	ldr	r3, [pc, #148]	@ (80003c8 <readStablePot+0xe8>)
 8000334:	edd3 7a00 	vldr	s15, [r3]
 8000338:	eef5 7a40 	vcmp.f32	s15, #0.0
 800033c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000340:	d108      	bne.n	8000354 <readStablePot+0x74>
		filteredValue = samples[0]; // Initialize
 8000342:	4b1e      	ldr	r3, [pc, #120]	@ (80003bc <readStablePot+0xdc>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	ee07 3a90 	vmov	s15, r3
 800034a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800034e:	4b1e      	ldr	r3, [pc, #120]	@ (80003c8 <readStablePot+0xe8>)
 8000350:	edc3 7a00 	vstr	s15, [r3]
	}
	for(int i = 0; i < POT_SAMPLES; i++) {
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	e01e      	b.n	8000398 <readStablePot+0xb8>
		filteredValue = alpha * samples[i] + (1 - alpha) * filteredValue;
 800035a:	4a18      	ldr	r2, [pc, #96]	@ (80003bc <readStablePot+0xdc>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000362:	ee07 3a90 	vmov	s15, r3
 8000366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800036a:	edd7 7a00 	vldr	s15, [r7]
 800036e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000376:	edd7 7a00 	vldr	s15, [r7]
 800037a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <readStablePot+0xe8>)
 8000380:	edd3 7a00 	vldr	s15, [r3]
 8000384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800038c:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <readStablePot+0xe8>)
 800038e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POT_SAMPLES; i++) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3301      	adds	r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b0e      	cmp	r3, #14
 800039c:	dddd      	ble.n	800035a <readStablePot+0x7a>
	}
	return (int)filteredValue;
 800039e:	4b0a      	ldr	r3, [pc, #40]	@ (80003c8 <readStablePot+0xe8>)
 80003a0:	edd3 7a00 	vldr	s15, [r3]
 80003a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003a8:	ee17 3a90 	vmov	r3, s15
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	24000038 	.word	0x24000038
 80003b8:	24000110 	.word	0x24000110
 80003bc:	24000114 	.word	0x24000114
 80003c0:	88888889 	.word	0x88888889
 80003c4:	3e4ccccd 	.word	0x3e4ccccd
 80003c8:	24000150 	.word	0x24000150

080003cc <moveToPositionSmooth>:

void moveToPositionSmooth(int targetStep) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	@ 0x28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	// Calculate movement with enhanced hysteresis
	int direction;
	int totalSteps = abs(targetStep - lastStepPosition);
 80003d4:	4b86      	ldr	r3, [pc, #536]	@ (80005f0 <moveToPositionSmooth+0x224>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	bfb8      	it	lt
 80003e0:	425b      	neglt	r3, r3
 80003e2:	623b      	str	r3, [r7, #32]

	// Enhanced hysteresis with direction memory
	if(abs(totalSteps) < MIN_MOVE_STEPS) {
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	f113 0f13 	cmn.w	r3, #19
 80003ea:	db03      	blt.n	80003f4 <moveToPositionSmooth+0x28>
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	2b13      	cmp	r3, #19
 80003f0:	f340 80fa 	ble.w	80005e8 <moveToPositionSmooth+0x21c>
		return; // Ignore tiny movements
	}

	direction = (targetStep > lastStepPosition) ? 1 : -1;
 80003f4:	4b7e      	ldr	r3, [pc, #504]	@ (80005f0 <moveToPositionSmooth+0x224>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dd01      	ble.n	8000402 <moveToPositionSmooth+0x36>
 80003fe:	2301      	movs	r3, #1
 8000400:	e001      	b.n	8000406 <moveToPositionSmooth+0x3a>
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
 8000406:	627b      	str	r3, [r7, #36]	@ 0x24

	// Only reverse direction if we have significant movement
	if((direction * lastMovementDirection) < 0 && totalSteps < (POSITION_TOLERANCE*2)) {
 8000408:	4b7a      	ldr	r3, [pc, #488]	@ (80005f4 <moveToPositionSmooth+0x228>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800040e:	fb02 f303 	mul.w	r3, r2, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	da0d      	bge.n	8000432 <moveToPositionSmooth+0x66>
 8000416:	6a3b      	ldr	r3, [r7, #32]
 8000418:	2b63      	cmp	r3, #99	@ 0x63
 800041a:	dc0a      	bgt.n	8000432 <moveToPositionSmooth+0x66>
		direction = lastMovementDirection; // Maintain direction
 800041c:	4b75      	ldr	r3, [pc, #468]	@ (80005f4 <moveToPositionSmooth+0x228>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	627b      	str	r3, [r7, #36]	@ 0x24
		totalSteps = abs(targetStep - lastStepPosition); // Recalculate
 8000422:	4b73      	ldr	r3, [pc, #460]	@ (80005f0 <moveToPositionSmooth+0x224>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	2b00      	cmp	r3, #0
 800042c:	bfb8      	it	lt
 800042e:	425b      	neglt	r3, r3
 8000430:	623b      	str	r3, [r7, #32]
	}

	// Handle wrap-around
	if(totalSteps > StepPerRevolution/2) {
 8000432:	6a3b      	ldr	r3, [r7, #32]
 8000434:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8000438:	dd06      	ble.n	8000448 <moveToPositionSmooth+0x7c>
		direction *= -1;
 800043a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800043c:	425b      	negs	r3, r3
 800043e:	627b      	str	r3, [r7, #36]	@ 0x24
		totalSteps = StepPerRevolution - totalSteps;
 8000440:	6a3b      	ldr	r3, [r7, #32]
 8000442:	f5c3 53c8 	rsb	r3, r3, #6400	@ 0x1900
 8000446:	623b      	str	r3, [r7, #32]
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, (direction > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800044a:	2b00      	cmp	r3, #0
 800044c:	bfcc      	ite	gt
 800044e:	2301      	movgt	r3, #1
 8000450:	2300      	movle	r3, #0
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800045a:	4867      	ldr	r0, [pc, #412]	@ (80005f8 <moveToPositionSmooth+0x22c>)
 800045c:	f003 f854 	bl	8003508 <HAL_GPIO_WritePin>
	lastMovementDirection = direction;
 8000460:	4a64      	ldr	r2, [pc, #400]	@ (80005f4 <moveToPositionSmooth+0x228>)
 8000462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000464:	6013      	str	r3, [r2, #0]

	// Enhanced acceleration profile
	int accelSteps = min(ACCELERATION_STEPS, totalSteps/2);
 8000466:	6a3b      	ldr	r3, [r7, #32]
 8000468:	f240 6241 	movw	r2, #1601	@ 0x641
 800046c:	4293      	cmp	r3, r2
 800046e:	dc05      	bgt.n	800047c <moveToPositionSmooth+0xb0>
 8000470:	6a3b      	ldr	r3, [r7, #32]
 8000472:	2b00      	cmp	r3, #0
 8000474:	da00      	bge.n	8000478 <moveToPositionSmooth+0xac>
 8000476:	3301      	adds	r3, #1
 8000478:	105b      	asrs	r3, r3, #1
 800047a:	e001      	b.n	8000480 <moveToPositionSmooth+0xb4>
 800047c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000480:	617b      	str	r3, [r7, #20]
	int decelStart = totalSteps - accelSteps;
 8000482:	6a3a      	ldr	r2, [r7, #32]
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < totalSteps; i++) {
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
 800048e:	e0a5      	b.n	80005dc <moveToPositionSmooth+0x210>
		int targetPulseWidth = BASE_PULSE_WIDTH;
 8000490:	2396      	movs	r3, #150	@ 0x96
 8000492:	61bb      	str	r3, [r7, #24]

		// Smoother acceleration using cubic easing
		if(i < accelSteps) {
 8000494:	69fa      	ldr	r2, [r7, #28]
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	429a      	cmp	r2, r3
 800049a:	da25      	bge.n	80004e8 <moveToPositionSmooth+0x11c>
			float progress = (float)i / accelSteps;
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	ee07 3a90 	vmov	s15, r3
 80004a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	ee07 3a90 	vmov	s15, r3
 80004ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80004b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80004b4:	edc7 7a02 	vstr	s15, [r7, #8]
			targetPulseWidth = BASE_PULSE_WIDTH*2 - (BASE_PULSE_WIDTH * progress * progress * progress);
 80004b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80004bc:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80005fc <moveToPositionSmooth+0x230>
 80004c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80004c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80004c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80004d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004d4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000600 <moveToPositionSmooth+0x234>
 80004d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004e0:	ee17 3a90 	vmov	r3, s15
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	e02a      	b.n	800053e <moveToPositionSmooth+0x172>
		}
		else if(i >= decelStart) {
 80004e8:	69fa      	ldr	r2, [r7, #28]
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	db26      	blt.n	800053e <moveToPositionSmooth+0x172>
			float progress = (float)(i-decelStart) / accelSteps;
 80004f0:	69fa      	ldr	r2, [r7, #28]
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	ee07 3a90 	vmov	s15, r3
 80004fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	ee07 3a90 	vmov	s15, r3
 8000504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800050c:	edc7 7a03 	vstr	s15, [r7, #12]
			targetPulseWidth = BASE_PULSE_WIDTH + (BASE_PULSE_WIDTH * progress * progress * progress);
 8000510:	edd7 7a03 	vldr	s15, [r7, #12]
 8000514:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80005fc <moveToPositionSmooth+0x230>
 8000518:	ee27 7a87 	vmul.f32	s14, s15, s14
 800051c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000524:	edd7 7a03 	vldr	s15, [r7, #12]
 8000528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800052c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80005fc <moveToPositionSmooth+0x230>
 8000530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000538:	ee17 3a90 	vmov	r3, s15
 800053c:	61bb      	str	r3, [r7, #24]
		}

		// Limit speed changes for smoother motion
		if(abs(targetPulseWidth - currentSpeed) > MAX_SPEED_CHANGE) {
 800053e:	4b31      	ldr	r3, [pc, #196]	@ (8000604 <moveToPositionSmooth+0x238>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	69ba      	ldr	r2, [r7, #24]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	bfb8      	it	lt
 800054a:	425b      	neglt	r3, r3
 800054c:	2b32      	cmp	r3, #50	@ 0x32
 800054e:	dd0d      	ble.n	800056c <moveToPositionSmooth+0x1a0>
			if(targetPulseWidth < currentSpeed) {
 8000550:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <moveToPositionSmooth+0x238>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	429a      	cmp	r2, r3
 8000558:	da04      	bge.n	8000564 <moveToPositionSmooth+0x198>
				targetPulseWidth = currentSpeed - MAX_SPEED_CHANGE;
 800055a:	4b2a      	ldr	r3, [pc, #168]	@ (8000604 <moveToPositionSmooth+0x238>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3b32      	subs	r3, #50	@ 0x32
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	e003      	b.n	800056c <moveToPositionSmooth+0x1a0>
			} else {
				targetPulseWidth = currentSpeed + MAX_SPEED_CHANGE;
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <moveToPositionSmooth+0x238>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3332      	adds	r3, #50	@ 0x32
 800056a:	61bb      	str	r3, [r7, #24]
			}
		}
		currentSpeed = targetPulseWidth;
 800056c:	4a25      	ldr	r2, [pc, #148]	@ (8000604 <moveToPositionSmooth+0x238>)
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	6013      	str	r3, [r2, #0]

		// Execute step with precise timing
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000578:	481f      	ldr	r0, [pc, #124]	@ (80005f8 <moveToPositionSmooth+0x22c>)
 800057a:	f002 ffc5 	bl	8003508 <HAL_GPIO_WritePin>
		HAL_Delay_us(targetPulseWidth/2);
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	2b00      	cmp	r3, #0
 8000582:	da00      	bge.n	8000586 <moveToPositionSmooth+0x1ba>
 8000584:	3301      	adds	r3, #1
 8000586:	105b      	asrs	r3, r3, #1
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f9dd 	bl	8000948 <HAL_Delay_us>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000594:	4818      	ldr	r0, [pc, #96]	@ (80005f8 <moveToPositionSmooth+0x22c>)
 8000596:	f002 ffb7 	bl	8003508 <HAL_GPIO_WritePin>
		HAL_Delay_us(targetPulseWidth/2);
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <moveToPositionSmooth+0x1d6>
 80005a0:	3301      	adds	r3, #1
 80005a2:	105b      	asrs	r3, r3, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f9cf 	bl	8000948 <HAL_Delay_us>

		// Update position
		lastStepPosition += direction;
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <moveToPositionSmooth+0x224>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b0:	4413      	add	r3, r2
 80005b2:	4a0f      	ldr	r2, [pc, #60]	@ (80005f0 <moveToPositionSmooth+0x224>)
 80005b4:	6013      	str	r3, [r2, #0]
		if(lastStepPosition >= StepPerRevolution) lastStepPosition = 0;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <moveToPositionSmooth+0x224>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80005be:	db02      	blt.n	80005c6 <moveToPositionSmooth+0x1fa>
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <moveToPositionSmooth+0x224>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
		if(lastStepPosition < 0) lastStepPosition = StepPerRevolution - 1;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <moveToPositionSmooth+0x224>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	da03      	bge.n	80005d6 <moveToPositionSmooth+0x20a>
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <moveToPositionSmooth+0x224>)
 80005d0:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80005d4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < totalSteps; i++) {
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	3301      	adds	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
 80005dc:	69fa      	ldr	r2, [r7, #28]
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	f6ff af55 	blt.w	8000490 <moveToPositionSmooth+0xc4>
 80005e6:	e000      	b.n	80005ea <moveToPositionSmooth+0x21e>
		return; // Ignore tiny movements
 80005e8:	bf00      	nop
	}
}
 80005ea:	3728      	adds	r7, #40	@ 0x28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	240000f0 	.word	0x240000f0
 80005f4:	240000fc 	.word	0x240000fc
 80005f8:	58021000 	.word	0x58021000
 80005fc:	43160000 	.word	0x43160000
 8000600:	43960000 	.word	0x43960000
 8000604:	24000000 	.word	0x24000000

08000608 <readStablePot2>:

int readStablePot2() {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
    static int samples[POT_SAMPLES];
    static int index = 0;

    HAL_ADC_Start(&hadc1);
 800060e:	483a      	ldr	r0, [pc, #232]	@ (80006f8 <readStablePot2+0xf0>)
 8000610:	f001 fbcc 	bl	8001dac <HAL_ADC_Start>

    // Skip first conversion (channel 15 = pot1)
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000614:	210a      	movs	r1, #10
 8000616:	4838      	ldr	r0, [pc, #224]	@ (80006f8 <readStablePot2+0xf0>)
 8000618:	f001 fcc6 	bl	8001fa8 <HAL_ADC_PollForConversion>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <readStablePot2+0x20>
        HAL_ADC_GetValue(&hadc1); // discard channel 15
 8000622:	4835      	ldr	r0, [pc, #212]	@ (80006f8 <readStablePot2+0xf0>)
 8000624:	f001 fdb4 	bl	8002190 <HAL_ADC_GetValue>
    }

    // Read second conversion (channel 14 = A2 = pot2)
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000628:	210a      	movs	r1, #10
 800062a:	4833      	ldr	r0, [pc, #204]	@ (80006f8 <readStablePot2+0xf0>)
 800062c:	f001 fcbc 	bl	8001fa8 <HAL_ADC_PollForConversion>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d109      	bne.n	800064a <readStablePot2+0x42>
        samples[index] = HAL_ADC_GetValue(&hadc1); // read channel 14
 8000636:	4830      	ldr	r0, [pc, #192]	@ (80006f8 <readStablePot2+0xf0>)
 8000638:	f001 fdaa 	bl	8002190 <HAL_ADC_GetValue>
 800063c:	4602      	mov	r2, r0
 800063e:	4b2f      	ldr	r3, [pc, #188]	@ (80006fc <readStablePot2+0xf4>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4611      	mov	r1, r2
 8000644:	4a2e      	ldr	r2, [pc, #184]	@ (8000700 <readStablePot2+0xf8>)
 8000646:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    HAL_ADC_Stop(&hadc1);
 800064a:	482b      	ldr	r0, [pc, #172]	@ (80006f8 <readStablePot2+0xf0>)
 800064c:	f001 fc78 	bl	8001f40 <HAL_ADC_Stop>

    index = (index + 1) % POT_SAMPLES;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <readStablePot2+0xf4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <readStablePot2+0xfc>)
 8000658:	fb83 1302 	smull	r1, r3, r3, r2
 800065c:	4413      	add	r3, r2
 800065e:	10d9      	asrs	r1, r3, #3
 8000660:	17d3      	asrs	r3, r2, #31
 8000662:	1ac9      	subs	r1, r1, r3
 8000664:	460b      	mov	r3, r1
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	1a5b      	subs	r3, r3, r1
 800066a:	1ad1      	subs	r1, r2, r3
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <readStablePot2+0xf4>)
 800066e:	6019      	str	r1, [r3, #0]

    // Exponential moving average
    float alpha = 0.2f;
 8000670:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <readStablePot2+0x100>)
 8000672:	603b      	str	r3, [r7, #0]
    static float filteredValue = 0;
    if (filteredValue == 0) {
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <readStablePot2+0x104>)
 8000676:	edd3 7a00 	vldr	s15, [r3]
 800067a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000682:	d108      	bne.n	8000696 <readStablePot2+0x8e>
        filteredValue = samples[0]; // Initialize
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <readStablePot2+0xf8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	ee07 3a90 	vmov	s15, r3
 800068c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000690:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <readStablePot2+0x104>)
 8000692:	edc3 7a00 	vstr	s15, [r3]
    }
    for (int i = 0; i < POT_SAMPLES; i++) {
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e01e      	b.n	80006da <readStablePot2+0xd2>
        filteredValue = alpha * samples[i] + (1 - alpha) * filteredValue;
 800069c:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <readStablePot2+0xf8>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	ee07 3a90 	vmov	s15, r3
 80006a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ac:	edd7 7a00 	vldr	s15, [r7]
 80006b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80006b8:	edd7 7a00 	vldr	s15, [r7]
 80006bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <readStablePot2+0x104>)
 80006c2:	edd3 7a00 	vldr	s15, [r3]
 80006c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <readStablePot2+0x104>)
 80006d0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < POT_SAMPLES; i++) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3301      	adds	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0e      	cmp	r3, #14
 80006de:	dddd      	ble.n	800069c <readStablePot2+0x94>
    }
    return (int)filteredValue;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <readStablePot2+0x104>)
 80006e2:	edd3 7a00 	vldr	s15, [r3]
 80006e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ea:	ee17 3a90 	vmov	r3, s15
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24000038 	.word	0x24000038
 80006fc:	24000154 	.word	0x24000154
 8000700:	24000158 	.word	0x24000158
 8000704:	88888889 	.word	0x88888889
 8000708:	3e4ccccd 	.word	0x3e4ccccd
 800070c:	24000194 	.word	0x24000194

08000710 <moveToPositionSmooth2>:



void moveToPositionSmooth2(int targetStep) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	// Calculate movement with enhanced hysteresis
	int direction;
	int totalSteps = abs(targetStep - lastStepPosition2);
 8000718:	4b85      	ldr	r3, [pc, #532]	@ (8000930 <moveToPositionSmooth2+0x220>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	bfb8      	it	lt
 8000724:	425b      	neglt	r3, r3
 8000726:	623b      	str	r3, [r7, #32]

	// Enhanced hysteresis with direction memory
	if(abs(totalSteps) < MIN_MOVE_STEPS) {
 8000728:	6a3b      	ldr	r3, [r7, #32]
 800072a:	f113 0f13 	cmn.w	r3, #19
 800072e:	db03      	blt.n	8000738 <moveToPositionSmooth2+0x28>
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	2b13      	cmp	r3, #19
 8000734:	f340 80f7 	ble.w	8000926 <moveToPositionSmooth2+0x216>
		return; // Ignore tiny movements
	}

	direction = (targetStep > lastStepPosition2) ? 1 : -1;
 8000738:	4b7d      	ldr	r3, [pc, #500]	@ (8000930 <moveToPositionSmooth2+0x220>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	dd01      	ble.n	8000746 <moveToPositionSmooth2+0x36>
 8000742:	2301      	movs	r3, #1
 8000744:	e001      	b.n	800074a <moveToPositionSmooth2+0x3a>
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24

	// Only reverse direction if we have significant movement
	if((direction * lastMovementDirection2) < 0 && totalSteps < (POSITION_TOLERANCE*2)) {
 800074c:	4b79      	ldr	r3, [pc, #484]	@ (8000934 <moveToPositionSmooth2+0x224>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000752:	fb02 f303 	mul.w	r3, r2, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	da0d      	bge.n	8000776 <moveToPositionSmooth2+0x66>
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	2b63      	cmp	r3, #99	@ 0x63
 800075e:	dc0a      	bgt.n	8000776 <moveToPositionSmooth2+0x66>
		direction = lastMovementDirection2; // Maintain direction
 8000760:	4b74      	ldr	r3, [pc, #464]	@ (8000934 <moveToPositionSmooth2+0x224>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
		totalSteps = abs(targetStep - lastStepPosition2); // Recalculate
 8000766:	4b72      	ldr	r3, [pc, #456]	@ (8000930 <moveToPositionSmooth2+0x220>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	bfb8      	it	lt
 8000772:	425b      	neglt	r3, r3
 8000774:	623b      	str	r3, [r7, #32]
	}

	// Handle wrap-around
	if(totalSteps > StepPerRevolution/2) {
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 800077c:	dd06      	ble.n	800078c <moveToPositionSmooth2+0x7c>
		direction *= -1;
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	425b      	negs	r3, r3
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
		totalSteps = StepPerRevolution - totalSteps;
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	f5c3 53c8 	rsb	r3, r3, #6400	@ 0x1900
 800078a:	623b      	str	r3, [r7, #32]
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, (direction > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078e:	2b00      	cmp	r3, #0
 8000790:	bfcc      	ite	gt
 8000792:	2301      	movgt	r3, #1
 8000794:	2300      	movle	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	4866      	ldr	r0, [pc, #408]	@ (8000938 <moveToPositionSmooth2+0x228>)
 800079e:	f002 feb3 	bl	8003508 <HAL_GPIO_WritePin>
	lastMovementDirection2 = direction;
 80007a2:	4a64      	ldr	r2, [pc, #400]	@ (8000934 <moveToPositionSmooth2+0x224>)
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	6013      	str	r3, [r2, #0]

	// Enhanced acceleration profile
	int accelSteps = min(ACCELERATION_STEPS, totalSteps/2);
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	f240 6241 	movw	r2, #1601	@ 0x641
 80007ae:	4293      	cmp	r3, r2
 80007b0:	dc05      	bgt.n	80007be <moveToPositionSmooth2+0xae>
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	da00      	bge.n	80007ba <moveToPositionSmooth2+0xaa>
 80007b8:	3301      	adds	r3, #1
 80007ba:	105b      	asrs	r3, r3, #1
 80007bc:	e001      	b.n	80007c2 <moveToPositionSmooth2+0xb2>
 80007be:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80007c2:	617b      	str	r3, [r7, #20]
	int decelStart = totalSteps - accelSteps;
 80007c4:	6a3a      	ldr	r2, [r7, #32]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < totalSteps; i++) {
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	e0a3      	b.n	800091a <moveToPositionSmooth2+0x20a>
		int targetPulseWidth = BASE_PULSE_WIDTH;
 80007d2:	2396      	movs	r3, #150	@ 0x96
 80007d4:	61bb      	str	r3, [r7, #24]

		// Smoother acceleration using cubic easing
		if(i < accelSteps) {
 80007d6:	69fa      	ldr	r2, [r7, #28]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	429a      	cmp	r2, r3
 80007dc:	da25      	bge.n	800082a <moveToPositionSmooth2+0x11a>
			float progress = (float)i / accelSteps;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007f6:	edc7 7a02 	vstr	s15, [r7, #8]
			targetPulseWidth = BASE_PULSE_WIDTH*2 - (BASE_PULSE_WIDTH * progress * progress * progress);
 80007fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80007fe:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800093c <moveToPositionSmooth2+0x22c>
 8000802:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000806:	edd7 7a02 	vldr	s15, [r7, #8]
 800080a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800080e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000816:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000940 <moveToPositionSmooth2+0x230>
 800081a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800081e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000822:	ee17 3a90 	vmov	r3, s15
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	e02a      	b.n	8000880 <moveToPositionSmooth2+0x170>
		}
		else if(i >= decelStart) {
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	429a      	cmp	r2, r3
 8000830:	db26      	blt.n	8000880 <moveToPositionSmooth2+0x170>
			float progress = (float)(i-decelStart) / accelSteps;
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	ee07 3a90 	vmov	s15, r3
 800083c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	ee07 3a90 	vmov	s15, r3
 8000846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800084a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800084e:	edc7 7a03 	vstr	s15, [r7, #12]
			targetPulseWidth = BASE_PULSE_WIDTH + (BASE_PULSE_WIDTH * progress * progress * progress);
 8000852:	edd7 7a03 	vldr	s15, [r7, #12]
 8000856:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800093c <moveToPositionSmooth2+0x22c>
 800085a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800085e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000866:	edd7 7a03 	vldr	s15, [r7, #12]
 800086a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800093c <moveToPositionSmooth2+0x22c>
 8000872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800087a:	ee17 3a90 	vmov	r3, s15
 800087e:	61bb      	str	r3, [r7, #24]
		}

		// Limit speed changes for smoother motion
		if(abs(targetPulseWidth - currentSpeed2) > MAX_SPEED_CHANGE) {
 8000880:	4b30      	ldr	r3, [pc, #192]	@ (8000944 <moveToPositionSmooth2+0x234>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	bfb8      	it	lt
 800088c:	425b      	neglt	r3, r3
 800088e:	2b32      	cmp	r3, #50	@ 0x32
 8000890:	dd0d      	ble.n	80008ae <moveToPositionSmooth2+0x19e>
			if(targetPulseWidth < currentSpeed2) {
 8000892:	4b2c      	ldr	r3, [pc, #176]	@ (8000944 <moveToPositionSmooth2+0x234>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	429a      	cmp	r2, r3
 800089a:	da04      	bge.n	80008a6 <moveToPositionSmooth2+0x196>
				targetPulseWidth = currentSpeed2 - MAX_SPEED_CHANGE;
 800089c:	4b29      	ldr	r3, [pc, #164]	@ (8000944 <moveToPositionSmooth2+0x234>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3b32      	subs	r3, #50	@ 0x32
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	e003      	b.n	80008ae <moveToPositionSmooth2+0x19e>
			} else {
				targetPulseWidth = currentSpeed2 + MAX_SPEED_CHANGE;
 80008a6:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <moveToPositionSmooth2+0x234>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3332      	adds	r3, #50	@ 0x32
 80008ac:	61bb      	str	r3, [r7, #24]
			}
		}
		currentSpeed2 = targetPulseWidth;
 80008ae:	4a25      	ldr	r2, [pc, #148]	@ (8000944 <moveToPositionSmooth2+0x234>)
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	6013      	str	r3, [r2, #0]

		// Execute step with precise timing
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2140      	movs	r1, #64	@ 0x40
 80008b8:	481f      	ldr	r0, [pc, #124]	@ (8000938 <moveToPositionSmooth2+0x228>)
 80008ba:	f002 fe25 	bl	8003508 <HAL_GPIO_WritePin>
		HAL_Delay_us(targetPulseWidth/2);
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	da00      	bge.n	80008c6 <moveToPositionSmooth2+0x1b6>
 80008c4:	3301      	adds	r3, #1
 80008c6:	105b      	asrs	r3, r3, #1
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f83d 	bl	8000948 <HAL_Delay_us>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2140      	movs	r1, #64	@ 0x40
 80008d2:	4819      	ldr	r0, [pc, #100]	@ (8000938 <moveToPositionSmooth2+0x228>)
 80008d4:	f002 fe18 	bl	8003508 <HAL_GPIO_WritePin>
		HAL_Delay_us(targetPulseWidth/2);
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da00      	bge.n	80008e0 <moveToPositionSmooth2+0x1d0>
 80008de:	3301      	adds	r3, #1
 80008e0:	105b      	asrs	r3, r3, #1
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f830 	bl	8000948 <HAL_Delay_us>

		// Update position
		lastStepPosition2 += direction;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <moveToPositionSmooth2+0x220>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ee:	4413      	add	r3, r2
 80008f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <moveToPositionSmooth2+0x220>)
 80008f2:	6013      	str	r3, [r2, #0]
		if(lastStepPosition2 >= StepPerRevolution) lastStepPosition2 = 0;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <moveToPositionSmooth2+0x220>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80008fc:	db02      	blt.n	8000904 <moveToPositionSmooth2+0x1f4>
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <moveToPositionSmooth2+0x220>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
		if(lastStepPosition2 < 0) lastStepPosition2 = StepPerRevolution - 1;
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <moveToPositionSmooth2+0x220>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	da03      	bge.n	8000914 <moveToPositionSmooth2+0x204>
 800090c:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <moveToPositionSmooth2+0x220>)
 800090e:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000912:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < totalSteps; i++) {
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	3301      	adds	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	429a      	cmp	r2, r3
 8000920:	f6ff af57 	blt.w	80007d2 <moveToPositionSmooth2+0xc2>
 8000924:	e000      	b.n	8000928 <moveToPositionSmooth2+0x218>
		return; // Ignore tiny movements
 8000926:	bf00      	nop
	}
}
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	24000100 	.word	0x24000100
 8000934:	2400010c 	.word	0x2400010c
 8000938:	58020800 	.word	0x58020800
 800093c:	43160000 	.word	0x43160000
 8000940:	43960000 	.word	0x43960000
 8000944:	24000004 	.word	0x24000004

08000948 <HAL_Delay_us>:

// Microsecond delay function
void HAL_Delay_us(uint32_t microseconds) {
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	uint32_t start = DWT->CYCCNT;
 8000950:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <HAL_Delay_us+0x40>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	60fb      	str	r3, [r7, #12]
	uint32_t cycles = (SystemCoreClock / 1000000) * microseconds;
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_Delay_us+0x44>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <HAL_Delay_us+0x48>)
 800095c:	fba2 2303 	umull	r2, r3, r2, r3
 8000960:	0c9a      	lsrs	r2, r3, #18
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	60bb      	str	r3, [r7, #8]

	while ((DWT->CYCCNT - start) < cycles) {
 800096a:	bf00      	nop
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_Delay_us+0x40>)
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	429a      	cmp	r2, r3
 8000978:	d8f8      	bhi.n	800096c <HAL_Delay_us+0x24>
		// Wait
	}
}
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e0001000 	.word	0xe0001000
 800098c:	24000008 	.word	0x24000008
 8000990:	431bde83 	.word	0x431bde83

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000998:	f000 fb36 	bl	8001008 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 fd96 	bl	80014cc <HAL_Init>

  /* USER CODE BEGIN Init */
	// Enable DWT for microsecond delay
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80009a0:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <main+0xa4>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	4a24      	ldr	r2, [pc, #144]	@ (8000a38 <main+0xa4>)
 80009a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009aa:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80009ac:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <main+0xa8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80009b2:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <main+0xa8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a21      	ldr	r2, [pc, #132]	@ (8000a3c <main+0xa8>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f000 f859 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f000 f9b3 	bl	8000d2c <MX_GPIO_Init>
  MX_ADC1_Init();
 80009c6:	f000 f8d1 	bl	8000b6c <MX_ADC1_Init>
  MX_TIM8_Init();
 80009ca:	f000 f95b 	bl	8000c84 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	// Start TIM8 for ADC triggering
	HAL_TIM_Base_Start(&htim8);
 80009ce:	481c      	ldr	r0, [pc, #112]	@ (8000a40 <main+0xac>)
 80009d0:	f006 fb6c 	bl	80070ac <HAL_TIM_Base_Start>

	// Start with motor disabled
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009da:	481a      	ldr	r0, [pc, #104]	@ (8000a44 <main+0xb0>)
 80009dc:	f002 fd94 	bl	8003508 <HAL_GPIO_WritePin>
	motorEnabled = MOTOR_DISABLED;
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <main+0xb4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	lastStablePotValue = readStablePot();
 80009e6:	f7ff fc7b 	bl	80002e0 <readStablePot>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <main+0xb8>)
 80009ee:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009f6:	4816      	ldr	r0, [pc, #88]	@ (8000a50 <main+0xbc>)
 80009f8:	f002 fd86 	bl	8003508 <HAL_GPIO_WritePin>
	motorEnabled2 = MOTOR_DISABLED2;
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <main+0xc0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	lastStablePotValue2 = readStablePot2();
 8000a02:	f7ff fe01 	bl	8000608 <readStablePot2>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <main+0xc4>)
 8000a0a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a0c:	f007 f88c 	bl	8007b28 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of First */
  FirstHandle = osThreadNew(FirstMotor, NULL, &First_attributes);
 8000a10:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <main+0xc8>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4812      	ldr	r0, [pc, #72]	@ (8000a60 <main+0xcc>)
 8000a16:	f007 f8d1 	bl	8007bbc <osThreadNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a11      	ldr	r2, [pc, #68]	@ (8000a64 <main+0xd0>)
 8000a1e:	6013      	str	r3, [r2, #0]

  /* creation of Second */
  SecondHandle = osThreadNew(SecondMotor, NULL, &Second_attributes);
 8000a20:	4a11      	ldr	r2, [pc, #68]	@ (8000a68 <main+0xd4>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <main+0xd8>)
 8000a26:	f007 f8c9 	bl	8007bbc <osThreadNew>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <main+0xdc>)
 8000a2e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a30:	f007 f89e 	bl	8007b70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <main+0xa0>
 8000a38:	e000edf0 	.word	0xe000edf0
 8000a3c:	e0001000 	.word	0xe0001000
 8000a40:	2400009c 	.word	0x2400009c
 8000a44:	58021000 	.word	0x58021000
 8000a48:	240000f4 	.word	0x240000f4
 8000a4c:	240000f8 	.word	0x240000f8
 8000a50:	58020800 	.word	0x58020800
 8000a54:	24000104 	.word	0x24000104
 8000a58:	24000108 	.word	0x24000108
 8000a5c:	0800a6dc 	.word	0x0800a6dc
 8000a60:	08000e25 	.word	0x08000e25
 8000a64:	240000e8 	.word	0x240000e8
 8000a68:	0800a700 	.word	0x0800a700
 8000a6c:	08000f15 	.word	0x08000f15
 8000a70:	240000ec 	.word	0x240000ec

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b09c      	sub	sp, #112	@ 0x70
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7e:	224c      	movs	r2, #76	@ 0x4c
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 fdd0 	bl	800a628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f009 fdca 	bl	800a628 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a94:	2002      	movs	r0, #2
 8000a96:	f002 fd51 	bl	800353c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b31      	ldr	r3, [pc, #196]	@ (8000b64 <SystemClock_Config+0xf0>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a30      	ldr	r2, [pc, #192]	@ (8000b64 <SystemClock_Config+0xf0>)
 8000aa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <SystemClock_Config+0xf0>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b68 <SystemClock_Config+0xf4>)
 8000ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8000b68 <SystemClock_Config+0xf4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ac0:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemClock_Config+0xf4>)
 8000ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000acc:	bf00      	nop
 8000ace:	4b25      	ldr	r3, [pc, #148]	@ (8000b64 <SystemClock_Config+0xf0>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ada:	d1f8      	bne.n	8000ace <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2340      	movs	r3, #64	@ 0x40
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aec:	2300      	movs	r3, #0
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000af4:	233c      	movs	r3, #60	@ 0x3c
 8000af6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b04:	230c      	movs	r3, #12
 8000b06:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fd4b 	bl	80035b0 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b20:	f000 fab0 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	233f      	movs	r3, #63	@ 0x3f
 8000b26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b30:	2308      	movs	r3, #8
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b34:	2340      	movs	r3, #64	@ 0x40
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b38:	2340      	movs	r3, #64	@ 0x40
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b42:	2340      	movs	r3, #64	@ 0x40
 8000b44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 f98a 	bl	8003e64 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000b56:	f000 fa95 	bl	8001084 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3770      	adds	r7, #112	@ 0x70
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58024800 	.word	0x58024800
 8000b68:	58000400 	.word	0x58000400

08000b6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b90:	4b38      	ldr	r3, [pc, #224]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000b92:	4a39      	ldr	r2, [pc, #228]	@ (8000c78 <MX_ADC1_Init+0x10c>)
 8000b94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b96:	4b37      	ldr	r3, [pc, #220]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000b98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b9e:	4b35      	ldr	r3, [pc, #212]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ba4:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000baa:	4b32      	ldr	r3, [pc, #200]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bce:	4b29      	ldr	r3, [pc, #164]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bda:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000be0:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000be6:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf4:	481f      	ldr	r0, [pc, #124]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000bf6:	f000 ff37 	bl	8001a68 <HAL_ADC_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c00:	f000 fa40 	bl	8001084 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4819      	ldr	r0, [pc, #100]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000c10:	f002 f894 	bl	8002d3c <HAL_ADCEx_MultiModeConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c1a:	f000 fa33 	bl	8001084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_ADC1_Init+0x110>)
 8000c20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c22:	2306      	movs	r3, #6
 8000c24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000c26:	2306      	movs	r3, #6
 8000c28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c2e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c30:	2304      	movs	r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000c42:	f001 fab3 	bl	80021ac <HAL_ADC_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c4c:	f000 fa1a 	bl	8001084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_ADC1_Init+0x114>)
 8000c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c54:	230c      	movs	r3, #12
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_ADC1_Init+0x108>)
 8000c5e:	f001 faa5 	bl	80021ac <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000c68:	f000 fa0c 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	@ 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	24000038 	.word	0x24000038
 8000c78:	40022000 	.word	0x40022000
 8000c7c:	3ef08000 	.word	0x3ef08000
 8000c80:	3ac04000 	.word	0x3ac04000

08000c84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000ca4:	4a20      	ldr	r2, [pc, #128]	@ (8000d28 <MX_TIM8_Init+0xa4>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 28000-1;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000caa:	f646 525f 	movw	r2, #27999	@ 0x6d5f
 8000cae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000cb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cbc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000cd0:	4814      	ldr	r0, [pc, #80]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000cd2:	f006 f993 	bl	8006ffc <HAL_TIM_Base_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 f9d2 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000cee:	f006 fbcd 	bl	800748c <HAL_TIM_ConfigClockSource>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000cf8:	f000 f9c4 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_TIM8_Init+0xa0>)
 8000d0e:	f006 fe1b 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000d18:	f000 f9b4 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2400009c 	.word	0x2400009c
 8000d28:	40010400 	.word	0x40010400

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	4a33      	ldr	r2, [pc, #204]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d52:	4b31      	ldr	r3, [pc, #196]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	4a2c      	ldr	r2, [pc, #176]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d84:	4a24      	ldr	r2, [pc, #144]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8e:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_GPIO_Init+0xec>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000dc0:	4816      	ldr	r0, [pc, #88]	@ (8000e1c <MX_GPIO_Init+0xf0>)
 8000dc2:	f002 fba1 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000dcc:	4814      	ldr	r0, [pc, #80]	@ (8000e20 <MX_GPIO_Init+0xf4>)
 8000dce:	f002 fb9b 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dd2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <MX_GPIO_Init+0xf0>)
 8000dec:	f002 f9dc 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000df0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_GPIO_Init+0xf4>)
 8000e0a:	f002 f9cd 	bl	80031a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58021000 	.word	0x58021000
 8000e20:	58020800 	.word	0x58020800

08000e24 <FirstMotor>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_FirstMotor */
void FirstMotor(void *argument)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Initialize motor state
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET); // Start with motor disabled
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e32:	4832      	ldr	r0, [pc, #200]	@ (8000efc <FirstMotor+0xd8>)
 8000e34:	f002 fb68 	bl	8003508 <HAL_GPIO_WritePin>
	motorEnabled = MOTOR_DISABLED;
 8000e38:	4b31      	ldr	r3, [pc, #196]	@ (8000f00 <FirstMotor+0xdc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
	lastStablePotValue = readStablePot();
 8000e3e:	f7ff fa4f 	bl	80002e0 <readStablePot>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a2f      	ldr	r2, [pc, #188]	@ (8000f04 <FirstMotor+0xe0>)
 8000e46:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	for(;;)
	{
		int potValue = readStablePot();
 8000e48:	f7ff fa4a 	bl	80002e0 <readStablePot>
 8000e4c:	6178      	str	r0, [r7, #20]
		int targetStep = (int)((float)potValue / 65535.0f * (StepPerRevolution-1));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e58:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000f08 <FirstMotor+0xe4>
 8000e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e60:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000f0c <FirstMotor+0xe8>
 8000e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e6c:	ee17 3a90 	vmov	r3, s15
 8000e70:	613b      	str	r3, [r7, #16]

		// Only react to significant pot changes with hysteresis
		int potDifference = abs(potValue - lastStablePotValue);
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <FirstMotor+0xe0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bfb8      	it	lt
 8000e7e:	425b      	neglt	r3, r3
 8000e80:	60fb      	str	r3, [r7, #12]

		if(potDifference > POT_DEADZONE ||
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b64      	cmp	r3, #100	@ 0x64
 8000e86:	dc06      	bgt.n	8000e96 <FirstMotor+0x72>
				(motorEnabled == MOTOR_ENABLED && potDifference > POT_DEADZONE/2)) {
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <FirstMotor+0xdc>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
		if(potDifference > POT_DEADZONE ||
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d116      	bne.n	8000ebe <FirstMotor+0x9a>
				(motorEnabled == MOTOR_ENABLED && potDifference > POT_DEADZONE/2)) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b32      	cmp	r3, #50	@ 0x32
 8000e94:	dd13      	ble.n	8000ebe <FirstMotor+0x9a>
			if(motorEnabled == MOTOR_DISABLED) {
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <FirstMotor+0xdc>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d108      	bne.n	8000eb0 <FirstMotor+0x8c>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea4:	4815      	ldr	r0, [pc, #84]	@ (8000efc <FirstMotor+0xd8>)
 8000ea6:	f002 fb2f 	bl	8003508 <HAL_GPIO_WritePin>
				motorEnabled = MOTOR_ENABLED;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <FirstMotor+0xdc>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
			}

			moveToPositionSmooth(targetStep);
 8000eb0:	6938      	ldr	r0, [r7, #16]
 8000eb2:	f7ff fa8b 	bl	80003cc <moveToPositionSmooth>
			lastStablePotValue = potValue;
 8000eb6:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <FirstMotor+0xe0>)
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e019      	b.n	8000ef2 <FirstMotor+0xce>
		}
		else if(motorEnabled == MOTOR_ENABLED &&
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <FirstMotor+0xdc>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d115      	bne.n	8000ef2 <FirstMotor+0xce>
				abs(targetStep - lastStepPosition) <= POSITION_TOLERANCE) {
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <FirstMotor+0xec>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
		else if(motorEnabled == MOTOR_ENABLED &&
 8000ece:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 8000ed2:	db0e      	blt.n	8000ef2 <FirstMotor+0xce>
				abs(targetStep - lastStepPosition) <= POSITION_TOLERANCE) {
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <FirstMotor+0xec>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b32      	cmp	r3, #50	@ 0x32
 8000ede:	dc08      	bgt.n	8000ef2 <FirstMotor+0xce>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <FirstMotor+0xd8>)
 8000ee8:	f002 fb0e 	bl	8003508 <HAL_GPIO_WritePin>
			motorEnabled = MOTOR_DISABLED;
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <FirstMotor+0xdc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
		}

		osDelay(10); // Delay using FreeRTOS (10ms delay)
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f006 fef4 	bl	8007ce0 <osDelay>
	{
 8000ef8:	e7a6      	b.n	8000e48 <FirstMotor+0x24>
 8000efa:	bf00      	nop
 8000efc:	58021000 	.word	0x58021000
 8000f00:	240000f4 	.word	0x240000f4
 8000f04:	240000f8 	.word	0x240000f8
 8000f08:	477fff00 	.word	0x477fff00
 8000f0c:	45c7f800 	.word	0x45c7f800
 8000f10:	240000f0 	.word	0x240000f0

08000f14 <SecondMotor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SecondMotor */
void SecondMotor(void *argument)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SecondMotor */
	// Initialize motor state
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Start with motor disabled
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f22:	4832      	ldr	r0, [pc, #200]	@ (8000fec <SecondMotor+0xd8>)
 8000f24:	f002 faf0 	bl	8003508 <HAL_GPIO_WritePin>
	motorEnabled2 = MOTOR_DISABLED2;
 8000f28:	4b31      	ldr	r3, [pc, #196]	@ (8000ff0 <SecondMotor+0xdc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	lastStablePotValue2 = readStablePot2();
 8000f2e:	f7ff fb6b 	bl	8000608 <readStablePot2>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff4 <SecondMotor+0xe0>)
 8000f36:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
	for(;;)
	{
		int potValue = readStablePot2();
 8000f38:	f7ff fb66 	bl	8000608 <readStablePot2>
 8000f3c:	6178      	str	r0, [r7, #20]
		int targetStep = (int)((float)potValue / 65535.0f * (StepPerRevolution-1));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000ff8 <SecondMotor+0xe4>
 8000f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f50:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000ffc <SecondMotor+0xe8>
 8000f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5c:	ee17 3a90 	vmov	r3, s15
 8000f60:	613b      	str	r3, [r7, #16]

		// Only react to significant pot changes with hysteresis
		int potDifference = abs(potValue - lastStablePotValue2);
 8000f62:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <SecondMotor+0xe0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bfb8      	it	lt
 8000f6e:	425b      	neglt	r3, r3
 8000f70:	60fb      	str	r3, [r7, #12]

		if(potDifference > POT_DEADZONE ||
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b64      	cmp	r3, #100	@ 0x64
 8000f76:	dc06      	bgt.n	8000f86 <SecondMotor+0x72>
				(motorEnabled2 == MOTOR_ENABLED2 && potDifference > POT_DEADZONE/2)) {
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <SecondMotor+0xdc>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
		if(potDifference > POT_DEADZONE ||
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d116      	bne.n	8000fae <SecondMotor+0x9a>
				(motorEnabled2 == MOTOR_ENABLED2 && potDifference > POT_DEADZONE/2)) {
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b32      	cmp	r3, #50	@ 0x32
 8000f84:	dd13      	ble.n	8000fae <SecondMotor+0x9a>
			if(motorEnabled2 == MOTOR_DISABLED2) {
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <SecondMotor+0xdc>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d108      	bne.n	8000fa0 <SecondMotor+0x8c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f94:	4815      	ldr	r0, [pc, #84]	@ (8000fec <SecondMotor+0xd8>)
 8000f96:	f002 fab7 	bl	8003508 <HAL_GPIO_WritePin>
				motorEnabled2 = MOTOR_ENABLED2;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <SecondMotor+0xdc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
			}

			moveToPositionSmooth2(targetStep);
 8000fa0:	6938      	ldr	r0, [r7, #16]
 8000fa2:	f7ff fbb5 	bl	8000710 <moveToPositionSmooth2>
			lastStablePotValue2 = potValue;
 8000fa6:	4a13      	ldr	r2, [pc, #76]	@ (8000ff4 <SecondMotor+0xe0>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e019      	b.n	8000fe2 <SecondMotor+0xce>
		}
		else if(motorEnabled2 == MOTOR_ENABLED2 &&
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <SecondMotor+0xdc>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d115      	bne.n	8000fe2 <SecondMotor+0xce>
				abs(targetStep - lastStepPosition2) <= POSITION_TOLERANCE) {
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <SecondMotor+0xec>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
		else if(motorEnabled2 == MOTOR_ENABLED2 &&
 8000fbe:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 8000fc2:	db0e      	blt.n	8000fe2 <SecondMotor+0xce>
				abs(targetStep - lastStepPosition2) <= POSITION_TOLERANCE) {
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <SecondMotor+0xec>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b32      	cmp	r3, #50	@ 0x32
 8000fce:	dc08      	bgt.n	8000fe2 <SecondMotor+0xce>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd6:	480b      	ldr	r0, [pc, #44]	@ (8001004 <SecondMotor+0xf0>)
 8000fd8:	f002 fa96 	bl	8003508 <HAL_GPIO_WritePin>
			motorEnabled2 = MOTOR_DISABLED2;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SecondMotor+0xdc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
		}

		osDelay(10); // Delay using FreeRTOS (10ms delay)
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f006 fe7c 	bl	8007ce0 <osDelay>
	{
 8000fe8:	e7a6      	b.n	8000f38 <SecondMotor+0x24>
 8000fea:	bf00      	nop
 8000fec:	58020800 	.word	0x58020800
 8000ff0:	24000104 	.word	0x24000104
 8000ff4:	24000108 	.word	0x24000108
 8000ff8:	477fff00 	.word	0x477fff00
 8000ffc:	45c7f800 	.word	0x45c7f800
 8001000:	24000100 	.word	0x24000100
 8001004:	58021000 	.word	0x58021000

08001008 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800101a:	f002 f84d 	bl	80030b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800101e:	2301      	movs	r3, #1
 8001020:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001022:	2300      	movs	r3, #0
 8001024:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800102a:	231f      	movs	r3, #31
 800102c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800102e:	2387      	movs	r3, #135	@ 0x87
 8001030:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001032:	2300      	movs	r3, #0
 8001034:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001036:	2300      	movs	r3, #0
 8001038:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800103a:	2301      	movs	r3, #1
 800103c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800103e:	2301      	movs	r3, #1
 8001040:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800104a:	463b      	mov	r3, r7
 800104c:	4618      	mov	r0, r3
 800104e:	f002 f86b 	bl	8003128 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001052:	2004      	movs	r0, #4
 8001054:	f002 f848 	bl	80030e8 <HAL_MPU_Enable>

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001072:	f000 fa67 	bl	8001544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40010000 	.word	0x40010000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <Error_Handler+0x8>

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <HAL_MspInit+0x38>)
 8001098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800109c:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <HAL_MspInit+0x38>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_MspInit+0x38>)
 80010a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	210f      	movs	r1, #15
 80010b8:	f06f 0001 	mvn.w	r0, #1
 80010bc:	f001 ffd4 	bl	8003068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024400 	.word	0x58024400

080010cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ba      	sub	sp, #232	@ 0xe8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	22c0      	movs	r2, #192	@ 0xc0
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 fa9b 	bl	800a628 <memset>
  if(hadc->Instance==ADC1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a2b      	ldr	r2, [pc, #172]	@ (80011a4 <HAL_ADC_MspInit+0xd8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d14f      	bne.n	800119c <HAL_ADC_MspInit+0xd0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800110c:	230a      	movs	r3, #10
 800110e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800111c:	23c0      	movs	r3, #192	@ 0xc0
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001120:	2320      	movs	r3, #32
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fa64 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800113e:	f7ff ffa1 	bl	8001084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_ADC_MspInit+0xdc>)
 8001144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_ADC_MspInit+0xdc>)
 800114a:	f043 0320 	orr.w	r3, r3, #32
 800114e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_ADC_MspInit+0xdc>)
 8001154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001158:	f003 0320 	and.w	r3, r3, #32
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_ADC_MspInit+0xdc>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <HAL_ADC_MspInit+0xdc>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_ADC_MspInit+0xdc>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800117e:	230c      	movs	r3, #12
 8001180:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001184:	2303      	movs	r3, #3
 8001186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <HAL_ADC_MspInit+0xe0>)
 8001198:	f002 f806 	bl	80031a8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	37e8      	adds	r7, #232	@ 0xe8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40022000 	.word	0x40022000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58020000 	.word	0x58020000

080011b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_TIM_Base_MspInit+0x3c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10e      	bne.n	80011e0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_TIM_Base_MspInit+0x40>)
 80011c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c8:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <HAL_TIM_Base_MspInit+0x40>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <HAL_TIM_Base_MspInit+0x40>)
 80011d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	40010400 	.word	0x40010400
 80011f0:	58024400 	.word	0x58024400

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	d844      	bhi.n	800128c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001202:	2200      	movs	r2, #0
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	2019      	movs	r0, #25
 8001208:	f001 ff2e 	bl	8003068 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800120c:	2019      	movs	r0, #25
 800120e:	f001 ff45 	bl	800309c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001212:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <HAL_InitTick+0xb0>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001218:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_InitTick+0xb4>)
 800121a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800121e:	4a22      	ldr	r2, [pc, #136]	@ (80012a8 <HAL_InitTick+0xb4>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <HAL_InitTick+0xb4>)
 800122a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f003 f99b 	bl	800457c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001246:	f003 f983 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 800124a:	4603      	mov	r3, r0
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001252:	4a16      	ldr	r2, [pc, #88]	@ (80012ac <HAL_InitTick+0xb8>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9b      	lsrs	r3, r3, #18
 800125a:	3b01      	subs	r3, #1
 800125c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_InitTick+0xbc>)
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <HAL_InitTick+0xc0>)
 8001262:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_InitTick+0xbc>)
 8001266:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800126a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800126c:	4a10      	ldr	r2, [pc, #64]	@ (80012b0 <HAL_InitTick+0xbc>)
 800126e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001270:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_InitTick+0xbc>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_InitTick+0xbc>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800127e:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <HAL_InitTick+0xbc>)
 8001280:	f005 febc 	bl	8006ffc <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d107      	bne.n	800129a <HAL_InitTick+0xa6>
 800128a:	e001      	b.n	8001290 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e005      	b.n	800129c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001290:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <HAL_InitTick+0xbc>)
 8001292:	f005 ff7b 	bl	800718c <HAL_TIM_Base_Start_IT>
 8001296:	4603      	mov	r3, r0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3738      	adds	r7, #56	@ 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000010 	.word	0x24000010
 80012a8:	58024400 	.word	0x58024400
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	24000198 	.word	0x24000198
 80012b4:	40010000 	.word	0x40010000

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <NMI_Handler+0x4>

080012c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <MemManage_Handler+0x4>

080012d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <UsageFault_Handler+0x4>

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM1_UP_IRQHandler+0x10>)
 80012f6:	f005 ffc1 	bl	800727c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	24000198 	.word	0x24000198

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001308:	4b43      	ldr	r3, [pc, #268]	@ (8001418 <SystemInit+0x114>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130e:	4a42      	ldr	r2, [pc, #264]	@ (8001418 <SystemInit+0x114>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001318:	4b40      	ldr	r3, [pc, #256]	@ (800141c <SystemInit+0x118>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	2b06      	cmp	r3, #6
 8001322:	d807      	bhi.n	8001334 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001324:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <SystemInit+0x118>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 030f 	bic.w	r3, r3, #15
 800132c:	4a3b      	ldr	r2, [pc, #236]	@ (800141c <SystemInit+0x118>)
 800132e:	f043 0307 	orr.w	r3, r3, #7
 8001332:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001334:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <SystemInit+0x11c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a39      	ldr	r2, [pc, #228]	@ (8001420 <SystemInit+0x11c>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001340:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <SystemInit+0x11c>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001346:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <SystemInit+0x11c>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4935      	ldr	r1, [pc, #212]	@ (8001420 <SystemInit+0x11c>)
 800134c:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <SystemInit+0x120>)
 800134e:	4013      	ands	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001352:	4b32      	ldr	r3, [pc, #200]	@ (800141c <SystemInit+0x118>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800135e:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <SystemInit+0x118>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 030f 	bic.w	r3, r3, #15
 8001366:	4a2d      	ldr	r2, [pc, #180]	@ (800141c <SystemInit+0x118>)
 8001368:	f043 0307 	orr.w	r3, r3, #7
 800136c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800136e:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <SystemInit+0x11c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001374:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <SystemInit+0x11c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800137a:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <SystemInit+0x11c>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <SystemInit+0x11c>)
 8001382:	4a29      	ldr	r2, [pc, #164]	@ (8001428 <SystemInit+0x124>)
 8001384:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <SystemInit+0x11c>)
 8001388:	4a28      	ldr	r2, [pc, #160]	@ (800142c <SystemInit+0x128>)
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <SystemInit+0x11c>)
 800138e:	4a28      	ldr	r2, [pc, #160]	@ (8001430 <SystemInit+0x12c>)
 8001390:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001392:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <SystemInit+0x11c>)
 8001394:	2200      	movs	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001398:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <SystemInit+0x11c>)
 800139a:	4a25      	ldr	r2, [pc, #148]	@ (8001430 <SystemInit+0x12c>)
 800139c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <SystemInit+0x11c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <SystemInit+0x11c>)
 80013a6:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <SystemInit+0x12c>)
 80013a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <SystemInit+0x11c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <SystemInit+0x11c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001420 <SystemInit+0x11c>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <SystemInit+0x11c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <SystemInit+0x130>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <SystemInit+0x134>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013ce:	d202      	bcs.n	80013d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <SystemInit+0x138>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <SystemInit+0x11c>)
 80013d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d113      	bne.n	800140c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <SystemInit+0x11c>)
 80013e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <SystemInit+0x11c>)
 80013ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <SystemInit+0x13c>)
 80013f6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013fa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <SystemInit+0x11c>)
 80013fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001402:	4a07      	ldr	r2, [pc, #28]	@ (8001420 <SystemInit+0x11c>)
 8001404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001408:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	52002000 	.word	0x52002000
 8001420:	58024400 	.word	0x58024400
 8001424:	eaf6ed7f 	.word	0xeaf6ed7f
 8001428:	02020200 	.word	0x02020200
 800142c:	01ff0000 	.word	0x01ff0000
 8001430:	01010280 	.word	0x01010280
 8001434:	5c001000 	.word	0x5c001000
 8001438:	ffff0000 	.word	0xffff0000
 800143c:	51008108 	.word	0x51008108
 8001440:	52004000 	.word	0x52004000

08001444 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <ExitRun0Mode+0x2c>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <ExitRun0Mode+0x2c>)
 800144e:	f043 0302 	orr.w	r3, r3, #2
 8001452:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001454:	bf00      	nop
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <ExitRun0Mode+0x2c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f9      	beq.n	8001456 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	58024800 	.word	0x58024800

08001474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80014b0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001478:	f7ff ffe4 	bl	8001444 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800147c:	f7ff ff42 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	@ (80014c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f009 f8c7 	bl	800a638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff fa73 	bl	8000994 <main>
  bx  lr
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b8:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 80014bc:	0800a73c 	.word	0x0800a73c
  ldr r2, =_sbss
 80014c0:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 80014c4:	24004b38 	.word	0x24004b38

080014c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC3_IRQHandler>
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f001 fdbd 	bl	8003052 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014d8:	f002 fe7a 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_Init+0x68>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	4913      	ldr	r1, [pc, #76]	@ (8001538 <HAL_Init+0x6c>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
 80014f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_Init+0x68>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_Init+0x6c>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <HAL_Init+0x70>)
 800150e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001510:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <HAL_Init+0x74>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001516:	200f      	movs	r0, #15
 8001518:	f7ff fe6c 	bl	80011f4 <HAL_InitTick>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e002      	b.n	800152c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001526:	f7ff fdb3 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	58024400 	.word	0x58024400
 8001538:	0800a724 	.word	0x0800a724
 800153c:	2400000c 	.word	0x2400000c
 8001540:	24000008 	.word	0x24000008

08001544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	24000014 	.word	0x24000014
 8001568:	240001e4 	.word	0x240001e4

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	240001e4 	.word	0x240001e4

08001584 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetREVID+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0c1b      	lsrs	r3, r3, #16
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	5c001000 	.word	0x5c001000

0800159c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001614:	2b00      	cmp	r3, #0
 8001616:	d107      	bne.n	8001628 <LL_ADC_SetChannelPreselection+0x24>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	0e9b      	lsrs	r3, r3, #26
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2201      	movs	r2, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	e015      	b.n	8001654 <LL_ADC_SetChannelPreselection+0x50>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800163e:	2320      	movs	r3, #32
 8001640:	e003      	b.n	800164a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	2201      	movs	r2, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	69d2      	ldr	r2, [r2, #28]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800166a:	b480      	push	{r7}
 800166c:	b087      	sub	sp, #28
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3360      	adds	r3, #96	@ 0x60
 800167c:	461a      	mov	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	430b      	orrs	r3, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800169e:	bf00      	nop
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b085      	sub	sp, #20
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	611a      	str	r2, [r3, #16]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3360      	adds	r3, #96	@ 0x60
 80016ec:	461a      	mov	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]
  }
}
 8001706:	bf00      	nop
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3330      	adds	r3, #48	@ 0x30
 8001748:	461a      	mov	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	4413      	add	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	211f      	movs	r1, #31
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0e9b      	lsrs	r3, r3, #26
 8001770:	f003 011f 	and.w	r1, r3, #31
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3314      	adds	r3, #20
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	0e5b      	lsrs	r3, r3, #25
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	0d1b      	lsrs	r3, r3, #20
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2107      	movs	r1, #7
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	0d1b      	lsrs	r3, r3, #20
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0318 	and.w	r3, r3, #24
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <LL_ADC_SetChannelSingleDiff+0x44>)
 800180c:	40d9      	lsrs	r1, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	400b      	ands	r3, r1
 8001812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	000fffff 	.word	0x000fffff

08001830 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6093      	str	r3, [r2, #8]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	5fffffc0 	.word	0x5fffffc0

0800188c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800189c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	6fffffc0 	.word	0x6fffffc0

080018dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <LL_ADC_Enable+0x24>)
 8001912:	4013      	ands	r3, r2
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	7fffffc0 	.word	0x7fffffc0

0800192c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <LL_ADC_Disable+0x24>)
 800193a:	4013      	ands	r3, r2
 800193c:	f043 0202 	orr.w	r2, r3, #2
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	7fffffc0 	.word	0x7fffffc0

08001954 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <LL_ADC_IsEnabled+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_ADC_IsEnabled+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsDisableOngoing+0x18>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsDisableOngoing+0x1a>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <LL_ADC_REG_StartConversion+0x24>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	7fffffc0 	.word	0x7fffffc0

080019c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <LL_ADC_REG_StopConversion+0x24>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	f043 0210 	orr.w	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	7fffffc0 	.word	0x7fffffc0

080019f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <LL_ADC_INJ_StopConversion+0x24>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	7fffffc0 	.word	0x7fffffc0

08001a40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d101      	bne.n	8001a58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	@ 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e18f      	b.n	8001da2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fb1b 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff feef 	bl	800188c <LL_ADC_IsDeepPowerDownEnabled>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fed5 	bl	8001868 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff0a 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d114      	bne.n	8001af8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff feee 	bl	80018b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad8:	4b87      	ldr	r3, [pc, #540]	@ (8001cf8 <HAL_ADC_Init+0x290>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	4a87      	ldr	r2, [pc, #540]	@ (8001cfc <HAL_ADC_Init+0x294>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff feed 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0c:	f043 0210 	orr.w	r2, r3, #16
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff61 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8001b2e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 8129 	bne.w	8001d90 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 8125 	bne.w	8001d90 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fefa 	bl	8001954 <LL_ADC_IsEnabled>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d136      	bne.n	8001bd4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a65      	ldr	r2, [pc, #404]	@ (8001d00 <HAL_ADC_Init+0x298>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <HAL_ADC_Init+0x112>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a63      	ldr	r2, [pc, #396]	@ (8001d04 <HAL_ADC_Init+0x29c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10e      	bne.n	8001b98 <HAL_ADC_Init+0x130>
 8001b7a:	4861      	ldr	r0, [pc, #388]	@ (8001d00 <HAL_ADC_Init+0x298>)
 8001b7c:	f7ff feea 	bl	8001954 <LL_ADC_IsEnabled>
 8001b80:	4604      	mov	r4, r0
 8001b82:	4860      	ldr	r0, [pc, #384]	@ (8001d04 <HAL_ADC_Init+0x29c>)
 8001b84:	f7ff fee6 	bl	8001954 <LL_ADC_IsEnabled>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4323      	orrs	r3, r4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e008      	b.n	8001baa <HAL_ADC_Init+0x142>
 8001b98:	485b      	ldr	r0, [pc, #364]	@ (8001d08 <HAL_ADC_Init+0x2a0>)
 8001b9a:	f7ff fedb 	bl	8001954 <LL_ADC_IsEnabled>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a53      	ldr	r2, [pc, #332]	@ (8001d00 <HAL_ADC_Init+0x298>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_Init+0x15a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a51      	ldr	r2, [pc, #324]	@ (8001d04 <HAL_ADC_Init+0x29c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x15e>
 8001bc2:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_ADC_Init+0x2a4>)
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_Init+0x160>
 8001bc6:	4a52      	ldr	r2, [pc, #328]	@ (8001d10 <HAL_ADC_Init+0x2a8>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f7ff fce4 	bl	800159c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bd4:	f7ff fcd6 	bl	8001584 <HAL_GetREVID>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d914      	bls.n	8001c0c <HAL_ADC_Init+0x1a4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d110      	bne.n	8001c0c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7d5b      	ldrb	r3, [r3, #21]
 8001bee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bf4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001bfa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7f1b      	ldrb	r3, [r3, #28]
 8001c00:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c02:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c04:	f043 030c 	orr.w	r3, r3, #12
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	e00d      	b.n	8001c28 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7d5b      	ldrb	r3, [r3, #21]
 8001c10:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c16:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c1c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7f1b      	ldrb	r3, [r3, #28]
 8001c22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7f1b      	ldrb	r3, [r3, #28]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	045b      	lsls	r3, r3, #17
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <HAL_ADC_Init+0x2ac>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff febc 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8001c78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fede 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 8001c84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d15f      	bne.n	8001d4c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d15c      	bne.n	8001d4c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7d1b      	ldrb	r3, [r3, #20]
 8001c96:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <HAL_ADC_Init+0x2b0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	69b9      	ldr	r1, [r7, #24]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d130      	bne.n	8001d20 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <HAL_ADC_Init+0x2b4>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cd2:	3a01      	subs	r2, #1
 8001cd4:	0411      	lsls	r1, r2, #16
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	e01c      	b.n	8001d30 <HAL_ADC_Init+0x2c8>
 8001cf6:	bf00      	nop
 8001cf8:	24000008 	.word	0x24000008
 8001cfc:	053e2d63 	.word	0x053e2d63
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40022100 	.word	0x40022100
 8001d08:	58026000 	.word	0x58026000
 8001d0c:	40022300 	.word	0x40022300
 8001d10:	58026300 	.word	0x58026300
 8001d14:	fff0c003 	.word	0xfff0c003
 8001d18:	ffffbffc 	.word	0xffffbffc
 8001d1c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fec6 	bl	8002ad8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10c      	bne.n	8001d6e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f023 010f 	bic.w	r1, r3, #15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	1e5a      	subs	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d6c:	e007      	b.n	8001d7e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 020f 	bic.w	r2, r2, #15
 8001d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d8e:	e007      	b.n	8001da0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d94:	f043 0210 	orr.w	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	@ 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop

08001dac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5c      	ldr	r2, [pc, #368]	@ (8001f2c <HAL_ADC_Start+0x180>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_ADC_Start+0x1c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f30 <HAL_ADC_Start+0x184>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_Start+0x20>
 8001dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f34 <HAL_ADC_Start+0x188>)
 8001dca:	e000      	b.n	8001dce <HAL_ADC_Start+0x22>
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8001f38 <HAL_ADC_Start+0x18c>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fd2e 	bl	8001830 <LL_ADC_GetMultimode>
 8001dd4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fe08 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 809a 	bne.w	8001f1c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Start+0x4a>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e095      	b.n	8001f22 <HAL_ADC_Start+0x176>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fd80 	bl	8002904 <ADC_Enable>
 8001e04:	4603      	mov	r3, r0
 8001e06:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 8081 	bne.w	8001f12 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e14:	4b49      	ldr	r3, [pc, #292]	@ (8001f3c <HAL_ADC_Start+0x190>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a42      	ldr	r2, [pc, #264]	@ (8001f30 <HAL_ADC_Start+0x184>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d002      	beq.n	8001e30 <HAL_ADC_Start+0x84>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Start+0x86>
 8001e30:	4b3e      	ldr	r3, [pc, #248]	@ (8001f2c <HAL_ADC_Start+0x180>)
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e58:	d106      	bne.n	8001e68 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f023 0206 	bic.w	r2, r3, #6
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e66:	e002      	b.n	8001e6e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	221c      	movs	r2, #28
 8001e74:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a2b      	ldr	r2, [pc, #172]	@ (8001f30 <HAL_ADC_Start+0x184>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d002      	beq.n	8001e8e <HAL_ADC_Start+0xe2>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e000      	b.n	8001e90 <HAL_ADC_Start+0xe4>
 8001e8e:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <HAL_ADC_Start+0x180>)
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d008      	beq.n	8001eaa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d002      	beq.n	8001eaa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b09      	cmp	r3, #9
 8001ea8:	d114      	bne.n	8001ed4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ec0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fd67 	bl	80019a0 <LL_ADC_REG_StartConversion>
 8001ed2:	e025      	b.n	8001f20 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <HAL_ADC_Start+0x184>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d002      	beq.n	8001ef0 <HAL_ADC_Start+0x144>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	e000      	b.n	8001ef2 <HAL_ADC_Start+0x146>
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_ADC_Start+0x180>)
 8001ef2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00f      	beq.n	8001f20 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f04:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f08:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f10:	e006      	b.n	8001f20 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001f1a:	e001      	b.n	8001f20 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40022100 	.word	0x40022100
 8001f34:	40022300 	.word	0x40022300
 8001f38:	58026300 	.word	0x58026300
 8001f3c:	fffff0fe 	.word	0xfffff0fe

08001f40 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Stop+0x16>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e021      	b.n	8001f9a <HAL_ADC_Stop+0x5a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f5e:	2103      	movs	r1, #3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fc13 	bl	800278c <ADC_ConversionStop>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fd51 	bl	8002a18 <ADC_Disable>
 8001f76:	4603      	mov	r3, r0
 8001f78:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f84:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <HAL_ADC_Stop+0x64>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	ffffeefe 	.word	0xffffeefe

08001fa8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a72      	ldr	r2, [pc, #456]	@ (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_PollForConversion+0x1e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a70      	ldr	r2, [pc, #448]	@ (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_PollForConversion+0x22>
 8001fc6:	4b70      	ldr	r3, [pc, #448]	@ (8002188 <HAL_ADC_PollForConversion+0x1e0>)
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_PollForConversion+0x24>
 8001fca:	4b70      	ldr	r3, [pc, #448]	@ (800218c <HAL_ADC_PollForConversion+0x1e4>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fc2f 	bl	8001830 <LL_ADC_GetMultimode>
 8001fd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d102      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	e037      	b.n	8002052 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d002      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b09      	cmp	r3, #9
 8001ff2:	d111      	bne.n	8002018 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0b1      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002012:	2304      	movs	r3, #4
 8002014:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002016:	e01c      	b.n	8002052 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a58      	ldr	r2, [pc, #352]	@ (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_ADC_PollForConversion+0x84>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a57      	ldr	r2, [pc, #348]	@ (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_ADC_PollForConversion+0x88>
 800202c:	4b56      	ldr	r3, [pc, #344]	@ (8002188 <HAL_ADC_PollForConversion+0x1e0>)
 800202e:	e000      	b.n	8002032 <HAL_ADC_PollForConversion+0x8a>
 8002030:	4b56      	ldr	r3, [pc, #344]	@ (800218c <HAL_ADC_PollForConversion+0x1e4>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fc0a 	bl	800184c <LL_ADC_GetMultiDMATransfer>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e093      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800204e:	2304      	movs	r3, #4
 8002050:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002052:	f7ff fa8b 	bl	800156c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002058:	e021      	b.n	800209e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d01d      	beq.n	800209e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002062:	f7ff fa83 	bl	800156c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <HAL_ADC_PollForConversion+0xd0>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f043 0204 	orr.w	r2, r3, #4
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e06b      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0d6      	beq.n	800205a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fb28 	bl	8001712 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01c      	beq.n	8002102 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7d5b      	ldrb	r3, [r3, #21]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d118      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1f      	ldr	r2, [pc, #124]	@ (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d002      	beq.n	8002112 <HAL_ADC_PollForConversion+0x16a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e000      	b.n	8002114 <HAL_ADC_PollForConversion+0x16c>
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4293      	cmp	r3, r2
 800211a:	d008      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d002      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b09      	cmp	r3, #9
 800212c:	d104      	bne.n	8002138 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e00c      	b.n	8002152 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a11      	ldr	r2, [pc, #68]	@ (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d002      	beq.n	8002148 <HAL_ADC_PollForConversion+0x1a0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	e000      	b.n	800214a <HAL_ADC_PollForConversion+0x1a2>
 8002148:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 800214a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d104      	bne.n	8002162 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2208      	movs	r2, #8
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e008      	b.n	8002174 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	220c      	movs	r2, #12
 8002172:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000
 8002184:	40022100 	.word	0x40022100
 8002188:	40022300 	.word	0x40022300
 800218c:	58026300 	.word	0x58026300

08002190 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b08d      	sub	sp, #52	@ 0x34
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a65      	ldr	r2, [pc, #404]	@ (800235c <HAL_ADC_ConfigChannel+0x1b0>)
 80021c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x2a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e2c7      	b.n	8002766 <HAL_ADC_ConfigChannel+0x5ba>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fc04 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 82ac 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db2c      	blt.n	8002252 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002200:	2b00      	cmp	r3, #0
 8002202:	d108      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x6a>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2201      	movs	r2, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	e016      	b.n	8002244 <HAL_ADC_ConfigChannel+0x98>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	613b      	str	r3, [r7, #16]
  return result;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800222e:	2320      	movs	r3, #32
 8002230:	e003      	b.n	800223a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2201      	movs	r2, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	69d1      	ldr	r1, [r2, #28]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	430b      	orrs	r3, r1
 8002250:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	f7ff fa6a 	bl	8001738 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fbc1 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 800226e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fbe3 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 800227a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 80b8 	bne.w	80023f4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 80b4 	bne.w	80023f4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	461a      	mov	r2, r3
 800229a:	f7ff fa79 	bl	8001790 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800229e:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <HAL_ADC_ConfigChannel+0x1b4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80022a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x118>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	e01d      	b.n	8002300 <HAL_ADC_ConfigChannel+0x154>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x13e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	e00a      	b.n	8002300 <HAL_ADC_ConfigChannel+0x154>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b04      	cmp	r3, #4
 8002308:	d02c      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6919      	ldr	r1, [r3, #16]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f7ff f9a7 	bl	800166a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7e5b      	ldrb	r3, [r3, #25]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x186>
 800232c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002330:	e000      	b.n	8002334 <HAL_ADC_ConfigChannel+0x188>
 8002332:	2300      	movs	r3, #0
 8002334:	461a      	mov	r2, r3
 8002336:	f7ff f9d1 	bl	80016dc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	7e1b      	ldrb	r3, [r3, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d102      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x1a4>
 800234a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800234e:	e000      	b.n	8002352 <HAL_ADC_ConfigChannel+0x1a6>
 8002350:	2300      	movs	r3, #0
 8002352:	461a      	mov	r2, r3
 8002354:	f7ff f9a9 	bl	80016aa <LL_ADC_SetDataRightShift>
 8002358:	e04c      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x248>
 800235a:	bf00      	nop
 800235c:	47ff0000 	.word	0x47ff0000
 8002360:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002386:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800238e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	069b      	lsls	r3, r3, #26
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023aa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	069b      	lsls	r3, r3, #26
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023ce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	069b      	lsls	r3, r3, #26
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d107      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff faab 	bl	8001954 <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 81aa 	bne.w	800275a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	461a      	mov	r2, r3
 8002414:	f7ff f9e8 	bl	80017e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a87      	ldr	r2, [pc, #540]	@ (800263c <HAL_ADC_ConfigChannel+0x490>)
 800241e:	4293      	cmp	r3, r2
 8002420:	f040 809a 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4984      	ldr	r1, [pc, #528]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 800242e:	428b      	cmp	r3, r1
 8002430:	d147      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x316>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4983      	ldr	r1, [pc, #524]	@ (8002644 <HAL_ADC_ConfigChannel+0x498>)
 8002438:	428b      	cmp	r3, r1
 800243a:	d040      	beq.n	80024be <HAL_ADC_ConfigChannel+0x312>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4981      	ldr	r1, [pc, #516]	@ (8002648 <HAL_ADC_ConfigChannel+0x49c>)
 8002442:	428b      	cmp	r3, r1
 8002444:	d039      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x30e>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4980      	ldr	r1, [pc, #512]	@ (800264c <HAL_ADC_ConfigChannel+0x4a0>)
 800244c:	428b      	cmp	r3, r1
 800244e:	d032      	beq.n	80024b6 <HAL_ADC_ConfigChannel+0x30a>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	497e      	ldr	r1, [pc, #504]	@ (8002650 <HAL_ADC_ConfigChannel+0x4a4>)
 8002456:	428b      	cmp	r3, r1
 8002458:	d02b      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x306>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	497d      	ldr	r1, [pc, #500]	@ (8002654 <HAL_ADC_ConfigChannel+0x4a8>)
 8002460:	428b      	cmp	r3, r1
 8002462:	d024      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x302>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	497b      	ldr	r1, [pc, #492]	@ (8002658 <HAL_ADC_ConfigChannel+0x4ac>)
 800246a:	428b      	cmp	r3, r1
 800246c:	d01d      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x2fe>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	497a      	ldr	r1, [pc, #488]	@ (800265c <HAL_ADC_ConfigChannel+0x4b0>)
 8002474:	428b      	cmp	r3, r1
 8002476:	d016      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x2fa>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4978      	ldr	r1, [pc, #480]	@ (8002660 <HAL_ADC_ConfigChannel+0x4b4>)
 800247e:	428b      	cmp	r3, r1
 8002480:	d00f      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x2f6>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4977      	ldr	r1, [pc, #476]	@ (8002664 <HAL_ADC_ConfigChannel+0x4b8>)
 8002488:	428b      	cmp	r3, r1
 800248a:	d008      	beq.n	800249e <HAL_ADC_ConfigChannel+0x2f2>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4975      	ldr	r1, [pc, #468]	@ (8002668 <HAL_ADC_ConfigChannel+0x4bc>)
 8002492:	428b      	cmp	r3, r1
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x2ee>
 8002496:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_ADC_ConfigChannel+0x4c0>)
 8002498:	e05a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800249a:	2300      	movs	r3, #0
 800249c:	e058      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800249e:	4b74      	ldr	r3, [pc, #464]	@ (8002670 <HAL_ADC_ConfigChannel+0x4c4>)
 80024a0:	e056      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024a2:	4b74      	ldr	r3, [pc, #464]	@ (8002674 <HAL_ADC_ConfigChannel+0x4c8>)
 80024a4:	e054      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002660 <HAL_ADC_ConfigChannel+0x4b4>)
 80024a8:	e052      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024aa:	4b6c      	ldr	r3, [pc, #432]	@ (800265c <HAL_ADC_ConfigChannel+0x4b0>)
 80024ac:	e050      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024ae:	4b72      	ldr	r3, [pc, #456]	@ (8002678 <HAL_ADC_ConfigChannel+0x4cc>)
 80024b0:	e04e      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024b2:	4b72      	ldr	r3, [pc, #456]	@ (800267c <HAL_ADC_ConfigChannel+0x4d0>)
 80024b4:	e04c      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024b6:	4b72      	ldr	r3, [pc, #456]	@ (8002680 <HAL_ADC_ConfigChannel+0x4d4>)
 80024b8:	e04a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024ba:	4b72      	ldr	r3, [pc, #456]	@ (8002684 <HAL_ADC_ConfigChannel+0x4d8>)
 80024bc:	e048      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024be:	2301      	movs	r3, #1
 80024c0:	e046      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4970      	ldr	r1, [pc, #448]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 80024c8:	428b      	cmp	r3, r1
 80024ca:	d140      	bne.n	800254e <HAL_ADC_ConfigChannel+0x3a2>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	495c      	ldr	r1, [pc, #368]	@ (8002644 <HAL_ADC_ConfigChannel+0x498>)
 80024d2:	428b      	cmp	r3, r1
 80024d4:	d039      	beq.n	800254a <HAL_ADC_ConfigChannel+0x39e>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	495b      	ldr	r1, [pc, #364]	@ (8002648 <HAL_ADC_ConfigChannel+0x49c>)
 80024dc:	428b      	cmp	r3, r1
 80024de:	d032      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x39a>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4959      	ldr	r1, [pc, #356]	@ (800264c <HAL_ADC_ConfigChannel+0x4a0>)
 80024e6:	428b      	cmp	r3, r1
 80024e8:	d02b      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x396>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4958      	ldr	r1, [pc, #352]	@ (8002650 <HAL_ADC_ConfigChannel+0x4a4>)
 80024f0:	428b      	cmp	r3, r1
 80024f2:	d024      	beq.n	800253e <HAL_ADC_ConfigChannel+0x392>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4956      	ldr	r1, [pc, #344]	@ (8002654 <HAL_ADC_ConfigChannel+0x4a8>)
 80024fa:	428b      	cmp	r3, r1
 80024fc:	d01d      	beq.n	800253a <HAL_ADC_ConfigChannel+0x38e>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4955      	ldr	r1, [pc, #340]	@ (8002658 <HAL_ADC_ConfigChannel+0x4ac>)
 8002504:	428b      	cmp	r3, r1
 8002506:	d016      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x38a>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4953      	ldr	r1, [pc, #332]	@ (800265c <HAL_ADC_ConfigChannel+0x4b0>)
 800250e:	428b      	cmp	r3, r1
 8002510:	d00f      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x386>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4952      	ldr	r1, [pc, #328]	@ (8002660 <HAL_ADC_ConfigChannel+0x4b4>)
 8002518:	428b      	cmp	r3, r1
 800251a:	d008      	beq.n	800252e <HAL_ADC_ConfigChannel+0x382>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4951      	ldr	r1, [pc, #324]	@ (8002668 <HAL_ADC_ConfigChannel+0x4bc>)
 8002522:	428b      	cmp	r3, r1
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x37e>
 8002526:	4b51      	ldr	r3, [pc, #324]	@ (800266c <HAL_ADC_ConfigChannel+0x4c0>)
 8002528:	e012      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800252a:	2300      	movs	r3, #0
 800252c:	e010      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800252e:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <HAL_ADC_ConfigChannel+0x4c8>)
 8002530:	e00e      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 8002532:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_ADC_ConfigChannel+0x4b4>)
 8002534:	e00c      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <HAL_ADC_ConfigChannel+0x4b0>)
 8002538:	e00a      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800253a:	4b4f      	ldr	r3, [pc, #316]	@ (8002678 <HAL_ADC_ConfigChannel+0x4cc>)
 800253c:	e008      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800253e:	4b4f      	ldr	r3, [pc, #316]	@ (800267c <HAL_ADC_ConfigChannel+0x4d0>)
 8002540:	e006      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 8002542:	4b4f      	ldr	r3, [pc, #316]	@ (8002680 <HAL_ADC_ConfigChannel+0x4d4>)
 8002544:	e004      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 8002546:	4b4f      	ldr	r3, [pc, #316]	@ (8002684 <HAL_ADC_ConfigChannel+0x4d8>)
 8002548:	e002      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3a4>
 800254e:	2300      	movs	r3, #0
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f7ff f856 	bl	8001604 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f280 80fc 	bge.w	800275a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a36      	ldr	r2, [pc, #216]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d004      	beq.n	8002576 <HAL_ADC_ConfigChannel+0x3ca>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a45      	ldr	r2, [pc, #276]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x3ce>
 8002576:	4b45      	ldr	r3, [pc, #276]	@ (800268c <HAL_ADC_ConfigChannel+0x4e0>)
 8002578:	e000      	b.n	800257c <HAL_ADC_ConfigChannel+0x3d0>
 800257a:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <HAL_ADC_ConfigChannel+0x4e4>)
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff f833 	bl	80015e8 <LL_ADC_GetCommonPathInternalCh>
 8002582:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2d      	ldr	r2, [pc, #180]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x3ec>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a3d      	ldr	r2, [pc, #244]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10e      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x40a>
 8002598:	4829      	ldr	r0, [pc, #164]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 800259a:	f7ff f9db 	bl	8001954 <LL_ADC_IsEnabled>
 800259e:	4604      	mov	r4, r0
 80025a0:	4839      	ldr	r0, [pc, #228]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 80025a2:	f7ff f9d7 	bl	8001954 <LL_ADC_IsEnabled>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4323      	orrs	r3, r4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	e008      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x41c>
 80025b6:	4837      	ldr	r0, [pc, #220]	@ (8002694 <HAL_ADC_ConfigChannel+0x4e8>)
 80025b8:	f7ff f9cc 	bl	8001954 <LL_ADC_IsEnabled>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80b3 	beq.w	8002734 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a31      	ldr	r2, [pc, #196]	@ (8002698 <HAL_ADC_ConfigChannel+0x4ec>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d165      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x4f8>
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d160      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002694 <HAL_ADC_ConfigChannel+0x4e8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	f040 80b6 	bne.w	800275a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <HAL_ADC_ConfigChannel+0x494>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_ADC_ConfigChannel+0x456>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <HAL_ADC_ConfigChannel+0x4dc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x45a>
 8002602:	4a22      	ldr	r2, [pc, #136]	@ (800268c <HAL_ADC_ConfigChannel+0x4e0>)
 8002604:	e000      	b.n	8002608 <HAL_ADC_ConfigChannel+0x45c>
 8002606:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <HAL_ADC_ConfigChannel+0x4e4>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800260e:	4619      	mov	r1, r3
 8002610:	4610      	mov	r0, r2
 8002612:	f7fe ffd6 	bl	80015c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002616:	4b21      	ldr	r3, [pc, #132]	@ (800269c <HAL_ADC_ConfigChannel+0x4f0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	4a20      	ldr	r2, [pc, #128]	@ (80026a0 <HAL_ADC_ConfigChannel+0x4f4>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	3301      	adds	r3, #1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800262a:	e002      	b.n	8002632 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3b01      	subs	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002638:	e08f      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
 800263a:	bf00      	nop
 800263c:	47ff0000 	.word	0x47ff0000
 8002640:	40022000 	.word	0x40022000
 8002644:	04300002 	.word	0x04300002
 8002648:	08600004 	.word	0x08600004
 800264c:	0c900008 	.word	0x0c900008
 8002650:	10c00010 	.word	0x10c00010
 8002654:	14f00020 	.word	0x14f00020
 8002658:	2a000400 	.word	0x2a000400
 800265c:	2e300800 	.word	0x2e300800
 8002660:	32601000 	.word	0x32601000
 8002664:	43210000 	.word	0x43210000
 8002668:	4b840000 	.word	0x4b840000
 800266c:	4fb80000 	.word	0x4fb80000
 8002670:	47520000 	.word	0x47520000
 8002674:	36902000 	.word	0x36902000
 8002678:	25b00200 	.word	0x25b00200
 800267c:	21800100 	.word	0x21800100
 8002680:	1d500080 	.word	0x1d500080
 8002684:	19200040 	.word	0x19200040
 8002688:	40022100 	.word	0x40022100
 800268c:	40022300 	.word	0x40022300
 8002690:	58026300 	.word	0x58026300
 8002694:	58026000 	.word	0x58026000
 8002698:	cb840000 	.word	0xcb840000
 800269c:	24000008 	.word	0x24000008
 80026a0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a31      	ldr	r2, [pc, #196]	@ (8002770 <HAL_ADC_ConfigChannel+0x5c4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d11e      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x540>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d119      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <HAL_ADC_ConfigChannel+0x5c8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d14b      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002778 <HAL_ADC_ConfigChannel+0x5cc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d004      	beq.n	80026d6 <HAL_ADC_ConfigChannel+0x52a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2a      	ldr	r2, [pc, #168]	@ (800277c <HAL_ADC_ConfigChannel+0x5d0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x52e>
 80026d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002780 <HAL_ADC_ConfigChannel+0x5d4>)
 80026d8:	e000      	b.n	80026dc <HAL_ADC_ConfigChannel+0x530>
 80026da:	4a2a      	ldr	r2, [pc, #168]	@ (8002784 <HAL_ADC_ConfigChannel+0x5d8>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f7fe ff6c 	bl	80015c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ea:	e036      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a25      	ldr	r2, [pc, #148]	@ (8002788 <HAL_ADC_ConfigChannel+0x5dc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d131      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12c      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1b      	ldr	r2, [pc, #108]	@ (8002774 <HAL_ADC_ConfigChannel+0x5c8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d127      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1a      	ldr	r2, [pc, #104]	@ (8002778 <HAL_ADC_ConfigChannel+0x5cc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_ADC_ConfigChannel+0x572>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_ADC_ConfigChannel+0x5d0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x576>
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_ADC_ConfigChannel+0x5d4>)
 8002720:	e000      	b.n	8002724 <HAL_ADC_ConfigChannel+0x578>
 8002722:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <HAL_ADC_ConfigChannel+0x5d8>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f7fe ff48 	bl	80015c2 <LL_ADC_SetCommonPathInternalCh>
 8002732:	e012      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002746:	e008      	b.n	800275a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002762:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002766:	4618      	mov	r0, r3
 8002768:	3734      	adds	r7, #52	@ 0x34
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	c7520000 	.word	0xc7520000
 8002774:	58026000 	.word	0x58026000
 8002778:	40022000 	.word	0x40022000
 800277c:	40022100 	.word	0x40022100
 8002780:	40022300 	.word	0x40022300
 8002784:	58026300 	.word	0x58026300
 8002788:	cfb80000 	.word	0xcfb80000

0800278c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f924 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 80027a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f946 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 80027b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d103      	bne.n	80027c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8098 	beq.w	80028f4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02a      	beq.n	8002828 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7d5b      	ldrb	r3, [r3, #21]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d126      	bne.n	8002828 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7d1b      	ldrb	r3, [r3, #20]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d122      	bne.n	8002828 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027e6:	e014      	b.n	8002812 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4a45      	ldr	r2, [pc, #276]	@ (8002900 <ADC_ConversionStop+0x174>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d90d      	bls.n	800280c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f4:	f043 0210 	orr.w	r2, r3, #16
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e074      	b.n	80028f6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	3301      	adds	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281c:	2b40      	cmp	r3, #64	@ 0x40
 800281e:	d1e3      	bne.n	80027e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2240      	movs	r2, #64	@ 0x40
 8002826:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d014      	beq.n	8002858 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff f8dc 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00c      	beq.n	8002858 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f899 	bl	800197a <LL_ADC_IsDisableOngoing>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f8b8 	bl	80019c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d014      	beq.n	8002888 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f8ec 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f881 	bl	800197a <LL_ADC_IsDisableOngoing>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d104      	bne.n	8002888 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f8c8 	bl	8001a18 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d005      	beq.n	800289a <ADC_ConversionStop+0x10e>
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d105      	bne.n	80028a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002894:	230c      	movs	r3, #12
 8002896:	617b      	str	r3, [r7, #20]
        break;
 8002898:	e005      	b.n	80028a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800289a:	2308      	movs	r3, #8
 800289c:	617b      	str	r3, [r7, #20]
        break;
 800289e:	e002      	b.n	80028a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028a0:	2304      	movs	r3, #4
 80028a2:	617b      	str	r3, [r7, #20]
        break;
 80028a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028a6:	f7fe fe61 	bl	800156c <HAL_GetTick>
 80028aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028ac:	e01b      	b.n	80028e6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028ae:	f7fe fe5d 	bl	800156c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d914      	bls.n	80028e6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e007      	b.n	80028f6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1dc      	bne.n	80028ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	000cdbff 	.word	0x000cdbff

08002904 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f81f 	bl	8001954 <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d16e      	bne.n	80029fa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	4b38      	ldr	r3, [pc, #224]	@ (8002a04 <ADC_Enable+0x100>)
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e05a      	b.n	80029fc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe ffda 	bl	8001904 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002950:	f7fe fe0c 	bl	800156c <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2b      	ldr	r2, [pc, #172]	@ (8002a08 <ADC_Enable+0x104>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <ADC_Enable+0x66>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a29      	ldr	r2, [pc, #164]	@ (8002a0c <ADC_Enable+0x108>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <ADC_Enable+0x6a>
 800296a:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <ADC_Enable+0x10c>)
 800296c:	e000      	b.n	8002970 <ADC_Enable+0x6c>
 800296e:	4b29      	ldr	r3, [pc, #164]	@ (8002a14 <ADC_Enable+0x110>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe ff5d 	bl	8001830 <LL_ADC_GetMultimode>
 8002976:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a23      	ldr	r2, [pc, #140]	@ (8002a0c <ADC_Enable+0x108>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d002      	beq.n	8002988 <ADC_Enable+0x84>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e000      	b.n	800298a <ADC_Enable+0x86>
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <ADC_Enable+0x104>)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4293      	cmp	r3, r2
 8002990:	d02c      	beq.n	80029ec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d130      	bne.n	80029fa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002998:	e028      	b.n	80029ec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe ffd8 	bl	8001954 <LL_ADC_IsEnabled>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ffa8 	bl	8001904 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b4:	f7fe fdda 	bl	800156c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d914      	bls.n	80029ec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d00d      	beq.n	80029ec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d4:	f043 0210 	orr.w	r2, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e007      	b.n	80029fc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d1cf      	bne.n	800299a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	8000003f 	.word	0x8000003f
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40022100 	.word	0x40022100
 8002a10:	40022300 	.word	0x40022300
 8002a14:	58026300 	.word	0x58026300

08002a18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe ffa8 	bl	800197a <LL_ADC_IsDisableOngoing>
 8002a2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe ff8f 	bl	8001954 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d047      	beq.n	8002acc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d144      	bne.n	8002acc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030d 	and.w	r3, r3, #13
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10c      	bne.n	8002a6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe ff69 	bl	800192c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a62:	f7fe fd83 	bl	800156c <HAL_GetTick>
 8002a66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a68:	e029      	b.n	8002abe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e023      	b.n	8002ace <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a86:	f7fe fd71 	bl	800156c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d914      	bls.n	8002abe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1dc      	bne.n	8002a86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a7a      	ldr	r2, [pc, #488]	@ (8002cd0 <ADC_ConfigureBoostMode+0x1f8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <ADC_ConfigureBoostMode+0x1c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a79      	ldr	r2, [pc, #484]	@ (8002cd4 <ADC_ConfigureBoostMode+0x1fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d109      	bne.n	8002b08 <ADC_ConfigureBoostMode+0x30>
 8002af4:	4b78      	ldr	r3, [pc, #480]	@ (8002cd8 <ADC_ConfigureBoostMode+0x200>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e008      	b.n	8002b1a <ADC_ConfigureBoostMode+0x42>
 8002b08:	4b74      	ldr	r3, [pc, #464]	@ (8002cdc <ADC_ConfigureBoostMode+0x204>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b1e:	f001 fcd1 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8002b22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b2c:	d010      	beq.n	8002b50 <ADC_ConfigureBoostMode+0x78>
 8002b2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b32:	d873      	bhi.n	8002c1c <ADC_ConfigureBoostMode+0x144>
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b38:	d002      	beq.n	8002b40 <ADC_ConfigureBoostMode+0x68>
 8002b3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b3e:	d16d      	bne.n	8002c1c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	60fb      	str	r3, [r7, #12]
        break;
 8002b4e:	e068      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	60fb      	str	r3, [r7, #12]
        break;
 8002b56:	e064      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b58:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b5c:	f04f 0100 	mov.w	r1, #0
 8002b60:	f002 ff58 	bl	8005a14 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b6e:	d051      	beq.n	8002c14 <ADC_ConfigureBoostMode+0x13c>
 8002b70:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b74:	d854      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002b76:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b7a:	d047      	beq.n	8002c0c <ADC_ConfigureBoostMode+0x134>
 8002b7c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b80:	d84e      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002b82:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b86:	d03d      	beq.n	8002c04 <ADC_ConfigureBoostMode+0x12c>
 8002b88:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b8c:	d848      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002b8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b92:	d033      	beq.n	8002bfc <ADC_ConfigureBoostMode+0x124>
 8002b94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b98:	d842      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002b9a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002b9e:	d029      	beq.n	8002bf4 <ADC_ConfigureBoostMode+0x11c>
 8002ba0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ba4:	d83c      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002ba6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002baa:	d01a      	beq.n	8002be2 <ADC_ConfigureBoostMode+0x10a>
 8002bac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bb0:	d836      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002bb2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bb6:	d014      	beq.n	8002be2 <ADC_ConfigureBoostMode+0x10a>
 8002bb8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bbc:	d830      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bc2:	d00e      	beq.n	8002be2 <ADC_ConfigureBoostMode+0x10a>
 8002bc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bc8:	d82a      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002bca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002bce:	d008      	beq.n	8002be2 <ADC_ConfigureBoostMode+0x10a>
 8002bd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002bd4:	d824      	bhi.n	8002c20 <ADC_ConfigureBoostMode+0x148>
 8002bd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bda:	d002      	beq.n	8002be2 <ADC_ConfigureBoostMode+0x10a>
 8002bdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002be0:	d11e      	bne.n	8002c20 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
        break;
 8002bf2:	e016      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
        break;
 8002bfa:	e012      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	60fb      	str	r3, [r7, #12]
        break;
 8002c02:	e00e      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	60fb      	str	r3, [r7, #12]
        break;
 8002c0a:	e00a      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	09db      	lsrs	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
        break;
 8002c12:	e006      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	60fb      	str	r3, [r7, #12]
        break;
 8002c1a:	e002      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002c1c:	bf00      	nop
 8002c1e:	e000      	b.n	8002c22 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002c20:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c22:	f7fe fcaf 	bl	8001584 <HAL_GetREVID>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d815      	bhi.n	8002c5c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce0 <ADC_ConfigureBoostMode+0x208>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d908      	bls.n	8002c4a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c46:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c48:	e03e      	b.n	8002cc8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c58:	609a      	str	r2, [r3, #8]
}
 8002c5a:	e035      	b.n	8002cc8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce4 <ADC_ConfigureBoostMode+0x20c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d808      	bhi.n	8002c7c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	e025      	b.n	8002cc8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce8 <ADC_ConfigureBoostMode+0x210>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d80a      	bhi.n	8002c9a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	e016      	b.n	8002cc8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a13      	ldr	r2, [pc, #76]	@ (8002cec <ADC_ConfigureBoostMode+0x214>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d80a      	bhi.n	8002cb8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb4:	609a      	str	r2, [r3, #8]
}
 8002cb6:	e007      	b.n	8002cc8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002cc6:	609a      	str	r2, [r3, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40022100 	.word	0x40022100
 8002cd8:	40022300 	.word	0x40022300
 8002cdc:	58026300 	.word	0x58026300
 8002ce0:	01312d00 	.word	0x01312d00
 8002ce4:	005f5e10 	.word	0x005f5e10
 8002ce8:	00bebc20 	.word	0x00bebc20
 8002cec:	017d7840 	.word	0x017d7840

08002cf0 <LL_ADC_IsEnabled>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <LL_ADC_IsEnabled+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_ADC_IsEnabled+0x1a>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d101      	bne.n	8002d2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b09f      	sub	sp, #124	@ 0x7c
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0be      	b.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d102      	bne.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d74:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	e001      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10b      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e09d      	b.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ffb9 	bl	8002d16 <LL_ADC_REG_IsConversionOngoing>
 8002da4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ffb3 	bl	8002d16 <LL_ADC_REG_IsConversionOngoing>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d17f      	bne.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002db6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d17c      	bne.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a47      	ldr	r2, [pc, #284]	@ (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a46      	ldr	r2, [pc, #280]	@ (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002dd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002dd4:	4b45      	ldr	r3, [pc, #276]	@ (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d039      	beq.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a38      	ldr	r2, [pc, #224]	@ (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10e      	bne.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e06:	4836      	ldr	r0, [pc, #216]	@ (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e08:	f7ff ff72 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4835      	ldr	r0, [pc, #212]	@ (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e10:	f7ff ff6e 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4323      	orrs	r3, r4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e008      	b.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002e24:	4832      	ldr	r0, [pc, #200]	@ (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e26:	f7ff ff63 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d047      	beq.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	6811      	ldr	r1, [r2, #0]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	6892      	ldr	r2, [r2, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e52:	e03a      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10e      	bne.n	8002e92 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002e74:	481a      	ldr	r0, [pc, #104]	@ (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e76:	f7ff ff3b 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4819      	ldr	r0, [pc, #100]	@ (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e7e:	f7ff ff37 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4323      	orrs	r3, r4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e008      	b.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e92:	4817      	ldr	r0, [pc, #92]	@ (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e94:	f7ff ff2c 	bl	8002cf0 <LL_ADC_IsEnabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002eb2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb4:	e009      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ec8:	e000      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ed4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	377c      	adds	r7, #124	@ 0x7c
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	40022100 	.word	0x40022100
 8002ee8:	40022300 	.word	0x40022300
 8002eec:	58026300 	.word	0x58026300
 8002ef0:	58026000 	.word	0x58026000
 8002ef4:	fffff0e0 	.word	0xfffff0e0

08002ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <__NVIC_SetPriorityGrouping+0x40>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <__NVIC_SetPriorityGrouping+0x40>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00
 8002f3c:	05fa0000 	.word	0x05fa0000

08002f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <__NVIC_GetPriorityGrouping+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 0307 	and.w	r3, r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db0b      	blt.n	8002f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4907      	ldr	r1, [pc, #28]	@ (8002f94 <__NVIC_EnableIRQ+0x38>)
 8002f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	@ (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	@ (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	@ 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf28      	it	cs
 800300a:	2304      	movcs	r3, #4
 800300c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3304      	adds	r3, #4
 8003012:	2b06      	cmp	r3, #6
 8003014:	d902      	bls.n	800301c <NVIC_EncodePriority+0x30>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3b03      	subs	r3, #3
 800301a:	e000      	b.n	800301e <NVIC_EncodePriority+0x32>
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43d9      	mvns	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	4313      	orrs	r3, r2
         );
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	@ 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff ff4c 	bl	8002ef8 <__NVIC_SetPriorityGrouping>
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003076:	f7ff ff63 	bl	8002f40 <__NVIC_GetPriorityGrouping>
 800307a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f7ff ffb3 	bl	8002fec <NVIC_EncodePriority>
 8003086:	4602      	mov	r2, r0
 8003088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ff82 	bl	8002f98 <__NVIC_SetPriority>
}
 8003094:	bf00      	nop
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff56 	bl	8002f5c <__NVIC_EnableIRQ>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80030bc:	f3bf 8f5f 	dmb	sy
}
 80030c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80030c2:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_MPU_Disable+0x28>)
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	4a06      	ldr	r2, [pc, #24]	@ (80030e0 <HAL_MPU_Disable+0x28>)
 80030c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_MPU_Disable+0x2c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	605a      	str	r2, [r3, #4]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000ed00 	.word	0xe000ed00
 80030e4:	e000ed90 	.word	0xe000ed90

080030e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80030f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003120 <HAL_MPU_Enable+0x38>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_MPU_Enable+0x3c>)
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <HAL_MPU_Enable+0x3c>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003106:	f3bf 8f4f 	dsb	sy
}
 800310a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800310c:	f3bf 8f6f 	isb	sy
}
 8003110:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed90 	.word	0xe000ed90
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	785a      	ldrb	r2, [r3, #1]
 8003134:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <HAL_MPU_ConfigRegion+0x7c>)
 8003136:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003138:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <HAL_MPU_ConfigRegion+0x7c>)
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	4a19      	ldr	r2, [pc, #100]	@ (80031a4 <HAL_MPU_ConfigRegion+0x7c>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003144:	4a17      	ldr	r2, [pc, #92]	@ (80031a4 <HAL_MPU_ConfigRegion+0x7c>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7b1b      	ldrb	r3, [r3, #12]
 8003150:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7adb      	ldrb	r3, [r3, #11]
 8003156:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003158:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7a9b      	ldrb	r3, [r3, #10]
 800315e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003160:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7b5b      	ldrb	r3, [r3, #13]
 8003166:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003168:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7b9b      	ldrb	r3, [r3, #14]
 800316e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003170:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7bdb      	ldrb	r3, [r3, #15]
 8003176:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003178:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7a5b      	ldrb	r3, [r3, #9]
 800317e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003180:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	7a1b      	ldrb	r3, [r3, #8]
 8003186:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003188:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003190:	4a04      	ldr	r2, [pc, #16]	@ (80031a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003192:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003194:	6113      	str	r3, [r2, #16]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000ed90 	.word	0xe000ed90

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	@ 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031b6:	4b89      	ldr	r3, [pc, #548]	@ (80033dc <HAL_GPIO_Init+0x234>)
 80031b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031ba:	e194      	b.n	80034e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8186 	beq.w	80034e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d005      	beq.n	80031ec <HAL_GPIO_Init+0x44>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d130      	bne.n	800324e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003222:	2201      	movs	r2, #1
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0201 	and.w	r2, r3, #1
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b03      	cmp	r3, #3
 8003258:	d017      	beq.n	800328a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	2203      	movs	r2, #3
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d123      	bne.n	80032de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	69b9      	ldr	r1, [r7, #24]
 80032da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	2203      	movs	r2, #3
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0203 	and.w	r2, r3, #3
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80e0 	beq.w	80034e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003320:	4b2f      	ldr	r3, [pc, #188]	@ (80033e0 <HAL_GPIO_Init+0x238>)
 8003322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003326:	4a2e      	ldr	r2, [pc, #184]	@ (80033e0 <HAL_GPIO_Init+0x238>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003330:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_GPIO_Init+0x238>)
 8003332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333e:	4a29      	ldr	r2, [pc, #164]	@ (80033e4 <HAL_GPIO_Init+0x23c>)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a20      	ldr	r2, [pc, #128]	@ (80033e8 <HAL_GPIO_Init+0x240>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d052      	beq.n	8003410 <HAL_GPIO_Init+0x268>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ec <HAL_GPIO_Init+0x244>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d031      	beq.n	80033d6 <HAL_GPIO_Init+0x22e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <HAL_GPIO_Init+0x248>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02b      	beq.n	80033d2 <HAL_GPIO_Init+0x22a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <HAL_GPIO_Init+0x24c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d025      	beq.n	80033ce <HAL_GPIO_Init+0x226>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1c      	ldr	r2, [pc, #112]	@ (80033f8 <HAL_GPIO_Init+0x250>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01f      	beq.n	80033ca <HAL_GPIO_Init+0x222>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1b      	ldr	r2, [pc, #108]	@ (80033fc <HAL_GPIO_Init+0x254>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d019      	beq.n	80033c6 <HAL_GPIO_Init+0x21e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1a      	ldr	r2, [pc, #104]	@ (8003400 <HAL_GPIO_Init+0x258>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0x21a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <HAL_GPIO_Init+0x25c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00d      	beq.n	80033be <HAL_GPIO_Init+0x216>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a18      	ldr	r2, [pc, #96]	@ (8003408 <HAL_GPIO_Init+0x260>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <HAL_GPIO_Init+0x212>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a17      	ldr	r2, [pc, #92]	@ (800340c <HAL_GPIO_Init+0x264>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_GPIO_Init+0x20e>
 80033b2:	2309      	movs	r3, #9
 80033b4:	e02d      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033b6:	230a      	movs	r3, #10
 80033b8:	e02b      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033ba:	2308      	movs	r3, #8
 80033bc:	e029      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033be:	2307      	movs	r3, #7
 80033c0:	e027      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033c2:	2306      	movs	r3, #6
 80033c4:	e025      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033c6:	2305      	movs	r3, #5
 80033c8:	e023      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033ca:	2304      	movs	r3, #4
 80033cc:	e021      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033ce:	2303      	movs	r3, #3
 80033d0:	e01f      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e01d      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e01b      	b.n	8003412 <HAL_GPIO_Init+0x26a>
 80033da:	bf00      	nop
 80033dc:	58000080 	.word	0x58000080
 80033e0:	58024400 	.word	0x58024400
 80033e4:	58000400 	.word	0x58000400
 80033e8:	58020000 	.word	0x58020000
 80033ec:	58020400 	.word	0x58020400
 80033f0:	58020800 	.word	0x58020800
 80033f4:	58020c00 	.word	0x58020c00
 80033f8:	58021000 	.word	0x58021000
 80033fc:	58021400 	.word	0x58021400
 8003400:	58021800 	.word	0x58021800
 8003404:	58021c00 	.word	0x58021c00
 8003408:	58022000 	.word	0x58022000
 800340c:	58022400 	.word	0x58022400
 8003410:	2300      	movs	r3, #0
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	f002 0203 	and.w	r2, r2, #3
 8003418:	0092      	lsls	r2, r2, #2
 800341a:	4093      	lsls	r3, r2
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003422:	4938      	ldr	r1, [pc, #224]	@ (8003504 <HAL_GPIO_Init+0x35c>)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	3302      	adds	r3, #2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003456:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800345e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003484:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	3301      	adds	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f ae63 	bne.w	80031bc <HAL_GPIO_Init+0x14>
  }
}
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	3724      	adds	r7, #36	@ 0x24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	58000400 	.word	0x58000400

08003508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003524:	e003      	b.n	800352e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	041a      	lsls	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	619a      	str	r2, [r3, #24]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003544:	4b19      	ldr	r3, [pc, #100]	@ (80035ac <HAL_PWREx_ConfigSupply+0x70>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d00a      	beq.n	8003566 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003550:	4b16      	ldr	r3, [pc, #88]	@ (80035ac <HAL_PWREx_ConfigSupply+0x70>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d001      	beq.n	8003562 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e01f      	b.n	80035a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e01d      	b.n	80035a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003566:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_PWREx_ConfigSupply+0x70>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	490f      	ldr	r1, [pc, #60]	@ (80035ac <HAL_PWREx_ConfigSupply+0x70>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4313      	orrs	r3, r2
 8003574:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003576:	f7fd fff9 	bl	800156c <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800357c:	e009      	b.n	8003592 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800357e:	f7fd fff5 	bl	800156c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800358c:	d901      	bls.n	8003592 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e007      	b.n	80035a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_PWREx_ConfigSupply+0x70>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800359a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800359e:	d1ee      	bne.n	800357e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	58024800 	.word	0x58024800

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	@ 0x30
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f000 bc48 	b.w	8003e54 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8088 	beq.w	80036e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d2:	4b99      	ldr	r3, [pc, #612]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035dc:	4b96      	ldr	r3, [pc, #600]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d007      	beq.n	80035f8 <HAL_RCC_OscConfig+0x48>
 80035e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ea:	2b18      	cmp	r3, #24
 80035ec:	d111      	bne.n	8003612 <HAL_RCC_OscConfig+0x62>
 80035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d10c      	bne.n	8003612 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d06d      	beq.n	80036e0 <HAL_RCC_OscConfig+0x130>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d169      	bne.n	80036e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f000 bc21 	b.w	8003e54 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x7a>
 800361c:	4b86      	ldr	r3, [pc, #536]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a85      	ldr	r2, [pc, #532]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	e02e      	b.n	8003688 <HAL_RCC_OscConfig+0xd8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x9c>
 8003632:	4b81      	ldr	r3, [pc, #516]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a80      	ldr	r2, [pc, #512]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b7e      	ldr	r3, [pc, #504]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a7d      	ldr	r2, [pc, #500]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003644:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0xd8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0xc0>
 8003656:	4b78      	ldr	r3, [pc, #480]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a77      	ldr	r2, [pc, #476]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b75      	ldr	r3, [pc, #468]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a74      	ldr	r2, [pc, #464]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0xd8>
 8003670:	4b71      	ldr	r3, [pc, #452]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a70      	ldr	r2, [pc, #448]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b6e      	ldr	r3, [pc, #440]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6d      	ldr	r2, [pc, #436]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd ff6c 	bl	800156c <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fd ff68 	bl	800156c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	@ 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e3d4      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036aa:	4b63      	ldr	r3, [pc, #396]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0xe8>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fd ff58 	bl	800156c <HAL_GetTick>
 80036bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fd ff54 	bl	800156c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	@ 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e3c0      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036d2:	4b59      	ldr	r3, [pc, #356]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x110>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80ca 	beq.w	8003884 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f0:	4b51      	ldr	r3, [pc, #324]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_RCC_OscConfig+0x166>
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	2b18      	cmp	r3, #24
 800370a:	d156      	bne.n	80037ba <HAL_RCC_OscConfig+0x20a>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d151      	bne.n	80037ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003716:	4b48      	ldr	r3, [pc, #288]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <HAL_RCC_OscConfig+0x17e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e392      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800372e:	4b42      	ldr	r3, [pc, #264]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 0219 	bic.w	r2, r3, #25
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	493f      	ldr	r1, [pc, #252]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd ff14 	bl	800156c <HAL_GetTick>
 8003744:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003748:	f7fd ff10 	bl	800156c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e37c      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800375a:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	f7fd ff0d 	bl	8001584 <HAL_GetREVID>
 800376a:	4603      	mov	r3, r0
 800376c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003770:	4293      	cmp	r3, r2
 8003772:	d817      	bhi.n	80037a4 <HAL_RCC_OscConfig+0x1f4>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b40      	cmp	r3, #64	@ 0x40
 800377a:	d108      	bne.n	800378e <HAL_RCC_OscConfig+0x1de>
 800377c:	4b2e      	ldr	r3, [pc, #184]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003784:	4a2c      	ldr	r2, [pc, #176]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378c:	e07a      	b.n	8003884 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b2a      	ldr	r3, [pc, #168]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	031b      	lsls	r3, r3, #12
 800379c:	4926      	ldr	r1, [pc, #152]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a2:	e06f      	b.n	8003884 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	061b      	lsls	r3, r3, #24
 80037b2:	4921      	ldr	r1, [pc, #132]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b8:	e064      	b.n	8003884 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d047      	beq.n	8003852 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0219 	bic.w	r2, r3, #25
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	491a      	ldr	r1, [pc, #104]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd feca 	bl	800156c <HAL_GetTick>
 80037d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037dc:	f7fd fec6 	bl	800156c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e332      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ee:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	f7fd fec3 	bl	8001584 <HAL_GetREVID>
 80037fe:	4603      	mov	r3, r0
 8003800:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003804:	4293      	cmp	r3, r2
 8003806:	d819      	bhi.n	800383c <HAL_RCC_OscConfig+0x28c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b40      	cmp	r3, #64	@ 0x40
 800380e:	d108      	bne.n	8003822 <HAL_RCC_OscConfig+0x272>
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003818:	4a07      	ldr	r2, [pc, #28]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	6053      	str	r3, [r2, #4]
 8003820:	e030      	b.n	8003884 <HAL_RCC_OscConfig+0x2d4>
 8003822:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	031b      	lsls	r3, r3, #12
 8003830:	4901      	ldr	r1, [pc, #4]	@ (8003838 <HAL_RCC_OscConfig+0x288>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
 8003836:	e025      	b.n	8003884 <HAL_RCC_OscConfig+0x2d4>
 8003838:	58024400 	.word	0x58024400
 800383c:	4b9a      	ldr	r3, [pc, #616]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	4997      	ldr	r1, [pc, #604]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
 8003850:	e018      	b.n	8003884 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003852:	4b95      	ldr	r3, [pc, #596]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a94      	ldr	r2, [pc, #592]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fd fe85 	bl	800156c <HAL_GetTick>
 8003862:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003866:	f7fd fe81 	bl	800156c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e2ed      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003878:	4b8b      	ldr	r3, [pc, #556]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a9 	beq.w	80039e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003892:	4b85      	ldr	r3, [pc, #532]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800389a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800389c:	4b82      	ldr	r3, [pc, #520]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d007      	beq.n	80038b8 <HAL_RCC_OscConfig+0x308>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b18      	cmp	r3, #24
 80038ac:	d13a      	bne.n	8003924 <HAL_RCC_OscConfig+0x374>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d135      	bne.n	8003924 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038b8:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x320>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b80      	cmp	r3, #128	@ 0x80
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e2c1      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038d0:	f7fd fe58 	bl	8001584 <HAL_GetREVID>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038da:	4293      	cmp	r3, r2
 80038dc:	d817      	bhi.n	800390e <HAL_RCC_OscConfig+0x35e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d108      	bne.n	80038f8 <HAL_RCC_OscConfig+0x348>
 80038e6:	4b70      	ldr	r3, [pc, #448]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80038ee:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038f6:	e075      	b.n	80039e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f8:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	069b      	lsls	r3, r3, #26
 8003906:	4968      	ldr	r1, [pc, #416]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800390c:	e06a      	b.n	80039e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800390e:	4b66      	ldr	r3, [pc, #408]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	061b      	lsls	r3, r3, #24
 800391c:	4962      	ldr	r1, [pc, #392]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 800391e:	4313      	orrs	r3, r2
 8003920:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003922:	e05f      	b.n	80039e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d042      	beq.n	80039b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800392c:	4b5e      	ldr	r3, [pc, #376]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5d      	ldr	r2, [pc, #372]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd fe18 	bl	800156c <HAL_GetTick>
 800393c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003940:	f7fd fe14 	bl	800156c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e280      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003952:	4b55      	ldr	r3, [pc, #340]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800395e:	f7fd fe11 	bl	8001584 <HAL_GetREVID>
 8003962:	4603      	mov	r3, r0
 8003964:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003968:	4293      	cmp	r3, r2
 800396a:	d817      	bhi.n	800399c <HAL_RCC_OscConfig+0x3ec>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	2b20      	cmp	r3, #32
 8003972:	d108      	bne.n	8003986 <HAL_RCC_OscConfig+0x3d6>
 8003974:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800397c:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 800397e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003982:	6053      	str	r3, [r2, #4]
 8003984:	e02e      	b.n	80039e4 <HAL_RCC_OscConfig+0x434>
 8003986:	4b48      	ldr	r3, [pc, #288]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	069b      	lsls	r3, r3, #26
 8003994:	4944      	ldr	r1, [pc, #272]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
 800399a:	e023      	b.n	80039e4 <HAL_RCC_OscConfig+0x434>
 800399c:	4b42      	ldr	r3, [pc, #264]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	493f      	ldr	r1, [pc, #252]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
 80039b0:	e018      	b.n	80039e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039b2:	4b3d      	ldr	r3, [pc, #244]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a3c      	ldr	r2, [pc, #240]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80039b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd fdd5 	bl	800156c <HAL_GetTick>
 80039c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039c6:	f7fd fdd1 	bl	800156c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e23d      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039d8:	4b33      	ldr	r3, [pc, #204]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d036      	beq.n	8003a5e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d019      	beq.n	8003a2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f8:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80039fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fc:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fd fdb2 	bl	800156c <HAL_GetTick>
 8003a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fd fdae 	bl	800156c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e21a      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a1e:	4b22      	ldr	r3, [pc, #136]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x45c>
 8003a2a:	e018      	b.n	8003a5e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a30:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd fd98 	bl	800156c <HAL_GetTick>
 8003a3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd fd94 	bl	800156c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e200      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a52:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d039      	beq.n	8003ade <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01c      	beq.n	8003aac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003a78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a7e:	f7fd fd75 	bl	800156c <HAL_GetTick>
 8003a82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a86:	f7fd fd71 	bl	800156c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e1dd      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a98:	4b03      	ldr	r3, [pc, #12]	@ (8003aa8 <HAL_RCC_OscConfig+0x4f8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x4d6>
 8003aa4:	e01b      	b.n	8003ade <HAL_RCC_OscConfig+0x52e>
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aac:	4b9b      	ldr	r3, [pc, #620]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a9a      	ldr	r2, [pc, #616]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fd58 	bl	800156c <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ac0:	f7fd fd54 	bl	800156c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1c0      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ad2:	4b92      	ldr	r3, [pc, #584]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8081 	beq.w	8003bee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003aec:	4b8c      	ldr	r3, [pc, #560]	@ (8003d20 <HAL_RCC_OscConfig+0x770>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a8b      	ldr	r2, [pc, #556]	@ (8003d20 <HAL_RCC_OscConfig+0x770>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af8:	f7fd fd38 	bl	800156c <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b00:	f7fd fd34 	bl	800156c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	@ 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e1a0      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b12:	4b83      	ldr	r3, [pc, #524]	@ (8003d20 <HAL_RCC_OscConfig+0x770>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d106      	bne.n	8003b34 <HAL_RCC_OscConfig+0x584>
 8003b26:	4b7d      	ldr	r3, [pc, #500]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	e02d      	b.n	8003b90 <HAL_RCC_OscConfig+0x5e0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10c      	bne.n	8003b56 <HAL_RCC_OscConfig+0x5a6>
 8003b3c:	4b77      	ldr	r3, [pc, #476]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	4a76      	ldr	r2, [pc, #472]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b48:	4b74      	ldr	r3, [pc, #464]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	4a73      	ldr	r2, [pc, #460]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b4e:	f023 0304 	bic.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b54:	e01c      	b.n	8003b90 <HAL_RCC_OscConfig+0x5e0>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c8>
 8003b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	4a6e      	ldr	r2, [pc, #440]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b64:	f043 0304 	orr.w	r3, r3, #4
 8003b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b76:	e00b      	b.n	8003b90 <HAL_RCC_OscConfig+0x5e0>
 8003b78:	4b68      	ldr	r3, [pc, #416]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7c:	4a67      	ldr	r2, [pc, #412]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b84:	4b65      	ldr	r3, [pc, #404]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b88:	4a64      	ldr	r2, [pc, #400]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003b8a:	f023 0304 	bic.w	r3, r3, #4
 8003b8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d015      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd fce8 	bl	800156c <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fce4 	bl	800156c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e14e      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb6:	4b59      	ldr	r3, [pc, #356]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0ee      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x5f0>
 8003bc2:	e014      	b.n	8003bee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd fcd2 	bl	800156c <HAL_GetTick>
 8003bc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bcc:	f7fd fcce 	bl	800156c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e138      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003be2:	4b4e      	ldr	r3, [pc, #312]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ee      	bne.n	8003bcc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 812d 	beq.w	8003e52 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003bf8:	4b48      	ldr	r3, [pc, #288]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c00:	2b18      	cmp	r3, #24
 8003c02:	f000 80bd 	beq.w	8003d80 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	f040 809e 	bne.w	8003d4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c10:	4b42      	ldr	r3, [pc, #264]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a41      	ldr	r2, [pc, #260]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fca6 	bl	800156c <HAL_GetTick>
 8003c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fd fca2 	bl	800156c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e10e      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c36:	4b39      	ldr	r3, [pc, #228]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c42:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003c44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c46:	4b37      	ldr	r3, [pc, #220]	@ (8003d24 <HAL_RCC_OscConfig+0x774>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c52:	0112      	lsls	r2, r2, #4
 8003c54:	430a      	orrs	r2, r1
 8003c56:	4931      	ldr	r1, [pc, #196]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	3b01      	subs	r3, #1
 8003c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	025b      	lsls	r3, r3, #9
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	3b01      	subs	r3, #1
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	3b01      	subs	r3, #1
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c8c:	4923      	ldr	r1, [pc, #140]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c92:	4b22      	ldr	r3, [pc, #136]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca2:	4b21      	ldr	r3, [pc, #132]	@ (8003d28 <HAL_RCC_OscConfig+0x778>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003caa:	00d2      	lsls	r2, r2, #3
 8003cac:	491b      	ldr	r1, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	f023 020c 	bic.w	r2, r3, #12
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	4917      	ldr	r1, [pc, #92]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cc4:	4b15      	ldr	r3, [pc, #84]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	f023 0202 	bic.w	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd0:	4912      	ldr	r1, [pc, #72]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cd6:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	4a10      	ldr	r2, [pc, #64]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cee:	4b0b      	ldr	r3, [pc, #44]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003cfa:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	4a07      	ldr	r2, [pc, #28]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a04      	ldr	r2, [pc, #16]	@ (8003d1c <HAL_RCC_OscConfig+0x76c>)
 8003d0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd fc2b 	bl	800156c <HAL_GetTick>
 8003d16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d18:	e011      	b.n	8003d3e <HAL_RCC_OscConfig+0x78e>
 8003d1a:	bf00      	nop
 8003d1c:	58024400 	.word	0x58024400
 8003d20:	58024800 	.word	0x58024800
 8003d24:	fffffc0c 	.word	0xfffffc0c
 8003d28:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fd fc1e 	bl	800156c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e08a      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x77c>
 8003d4a:	e082      	b.n	8003e52 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4c:	4b43      	ldr	r3, [pc, #268]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a42      	ldr	r2, [pc, #264]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fd fc08 	bl	800156c <HAL_GetTick>
 8003d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd fc04 	bl	800156c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e070      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d72:	4b3a      	ldr	r3, [pc, #232]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x7b0>
 8003d7e:	e068      	b.n	8003e52 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d80:	4b36      	ldr	r3, [pc, #216]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d86:	4b35      	ldr	r3, [pc, #212]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d031      	beq.n	8003df8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0203 	and.w	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d12a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d122      	bne.n	8003df8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d11a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	0a5b      	lsrs	r3, r3, #9
 8003dc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d111      	bne.n	8003df8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	0c1b      	lsrs	r3, r3, #16
 8003dd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d108      	bne.n	8003df8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	0e1b      	lsrs	r3, r3, #24
 8003dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e02b      	b.n	8003e54 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003dfc:	4b17      	ldr	r3, [pc, #92]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d01f      	beq.n	8003e52 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	4a11      	ldr	r2, [pc, #68]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e1e:	f7fd fba5 	bl	800156c <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e24:	bf00      	nop
 8003e26:	f7fd fba1 	bl	800156c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d0f9      	beq.n	8003e26 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e32:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_RCC_OscConfig+0x8b0>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e3e:	00d2      	lsls	r2, r2, #3
 8003e40:	4906      	ldr	r1, [pc, #24]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e46:	4b05      	ldr	r3, [pc, #20]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	4a04      	ldr	r2, [pc, #16]	@ (8003e5c <HAL_RCC_OscConfig+0x8ac>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3730      	adds	r7, #48	@ 0x30
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	58024400 	.word	0x58024400
 8003e60:	ffff0007 	.word	0xffff0007

08003e64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e19c      	b.n	80041b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e78:	4b8a      	ldr	r3, [pc, #552]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d910      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b87      	ldr	r3, [pc, #540]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 020f 	bic.w	r2, r3, #15
 8003e8e:	4985      	ldr	r1, [pc, #532]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b83      	ldr	r3, [pc, #524]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e184      	b.n	80041b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d908      	bls.n	8003ed6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ec4:	4b78      	ldr	r3, [pc, #480]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	4975      	ldr	r1, [pc, #468]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d010      	beq.n	8003f04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	4b70      	ldr	r3, [pc, #448]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d908      	bls.n	8003f04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	496a      	ldr	r1, [pc, #424]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d010      	beq.n	8003f32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	4b64      	ldr	r3, [pc, #400]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d908      	bls.n	8003f32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f20:	4b61      	ldr	r3, [pc, #388]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	495e      	ldr	r1, [pc, #376]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d010      	beq.n	8003f60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	4b59      	ldr	r3, [pc, #356]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d908      	bls.n	8003f60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f4e:	4b56      	ldr	r3, [pc, #344]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	4953      	ldr	r1, [pc, #332]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d010      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4b4d      	ldr	r3, [pc, #308]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d908      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f023 020f 	bic.w	r2, r3, #15
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4947      	ldr	r1, [pc, #284]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d055      	beq.n	8004046 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f9a:	4b43      	ldr	r3, [pc, #268]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	4940      	ldr	r1, [pc, #256]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d121      	bne.n	8004004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0f6      	b.n	80041b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fcc:	4b36      	ldr	r3, [pc, #216]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d115      	bne.n	8004004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0ea      	b.n	80041b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fe4:	4b30      	ldr	r3, [pc, #192]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0de      	b.n	80041b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0d6      	b.n	80041b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004004:	4b28      	ldr	r3, [pc, #160]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f023 0207 	bic.w	r2, r3, #7
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4925      	ldr	r1, [pc, #148]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004012:	4313      	orrs	r3, r2
 8004014:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004016:	f7fd faa9 	bl	800156c <HAL_GetTick>
 800401a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401c:	e00a      	b.n	8004034 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401e:	f7fd faa5 	bl	800156c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0be      	b.n	80041b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004034:	4b1c      	ldr	r3, [pc, #112]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	429a      	cmp	r2, r3
 8004044:	d1eb      	bne.n	800401e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	429a      	cmp	r2, r3
 8004060:	d208      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004062:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f023 020f 	bic.w	r2, r3, #15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	490e      	ldr	r1, [pc, #56]	@ (80040a8 <HAL_RCC_ClockConfig+0x244>)
 8004070:	4313      	orrs	r3, r2
 8004072:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004074:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d214      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b08      	ldr	r3, [pc, #32]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020f 	bic.w	r2, r3, #15
 800408a:	4906      	ldr	r1, [pc, #24]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <HAL_RCC_ClockConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e086      	b.n	80041b2 <HAL_RCC_ClockConfig+0x34e>
 80040a4:	52002000 	.word	0x52002000
 80040a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	4b3f      	ldr	r3, [pc, #252]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d208      	bcs.n	80040da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040c8:	4b3c      	ldr	r3, [pc, #240]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	4939      	ldr	r1, [pc, #228]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d010      	beq.n	8004108 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	4b34      	ldr	r3, [pc, #208]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d208      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040f6:	4b31      	ldr	r3, [pc, #196]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	492e      	ldr	r1, [pc, #184]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 8004104:	4313      	orrs	r3, r2
 8004106:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	d010      	beq.n	8004136 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	4b28      	ldr	r3, [pc, #160]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004120:	429a      	cmp	r2, r3
 8004122:	d208      	bcs.n	8004136 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004124:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	4922      	ldr	r1, [pc, #136]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 8004132:	4313      	orrs	r3, r2
 8004134:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d010      	beq.n	8004164 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800414e:	429a      	cmp	r2, r3
 8004150:	d208      	bcs.n	8004164 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004152:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4917      	ldr	r1, [pc, #92]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 8004160:	4313      	orrs	r3, r2
 8004162:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004164:	f000 f834 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	4912      	ldr	r1, [pc, #72]	@ (80041c0 <HAL_RCC_ClockConfig+0x35c>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004182:	4b0e      	ldr	r3, [pc, #56]	@ (80041bc <HAL_RCC_ClockConfig+0x358>)
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	4a0d      	ldr	r2, [pc, #52]	@ (80041c0 <HAL_RCC_ClockConfig+0x35c>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
 8004198:	4a0a      	ldr	r2, [pc, #40]	@ (80041c4 <HAL_RCC_ClockConfig+0x360>)
 800419a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800419c:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <HAL_RCC_ClockConfig+0x364>)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <HAL_RCC_ClockConfig+0x368>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd f824 	bl	80011f4 <HAL_InitTick>
 80041ac:	4603      	mov	r3, r0
 80041ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	58024400 	.word	0x58024400
 80041c0:	0800a724 	.word	0x0800a724
 80041c4:	2400000c 	.word	0x2400000c
 80041c8:	24000008 	.word	0x24000008
 80041cc:	24000010 	.word	0x24000010

080041d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	@ 0x24
 80041d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d6:	4bb3      	ldr	r3, [pc, #716]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041de:	2b18      	cmp	r3, #24
 80041e0:	f200 8155 	bhi.w	800448e <HAL_RCC_GetSysClockFreq+0x2be>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004251 	.word	0x08004251
 80041f0:	0800448f 	.word	0x0800448f
 80041f4:	0800448f 	.word	0x0800448f
 80041f8:	0800448f 	.word	0x0800448f
 80041fc:	0800448f 	.word	0x0800448f
 8004200:	0800448f 	.word	0x0800448f
 8004204:	0800448f 	.word	0x0800448f
 8004208:	0800448f 	.word	0x0800448f
 800420c:	08004277 	.word	0x08004277
 8004210:	0800448f 	.word	0x0800448f
 8004214:	0800448f 	.word	0x0800448f
 8004218:	0800448f 	.word	0x0800448f
 800421c:	0800448f 	.word	0x0800448f
 8004220:	0800448f 	.word	0x0800448f
 8004224:	0800448f 	.word	0x0800448f
 8004228:	0800448f 	.word	0x0800448f
 800422c:	0800427d 	.word	0x0800427d
 8004230:	0800448f 	.word	0x0800448f
 8004234:	0800448f 	.word	0x0800448f
 8004238:	0800448f 	.word	0x0800448f
 800423c:	0800448f 	.word	0x0800448f
 8004240:	0800448f 	.word	0x0800448f
 8004244:	0800448f 	.word	0x0800448f
 8004248:	0800448f 	.word	0x0800448f
 800424c:	08004283 	.word	0x08004283
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004250:	4b94      	ldr	r3, [pc, #592]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d009      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800425c:	4b91      	ldr	r3, [pc, #580]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	4a90      	ldr	r2, [pc, #576]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800426e:	e111      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004270:	4b8d      	ldr	r3, [pc, #564]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004272:	61bb      	str	r3, [r7, #24]
      break;
 8004274:	e10e      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004276:	4b8d      	ldr	r3, [pc, #564]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004278:	61bb      	str	r3, [r7, #24]
      break;
 800427a:	e10b      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800427c:	4b8c      	ldr	r3, [pc, #560]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800427e:	61bb      	str	r3, [r7, #24]
      break;
 8004280:	e108      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004282:	4b88      	ldr	r3, [pc, #544]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800428c:	4b85      	ldr	r3, [pc, #532]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004296:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004298:	4b82      	ldr	r3, [pc, #520]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042a2:	4b80      	ldr	r3, [pc, #512]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a6:	08db      	lsrs	r3, r3, #3
 80042a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80e1 	beq.w	8004488 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	f000 8083 	beq.w	80043d4 <HAL_RCC_GetSysClockFreq+0x204>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	f200 80a1 	bhi.w	8004418 <HAL_RCC_GetSysClockFreq+0x248>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x114>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d056      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042e2:	e099      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e4:	4b6f      	ldr	r3, [pc, #444]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02d      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042f0:	4b6c      	ldr	r3, [pc, #432]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	08db      	lsrs	r3, r3, #3
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	4a6b      	ldr	r2, [pc, #428]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b62      	ldr	r3, [pc, #392]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a02 	vldr	s12, [r7, #8]
 800432e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80044b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800434a:	e087      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80044b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b51      	ldr	r3, [pc, #324]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004372:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80044b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800438e:	e065      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80044bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b40      	ldr	r3, [pc, #256]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80044b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043d2:	e043      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80044c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b2f      	ldr	r3, [pc, #188]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80044b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004416:	e021      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b1e      	ldr	r3, [pc, #120]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a02 	vldr	s12, [r7, #8]
 800443e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80044b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800445a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800445c:	4b11      	ldr	r3, [pc, #68]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	0a5b      	lsrs	r3, r3, #9
 8004462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004466:	3301      	adds	r3, #1
 8004468:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	ee07 3a90 	vmov	s15, r3
 8004470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004474:	edd7 6a07 	vldr	s13, [r7, #28]
 8004478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004480:	ee17 3a90 	vmov	r3, s15
 8004484:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004486:	e005      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
      break;
 800448c:	e002      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800448e:	4b07      	ldr	r3, [pc, #28]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004490:	61bb      	str	r3, [r7, #24]
      break;
 8004492:	bf00      	nop
  }

  return sysclockfreq;
 8004494:	69bb      	ldr	r3, [r7, #24]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3724      	adds	r7, #36	@ 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	58024400 	.word	0x58024400
 80044a8:	03d09000 	.word	0x03d09000
 80044ac:	003d0900 	.word	0x003d0900
 80044b0:	017d7840 	.word	0x017d7840
 80044b4:	46000000 	.word	0x46000000
 80044b8:	4c742400 	.word	0x4c742400
 80044bc:	4a742400 	.word	0x4a742400
 80044c0:	4bbebc20 	.word	0x4bbebc20

080044c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044ca:	f7ff fe81 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 80044ce:	4602      	mov	r2, r0
 80044d0:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <HAL_RCC_GetHCLKFreq+0x50>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	490f      	ldr	r1, [pc, #60]	@ (8004518 <HAL_RCC_GetHCLKFreq+0x54>)
 80044dc:	5ccb      	ldrb	r3, [r1, r3]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <HAL_RCC_GetHCLKFreq+0x50>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	4a09      	ldr	r2, [pc, #36]	@ (8004518 <HAL_RCC_GetHCLKFreq+0x54>)
 80044f2:	5cd3      	ldrb	r3, [r2, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	4a07      	ldr	r2, [pc, #28]	@ (800451c <HAL_RCC_GetHCLKFreq+0x58>)
 8004500:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004502:	4a07      	ldr	r2, [pc, #28]	@ (8004520 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004508:	4b04      	ldr	r3, [pc, #16]	@ (800451c <HAL_RCC_GetHCLKFreq+0x58>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	58024400 	.word	0x58024400
 8004518:	0800a724 	.word	0x0800a724
 800451c:	2400000c 	.word	0x2400000c
 8004520:	24000008 	.word	0x24000008

08004524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004528:	f7ff ffcc 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4904      	ldr	r1, [pc, #16]	@ (800454c <HAL_RCC_GetPCLK1Freq+0x28>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	58024400 	.word	0x58024400
 800454c:	0800a724 	.word	0x0800a724

08004550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004554:	f7ff ffb6 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4904      	ldr	r1, [pc, #16]	@ (8004578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	58024400 	.word	0x58024400
 8004578:	0800a724 	.word	0x0800a724

0800457c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	223f      	movs	r2, #63	@ 0x3f
 800458a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800458c:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <HAL_RCC_GetClockConfig+0x7c>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0207 	and.w	r2, r3, #7
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004598:	4b17      	ldr	r3, [pc, #92]	@ (80045f8 <HAL_RCC_GetClockConfig+0x7c>)
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80045a4:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <HAL_RCC_GetClockConfig+0x7c>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 020f 	and.w	r2, r3, #15
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80045b0:	4b11      	ldr	r3, [pc, #68]	@ (80045f8 <HAL_RCC_GetClockConfig+0x7c>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80045bc:	4b0e      	ldr	r3, [pc, #56]	@ (80045f8 <HAL_RCC_GetClockConfig+0x7c>)
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80045c8:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <HAL_RCC_GetClockConfig+0x7c>)
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80045d4:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <HAL_RCC_GetClockConfig+0x7c>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <HAL_RCC_GetClockConfig+0x80>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 020f 	and.w	r2, r3, #15
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	601a      	str	r2, [r3, #0]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	58024400 	.word	0x58024400
 80045fc:	52002000 	.word	0x52002000

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b0ca      	sub	sp, #296	@ 0x128
 8004606:	af00      	add	r7, sp, #0
 8004608:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800460c:	2300      	movs	r3, #0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004612:	2300      	movs	r3, #0
 8004614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004624:	2500      	movs	r5, #0
 8004626:	ea54 0305 	orrs.w	r3, r4, r5
 800462a:	d049      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004632:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004636:	d02f      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004638:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800463c:	d828      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800463e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004642:	d01a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004644:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004648:	d822      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004652:	d007      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004654:	e01c      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004656:	4bb8      	ldr	r3, [pc, #736]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	4ab7      	ldr	r2, [pc, #732]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800465c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004662:	e01a      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	3308      	adds	r3, #8
 800466a:	2102      	movs	r1, #2
 800466c:	4618      	mov	r0, r3
 800466e:	f002 fb61 	bl	8006d34 <RCCEx_PLL2_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004678:	e00f      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	3328      	adds	r3, #40	@ 0x28
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f002 fc08 	bl	8006e98 <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800468e:	e004      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004696:	e000      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046a2:	4ba5      	ldr	r3, [pc, #660]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b0:	4aa1      	ldr	r2, [pc, #644]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80046cc:	f04f 0900 	mov.w	r9, #0
 80046d0:	ea58 0309 	orrs.w	r3, r8, r9
 80046d4:	d047      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d82a      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80046e0:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	080046fd 	.word	0x080046fd
 80046ec:	0800470b 	.word	0x0800470b
 80046f0:	08004721 	.word	0x08004721
 80046f4:	0800473f 	.word	0x0800473f
 80046f8:	0800473f 	.word	0x0800473f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fc:	4b8e      	ldr	r3, [pc, #568]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	4a8d      	ldr	r2, [pc, #564]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004708:	e01a      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	3308      	adds	r3, #8
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f002 fb0e 	bl	8006d34 <RCCEx_PLL2_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800471e:	e00f      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004724:	3328      	adds	r3, #40	@ 0x28
 8004726:	2100      	movs	r1, #0
 8004728:	4618      	mov	r0, r3
 800472a:	f002 fbb5 	bl	8006e98 <RCCEx_PLL3_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800473e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004748:	4b7b      	ldr	r3, [pc, #492]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800474a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474c:	f023 0107 	bic.w	r1, r3, #7
 8004750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004756:	4a78      	ldr	r2, [pc, #480]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004758:	430b      	orrs	r3, r1
 800475a:	6513      	str	r3, [r2, #80]	@ 0x50
 800475c:	e003      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004772:	f04f 0b00 	mov.w	fp, #0
 8004776:	ea5a 030b 	orrs.w	r3, sl, fp
 800477a:	d04c      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004786:	d030      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800478c:	d829      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800478e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004790:	d02d      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004792:	2bc0      	cmp	r3, #192	@ 0xc0
 8004794:	d825      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004796:	2b80      	cmp	r3, #128	@ 0x80
 8004798:	d018      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800479a:	2b80      	cmp	r3, #128	@ 0x80
 800479c:	d821      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047a2:	2b40      	cmp	r3, #64	@ 0x40
 80047a4:	d007      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047a6:	e01c      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a8:	4b63      	ldr	r3, [pc, #396]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	4a62      	ldr	r2, [pc, #392]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047b4:	e01c      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	3308      	adds	r3, #8
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f002 fab8 	bl	8006d34 <RCCEx_PLL2_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047ca:	e011      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d0:	3328      	adds	r3, #40	@ 0x28
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f002 fb5f 	bl	8006e98 <RCCEx_PLL3_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047e0:	e006      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047e8:	e002      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80047ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004806:	4a4c      	ldr	r2, [pc, #304]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004808:	430b      	orrs	r3, r1
 800480a:	6513      	str	r3, [r2, #80]	@ 0x50
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004822:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004826:	2300      	movs	r3, #0
 8004828:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800482c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004830:	460b      	mov	r3, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	d053      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800483e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004842:	d035      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004844:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004848:	d82e      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800484a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800484e:	d031      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004850:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004854:	d828      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800485a:	d01a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800485c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004860:	d822      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004866:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800486a:	d007      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800486c:	e01c      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4b32      	ldr	r3, [pc, #200]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	4a31      	ldr	r2, [pc, #196]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800487a:	e01c      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	3308      	adds	r3, #8
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f002 fa55 	bl	8006d34 <RCCEx_PLL2_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004890:	e011      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004896:	3328      	adds	r3, #40	@ 0x28
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f002 fafc 	bl	8006e98 <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048a6:	e006      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ae:	e002      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048b0:	bf00      	nop
 80048b2:	e000      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10b      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048be:	4b1e      	ldr	r3, [pc, #120]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d4:	e003      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80048ee:	2300      	movs	r3, #0
 80048f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d056      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004906:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800490a:	d038      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800490c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004910:	d831      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004912:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004916:	d034      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004918:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800491c:	d82b      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800491e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004922:	d01d      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004928:	d825      	bhi.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800492e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004934:	e01f      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004936:	bf00      	nop
 8004938:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493c:	4ba2      	ldr	r3, [pc, #648]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	4aa1      	ldr	r2, [pc, #644]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004948:	e01c      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	3308      	adds	r3, #8
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f002 f9ee 	bl	8006d34 <RCCEx_PLL2_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800495e:	e011      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004964:	3328      	adds	r3, #40	@ 0x28
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f002 fa95 	bl	8006e98 <RCCEx_PLL3_Config>
 800496e:	4603      	mov	r3, r0
 8004970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004974:	e006      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800497c:	e002      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800498c:	4b8e      	ldr	r3, [pc, #568]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004990:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004998:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800499c:	4a8a      	ldr	r2, [pc, #552]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a2:	e003      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049bc:	2300      	movs	r3, #0
 80049be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80049c6:	460b      	mov	r3, r1
 80049c8:	4313      	orrs	r3, r2
 80049ca:	d03a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d2:	2b30      	cmp	r3, #48	@ 0x30
 80049d4:	d01f      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80049d6:	2b30      	cmp	r3, #48	@ 0x30
 80049d8:	d819      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d00c      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d815      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d019      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d111      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ea:	4b77      	ldr	r3, [pc, #476]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	4a76      	ldr	r2, [pc, #472]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80049f6:	e011      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fc:	3308      	adds	r3, #8
 80049fe:	2102      	movs	r1, #2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f002 f997 	bl	8006d34 <RCCEx_PLL2_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a14:	e002      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a16:	bf00      	nop
 8004a18:	e000      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a24:	4b68      	ldr	r3, [pc, #416]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a32:	4a65      	ldr	r2, [pc, #404]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a38:	e003      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	d051      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a6c:	d035      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a72:	d82e      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a78:	d031      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a7e:	d828      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a84:	d01a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8a:	d822      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a94:	d007      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004a96:	e01c      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a98:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004aa4:	e01c      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aaa:	3308      	adds	r3, #8
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f002 f940 	bl	8006d34 <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004aba:	e011      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac0:	3328      	adds	r3, #40	@ 0x28
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f002 f9e7 	bl	8006e98 <RCCEx_PLL3_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ad8:	e002      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ae8:	4b37      	ldr	r3, [pc, #220]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af6:	4a34      	ldr	r2, [pc, #208]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004afc:	e003      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b16:	2300      	movs	r3, #0
 8004b18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d056      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b30:	d033      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b36:	d82c      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b3c:	d02f      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b42:	d826      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b48:	d02b      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b4e:	d820      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b54:	d012      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b5a:	d81a      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d022      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b64:	d115      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f002 f8e0 	bl	8006d34 <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b7a:	e015      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b80:	3328      	adds	r3, #40	@ 0x28
 8004b82:	2101      	movs	r1, #1
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 f987 	bl	8006e98 <RCCEx_PLL3_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b98:	e006      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b9a:	bf00      	nop
 8004b9c:	e004      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e002      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10d      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bb0:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bbe:	4a02      	ldr	r2, [pc, #8]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	d055      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c00:	d033      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c06:	d82c      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0c:	d02f      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c12:	d826      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c18:	d02b      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c1e:	d820      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c24:	d012      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c2a:	d81a      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d022      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c34:	d115      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f002 f878 	bl	8006d34 <RCCEx_PLL2_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c4a:	e015      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	3328      	adds	r3, #40	@ 0x28
 8004c52:	2101      	movs	r1, #1
 8004c54:	4618      	mov	r0, r3
 8004c56:	f002 f91f 	bl	8006e98 <RCCEx_PLL3_Config>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c60:	e00a      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c68:	e006      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c6a:	bf00      	nop
 8004c6c:	e004      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c6e:	bf00      	nop
 8004c70:	e002      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c80:	4ba3      	ldr	r3, [pc, #652]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c90:	4a9f      	ldr	r2, [pc, #636]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c92:	430b      	orrs	r3, r1
 8004c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c96:	e003      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	d037      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cca:	d00e      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cd0:	d816      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d018      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cda:	d111      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	4a8b      	ldr	r2, [pc, #556]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ce8:	e00f      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cee:	3308      	adds	r3, #8
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f002 f81e 	bl	8006d34 <RCCEx_PLL2_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cfe:	e004      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d06:	e000      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d12:	4b7f      	ldr	r3, [pc, #508]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d20:	4a7b      	ldr	r2, [pc, #492]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d22:	430b      	orrs	r3, r1
 8004d24:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d26:	e003      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d40:	2300      	movs	r3, #0
 8004d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	d039      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d81c      	bhi.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d9d 	.word	0x08004d9d
 8004d64:	08004d71 	.word	0x08004d71
 8004d68:	08004d7f 	.word	0x08004d7f
 8004d6c:	08004d9d 	.word	0x08004d9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4b67      	ldr	r3, [pc, #412]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	4a66      	ldr	r2, [pc, #408]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d7c:	e00f      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d82:	3308      	adds	r3, #8
 8004d84:	2102      	movs	r1, #2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 ffd4 	bl	8006d34 <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d92:	e004      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d9a:	e000      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004da6:	4b5a      	ldr	r3, [pc, #360]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004daa:	f023 0103 	bic.w	r1, r3, #3
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db4:	4a56      	ldr	r2, [pc, #344]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004db6:	430b      	orrs	r3, r1
 8004db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dba:	e003      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004dda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004dde:	460b      	mov	r3, r1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f000 809f 	beq.w	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de6:	4b4b      	ldr	r3, [pc, #300]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a4a      	ldr	r2, [pc, #296]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004df2:	f7fc fbbb 	bl	800156c <HAL_GetTick>
 8004df6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fc fbb6 	bl	800156c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b64      	cmp	r3, #100	@ 0x64
 8004e0a:	d903      	bls.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e12:	e005      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e14:	4b3f      	ldr	r3, [pc, #252]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ed      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d179      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e28:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e34:	4053      	eors	r3, r2
 8004e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d015      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e3e:	4b34      	ldr	r3, [pc, #208]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e4a:	4b31      	ldr	r3, [pc, #196]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	4a30      	ldr	r2, [pc, #192]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e56:	4b2e      	ldr	r3, [pc, #184]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e62:	4a2b      	ldr	r2, [pc, #172]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e76:	d118      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fc fb78 	bl	800156c <HAL_GetTick>
 8004e7c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e80:	e00d      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fc fb73 	bl	800156c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e8c:	1ad2      	subs	r2, r2, r3
 8004e8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d903      	bls.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004e9c:	e005      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0eb      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d129      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec2:	d10e      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ed4:	091a      	lsrs	r2, r3, #4
 8004ed6:	4b10      	ldr	r3, [pc, #64]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	4a0d      	ldr	r2, [pc, #52]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6113      	str	r3, [r2, #16]
 8004ee0:	e005      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004eec:	6113      	str	r3, [r2, #16]
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004efe:	4a04      	ldr	r2, [pc, #16]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f04:	e00e      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004f0e:	e009      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f10:	58024400 	.word	0x58024400
 8004f14:	58024800 	.word	0x58024800
 8004f18:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	f002 0301 	and.w	r3, r2, #1
 8004f30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f34:	2300      	movs	r3, #0
 8004f36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f000 8089 	beq.w	8005058 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f4c:	2b28      	cmp	r3, #40	@ 0x28
 8004f4e:	d86b      	bhi.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f50:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08005031 	.word	0x08005031
 8004f5c:	08005029 	.word	0x08005029
 8004f60:	08005029 	.word	0x08005029
 8004f64:	08005029 	.word	0x08005029
 8004f68:	08005029 	.word	0x08005029
 8004f6c:	08005029 	.word	0x08005029
 8004f70:	08005029 	.word	0x08005029
 8004f74:	08005029 	.word	0x08005029
 8004f78:	08004ffd 	.word	0x08004ffd
 8004f7c:	08005029 	.word	0x08005029
 8004f80:	08005029 	.word	0x08005029
 8004f84:	08005029 	.word	0x08005029
 8004f88:	08005029 	.word	0x08005029
 8004f8c:	08005029 	.word	0x08005029
 8004f90:	08005029 	.word	0x08005029
 8004f94:	08005029 	.word	0x08005029
 8004f98:	08005013 	.word	0x08005013
 8004f9c:	08005029 	.word	0x08005029
 8004fa0:	08005029 	.word	0x08005029
 8004fa4:	08005029 	.word	0x08005029
 8004fa8:	08005029 	.word	0x08005029
 8004fac:	08005029 	.word	0x08005029
 8004fb0:	08005029 	.word	0x08005029
 8004fb4:	08005029 	.word	0x08005029
 8004fb8:	08005031 	.word	0x08005031
 8004fbc:	08005029 	.word	0x08005029
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	08005029 	.word	0x08005029
 8004fc8:	08005029 	.word	0x08005029
 8004fcc:	08005029 	.word	0x08005029
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08005031 	.word	0x08005031
 8004fdc:	08005029 	.word	0x08005029
 8004fe0:	08005029 	.word	0x08005029
 8004fe4:	08005029 	.word	0x08005029
 8004fe8:	08005029 	.word	0x08005029
 8004fec:	08005029 	.word	0x08005029
 8004ff0:	08005029 	.word	0x08005029
 8004ff4:	08005029 	.word	0x08005029
 8004ff8:	08005031 	.word	0x08005031
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005000:	3308      	adds	r3, #8
 8005002:	2101      	movs	r1, #1
 8005004:	4618      	mov	r0, r3
 8005006:	f001 fe95 	bl	8006d34 <RCCEx_PLL2_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005010:	e00f      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005016:	3328      	adds	r3, #40	@ 0x28
 8005018:	2101      	movs	r1, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f001 ff3c 	bl	8006e98 <RCCEx_PLL3_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005026:	e004      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800502e:	e000      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800503a:	4bbf      	ldr	r3, [pc, #764]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005048:	4abb      	ldr	r2, [pc, #748]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800504a:	430b      	orrs	r3, r1
 800504c:	6553      	str	r3, [r2, #84]	@ 0x54
 800504e:	e003      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f002 0302 	and.w	r3, r2, #2
 8005064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005068:	2300      	movs	r3, #0
 800506a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800506e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005072:	460b      	mov	r3, r1
 8005074:	4313      	orrs	r3, r2
 8005076:	d041      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800507e:	2b05      	cmp	r3, #5
 8005080:	d824      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005082:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050d5 	.word	0x080050d5
 800508c:	080050a1 	.word	0x080050a1
 8005090:	080050b7 	.word	0x080050b7
 8005094:	080050d5 	.word	0x080050d5
 8005098:	080050d5 	.word	0x080050d5
 800509c:	080050d5 	.word	0x080050d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a4:	3308      	adds	r3, #8
 80050a6:	2101      	movs	r1, #1
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 fe43 	bl	8006d34 <RCCEx_PLL2_Config>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050b4:	e00f      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	3328      	adds	r3, #40	@ 0x28
 80050bc:	2101      	movs	r1, #1
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 feea 	bl	8006e98 <RCCEx_PLL3_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050ca:	e004      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050d2:	e000      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80050d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050de:	4b96      	ldr	r3, [pc, #600]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e2:	f023 0107 	bic.w	r1, r3, #7
 80050e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ec:	4a92      	ldr	r2, [pc, #584]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050ee:	430b      	orrs	r3, r1
 80050f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80050f2:	e003      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f002 0304 	and.w	r3, r2, #4
 8005108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005112:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	d044      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005124:	2b05      	cmp	r3, #5
 8005126:	d825      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005128:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	0800517d 	.word	0x0800517d
 8005134:	08005149 	.word	0x08005149
 8005138:	0800515f 	.word	0x0800515f
 800513c:	0800517d 	.word	0x0800517d
 8005140:	0800517d 	.word	0x0800517d
 8005144:	0800517d 	.word	0x0800517d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514c:	3308      	adds	r3, #8
 800514e:	2101      	movs	r1, #1
 8005150:	4618      	mov	r0, r3
 8005152:	f001 fdef 	bl	8006d34 <RCCEx_PLL2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800515c:	e00f      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005162:	3328      	adds	r3, #40	@ 0x28
 8005164:	2101      	movs	r1, #1
 8005166:	4618      	mov	r0, r3
 8005168:	f001 fe96 	bl	8006e98 <RCCEx_PLL3_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005172:	e004      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800517a:	e000      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800517c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005186:	4b6c      	ldr	r3, [pc, #432]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518a:	f023 0107 	bic.w	r1, r3, #7
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005196:	4a68      	ldr	r2, [pc, #416]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005198:	430b      	orrs	r3, r1
 800519a:	6593      	str	r3, [r2, #88]	@ 0x58
 800519c:	e003      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f002 0320 	and.w	r3, r2, #32
 80051b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051b6:	2300      	movs	r3, #0
 80051b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051c0:	460b      	mov	r3, r1
 80051c2:	4313      	orrs	r3, r2
 80051c4:	d055      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051d2:	d033      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80051d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051d8:	d82c      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051de:	d02f      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e4:	d826      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051ea:	d02b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80051ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f0:	d820      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051f6:	d012      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80051f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051fc:	d81a      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d022      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005206:	d115      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520c:	3308      	adds	r3, #8
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f001 fd8f 	bl	8006d34 <RCCEx_PLL2_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800521c:	e015      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005222:	3328      	adds	r3, #40	@ 0x28
 8005224:	2102      	movs	r1, #2
 8005226:	4618      	mov	r0, r3
 8005228:	f001 fe36 	bl	8006e98 <RCCEx_PLL3_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005232:	e00a      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800523a:	e006      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800523c:	bf00      	nop
 800523e:	e004      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005240:	bf00      	nop
 8005242:	e002      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005252:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005262:	4a35      	ldr	r2, [pc, #212]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005264:	430b      	orrs	r3, r1
 8005266:	6553      	str	r3, [r2, #84]	@ 0x54
 8005268:	e003      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800526e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800527e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005282:	2300      	movs	r3, #0
 8005284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005288:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800528c:	460b      	mov	r3, r1
 800528e:	4313      	orrs	r3, r2
 8005290:	d058      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800529a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800529e:	d033      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052a4:	d82c      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	d02f      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b0:	d826      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052b6:	d02b      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80052b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052bc:	d820      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c2:	d012      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80052c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c8:	d81a      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d022      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d2:	d115      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d8:	3308      	adds	r3, #8
 80052da:	2100      	movs	r1, #0
 80052dc:	4618      	mov	r0, r3
 80052de:	f001 fd29 	bl	8006d34 <RCCEx_PLL2_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052e8:	e015      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ee:	3328      	adds	r3, #40	@ 0x28
 80052f0:	2102      	movs	r1, #2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 fdd0 	bl	8006e98 <RCCEx_PLL3_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80052fe:	e00a      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005306:	e006      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005308:	bf00      	nop
 800530a:	e004      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10e      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800531e:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005322:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800532e:	4a02      	ldr	r2, [pc, #8]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005330:	430b      	orrs	r3, r1
 8005332:	6593      	str	r3, [r2, #88]	@ 0x58
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005336:	bf00      	nop
 8005338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800535a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d055      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800536c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005370:	d033      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005372:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005376:	d82c      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800537c:	d02f      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005382:	d826      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005384:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005388:	d02b      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800538a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800538e:	d820      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005394:	d012      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800539a:	d81a      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d022      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053a4:	d115      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053aa:	3308      	adds	r3, #8
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 fcc0 	bl	8006d34 <RCCEx_PLL2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053ba:	e015      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	3328      	adds	r3, #40	@ 0x28
 80053c2:	2102      	movs	r1, #2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fd67 	bl	8006e98 <RCCEx_PLL3_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053d0:	e00a      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053d8:	e006      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053da:	bf00      	nop
 80053dc:	e004      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80053e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10b      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005400:	4a9d      	ldr	r2, [pc, #628]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005402:	430b      	orrs	r3, r1
 8005404:	6593      	str	r3, [r2, #88]	@ 0x58
 8005406:	e003      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f002 0308 	and.w	r3, r2, #8
 800541c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005420:	2300      	movs	r3, #0
 8005422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005426:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800542a:	460b      	mov	r3, r1
 800542c:	4313      	orrs	r3, r2
 800542e:	d01e      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800543c:	d10c      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	3328      	adds	r3, #40	@ 0x28
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f001 fd26 	bl	8006e98 <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005458:	4b87      	ldr	r3, [pc, #540]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005468:	4a83      	ldr	r2, [pc, #524]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800546a:	430b      	orrs	r3, r1
 800546c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f002 0310 	and.w	r3, r2, #16
 800547a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800547e:	2300      	movs	r3, #0
 8005480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005484:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005488:	460b      	mov	r3, r1
 800548a:	4313      	orrs	r3, r2
 800548c:	d01e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005492:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800549a:	d10c      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a0:	3328      	adds	r3, #40	@ 0x28
 80054a2:	2102      	movs	r1, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fcf7 	bl	8006e98 <RCCEx_PLL3_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054b6:	4b70      	ldr	r3, [pc, #448]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054c8:	430b      	orrs	r3, r1
 80054ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054dc:	2300      	movs	r3, #0
 80054de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80054e6:	460b      	mov	r3, r1
 80054e8:	4313      	orrs	r3, r2
 80054ea:	d03e      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054f8:	d022      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80054fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054fe:	d81b      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005508:	d00b      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800550a:	e015      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005510:	3308      	adds	r3, #8
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fc0d 	bl	8006d34 <RCCEx_PLL2_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005520:	e00f      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	3328      	adds	r3, #40	@ 0x28
 8005528:	2102      	movs	r1, #2
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fcb4 	bl	8006e98 <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005536:	e004      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800554a:	4b4b      	ldr	r3, [pc, #300]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800555a:	4a47      	ldr	r2, [pc, #284]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800555c:	430b      	orrs	r3, r1
 800555e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005576:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005578:	2300      	movs	r3, #0
 800557a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800557c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005580:	460b      	mov	r3, r1
 8005582:	4313      	orrs	r3, r2
 8005584:	d03b      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005592:	d01f      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005594:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005598:	d818      	bhi.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800559e:	d003      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055a4:	d007      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055a6:	e011      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a8:	4b33      	ldr	r3, [pc, #204]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	4a32      	ldr	r2, [pc, #200]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055b4:	e00f      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ba:	3328      	adds	r3, #40	@ 0x28
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fc6a 	bl	8006e98 <RCCEx_PLL3_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80055ca:	e004      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055d2:	e000      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80055d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055de:	4b26      	ldr	r3, [pc, #152]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	4a22      	ldr	r2, [pc, #136]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80055f4:	e003      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800560a:	673b      	str	r3, [r7, #112]	@ 0x70
 800560c:	2300      	movs	r3, #0
 800560e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005610:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005614:	460b      	mov	r3, r1
 8005616:	4313      	orrs	r3, r2
 8005618:	d034      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005628:	d007      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800562a:	e011      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005638:	e00e      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	3308      	adds	r3, #8
 8005640:	2102      	movs	r1, #2
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fb76 	bl	8006d34 <RCCEx_PLL2_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800564e:	e003      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005664:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566e:	4a02      	ldr	r2, [pc, #8]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005670:	430b      	orrs	r3, r1
 8005672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005692:	2300      	movs	r3, #0
 8005694:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005696:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800569a:	460b      	mov	r3, r1
 800569c:	4313      	orrs	r3, r2
 800569e:	d00c      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	3328      	adds	r3, #40	@ 0x28
 80056a6:	2102      	movs	r1, #2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 fbf5 	bl	8006e98 <RCCEx_PLL3_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80056c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80056c8:	2300      	movs	r3, #0
 80056ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80056cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d038      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e2:	d018      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80056e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e8:	d811      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ee:	d014      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f4:	d80b      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d011      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056fe:	d106      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005700:	4bc3      	ldr	r3, [pc, #780]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	4ac2      	ldr	r2, [pc, #776]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800570a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800570c:	e008      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005714:	e004      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005728:	4bb9      	ldr	r3, [pc, #740]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005738:	4ab5      	ldr	r2, [pc, #724]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800573a:	430b      	orrs	r3, r1
 800573c:	6553      	str	r3, [r2, #84]	@ 0x54
 800573e:	e003      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005754:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005756:	2300      	movs	r3, #0
 8005758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800575a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005764:	4baa      	ldr	r3, [pc, #680]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005768:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005772:	4aa7      	ldr	r2, [pc, #668]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005784:	653b      	str	r3, [r7, #80]	@ 0x50
 8005786:	2300      	movs	r3, #0
 8005788:	657b      	str	r3, [r7, #84]	@ 0x54
 800578a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800578e:	460b      	mov	r3, r1
 8005790:	4313      	orrs	r3, r2
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005794:	4b9e      	ldr	r3, [pc, #632]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057a4:	4a9a      	ldr	r2, [pc, #616]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057a6:	430b      	orrs	r3, r1
 80057a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b8:	2300      	movs	r3, #0
 80057ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057c6:	4b92      	ldr	r3, [pc, #584]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d4:	4a8e      	ldr	r2, [pc, #568]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057d6:	430b      	orrs	r3, r1
 80057d8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80057e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80057e8:	2300      	movs	r3, #0
 80057ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80057f0:	460b      	mov	r3, r1
 80057f2:	4313      	orrs	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057f6:	4b86      	ldr	r3, [pc, #536]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4a85      	ldr	r2, [pc, #532]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005800:	6113      	str	r3, [r2, #16]
 8005802:	4b83      	ldr	r3, [pc, #524]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005804:	6919      	ldr	r1, [r3, #16]
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800580e:	4a80      	ldr	r2, [pc, #512]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005810:	430b      	orrs	r3, r1
 8005812:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005820:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005822:	2300      	movs	r3, #0
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005826:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800582a:	460b      	mov	r3, r1
 800582c:	4313      	orrs	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005830:	4b77      	ldr	r3, [pc, #476]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005834:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	4a74      	ldr	r2, [pc, #464]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005840:	430b      	orrs	r3, r1
 8005842:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005850:	633b      	str	r3, [r7, #48]	@ 0x30
 8005852:	2300      	movs	r3, #0
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
 8005856:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800585a:	460b      	mov	r3, r1
 800585c:	4313      	orrs	r3, r2
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005860:	4b6b      	ldr	r3, [pc, #428]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005864:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005870:	4a67      	ldr	r2, [pc, #412]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005872:	430b      	orrs	r3, r1
 8005874:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	2100      	movs	r1, #0
 8005880:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005888:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800588c:	460b      	mov	r3, r1
 800588e:	4313      	orrs	r3, r2
 8005890:	d011      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	3308      	adds	r3, #8
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fa4a 	bl	8006d34 <RCCEx_PLL2_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	2100      	movs	r1, #0
 80058c0:	6239      	str	r1, [r7, #32]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d011      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d6:	3308      	adds	r3, #8
 80058d8:	2101      	movs	r1, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fa2a 	bl	8006d34 <RCCEx_PLL2_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	2100      	movs	r1, #0
 8005900:	61b9      	str	r1, [r7, #24]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800590c:	460b      	mov	r3, r1
 800590e:	4313      	orrs	r3, r2
 8005910:	d011      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	3308      	adds	r3, #8
 8005918:	2102      	movs	r1, #2
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fa0a 	bl	8006d34 <RCCEx_PLL2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	2100      	movs	r1, #0
 8005940:	6139      	str	r1, [r7, #16]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800594c:	460b      	mov	r3, r1
 800594e:	4313      	orrs	r3, r2
 8005950:	d011      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	3328      	adds	r3, #40	@ 0x28
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f001 fa9c 	bl	8006e98 <RCCEx_PLL3_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	2100      	movs	r1, #0
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d011      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005996:	3328      	adds	r3, #40	@ 0x28
 8005998:	2101      	movs	r1, #1
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fa7c 	bl	8006e98 <RCCEx_PLL3_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	2100      	movs	r1, #0
 80059c0:	6039      	str	r1, [r7, #0]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d011      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	3328      	adds	r3, #40	@ 0x28
 80059d8:	2102      	movs	r1, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fa5c 	bl	8006e98 <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80059f6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e000      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a10:	58024400 	.word	0x58024400

08005a14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b090      	sub	sp, #64	@ 0x40
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a22:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005a26:	430b      	orrs	r3, r1
 8005a28:	f040 8094 	bne.w	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005a2c:	4b9e      	ldr	r3, [pc, #632]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	f200 8087 	bhi.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a59 	.word	0x08005a59
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005aa9 	.word	0x08005aa9
 8005a50:	08005b45 	.word	0x08005b45
 8005a54:	08005ad1 	.word	0x08005ad1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a58:	4b93      	ldr	r3, [pc, #588]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a64:	d108      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 f810 	bl	8006a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a74:	f000 bd45 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a7c:	f000 bd41 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a80:	4b89      	ldr	r3, [pc, #548]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8c:	d108      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a8e:	f107 0318 	add.w	r3, r7, #24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fd54 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a9c:	f000 bd31 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa4:	f000 bd2d 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005aa8:	4b7f      	ldr	r3, [pc, #508]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab4:	d108      	bne.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ab6:	f107 030c 	add.w	r3, r7, #12
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fe94 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac4:	f000 bd1d 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005acc:	f000 bd19 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ad0:	4b75      	ldr	r3, [pc, #468]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ad8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ada:	4b73      	ldr	r3, [pc, #460]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aec:	4b6e      	ldr	r3, [pc, #440]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	08db      	lsrs	r3, r3, #3
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	4a6d      	ldr	r2, [pc, #436]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005afe:	e01f      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b00:	4b69      	ldr	r3, [pc, #420]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b0c:	d106      	bne.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b14:	d102      	bne.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b16:	4b66      	ldr	r3, [pc, #408]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b1a:	e011      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b1c:	4b62      	ldr	r3, [pc, #392]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b28:	d106      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b30:	d102      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b32:	4b60      	ldr	r3, [pc, #384]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b36:	e003      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b3c:	f000 bce1 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b40:	f000 bcdf 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b44:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b48:	f000 bcdb 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b50:	f000 bcd7 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b58:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	f040 80ad 	bne.w	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005b62:	4b51      	ldr	r3, [pc, #324]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b66:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005b6a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b72:	d056      	beq.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7a:	f200 8090 	bhi.w	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b82:	f000 8088 	beq.w	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b8a:	f200 8088 	bhi.w	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	2b80      	cmp	r3, #128	@ 0x80
 8005b92:	d032      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	2b80      	cmp	r3, #128	@ 0x80
 8005b98:	f200 8081 	bhi.w	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2b40      	cmp	r3, #64	@ 0x40
 8005ba6:	d014      	beq.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005ba8:	e079      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005baa:	4b3f      	ldr	r3, [pc, #252]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb6:	d108      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 ff67 	bl	8006a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bc6:	f000 bc9c 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bce:	f000 bc98 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bd2:	4b35      	ldr	r3, [pc, #212]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bde:	d108      	bne.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005be0:	f107 0318 	add.w	r3, r7, #24
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fcab 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bee:	f000 bc88 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf6:	f000 bc84 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c06:	d108      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c08:	f107 030c 	add.w	r3, r7, #12
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fdeb 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c16:	f000 bc74 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c1e:	f000 bc70 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c22:	4b21      	ldr	r3, [pc, #132]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d10c      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	08db      	lsrs	r3, r3, #3
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c50:	e01f      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c52:	4b15      	ldr	r3, [pc, #84]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5e:	d106      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c66:	d102      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c68:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c6c:	e011      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c82:	d102      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c88:	e003      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c8e:	f000 bc38 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c92:	f000 bc36 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c96:	4b08      	ldr	r3, [pc, #32]	@ (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c9a:	f000 bc32 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca2:	f000 bc2e 	b.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ca6:	bf00      	nop
 8005ca8:	58024400 	.word	0x58024400
 8005cac:	03d09000 	.word	0x03d09000
 8005cb0:	003d0900 	.word	0x003d0900
 8005cb4:	017d7840 	.word	0x017d7840
 8005cb8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	f040 809c 	bne.w	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005cca:	4b9e      	ldr	r3, [pc, #632]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cce:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005cd2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cda:	d054      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ce2:	f200 808b 	bhi.w	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cec:	f000 8083 	beq.w	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cf6:	f200 8081 	bhi.w	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d00:	d02f      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d08:	d878      	bhi.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d16:	d012      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005d18:	e070      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d1a:	4b8a      	ldr	r3, [pc, #552]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d26:	d107      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 feaf 	bl	8006a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d36:	e3e4      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d3c:	e3e1      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d3e:	4b81      	ldr	r3, [pc, #516]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d4a:	d107      	bne.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d4c:	f107 0318 	add.w	r3, r7, #24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fbf5 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d5a:	e3d2      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d60:	e3cf      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d62:	4b78      	ldr	r3, [pc, #480]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fd37 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d7e:	e3c0      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d84:	e3bd      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d86:	4b6f      	ldr	r3, [pc, #444]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d8e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d90:	4b6c      	ldr	r3, [pc, #432]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d10c      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005da2:	4b68      	ldr	r3, [pc, #416]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	08db      	lsrs	r3, r3, #3
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	4a66      	ldr	r2, [pc, #408]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005dae:	fa22 f303 	lsr.w	r3, r2, r3
 8005db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db4:	e01e      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005db6:	4b63      	ldr	r3, [pc, #396]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc2:	d106      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dca:	d102      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005dcc:	4b5f      	ldr	r3, [pc, #380]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd0:	e010      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dde:	d106      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005de6:	d102      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005de8:	4b59      	ldr	r3, [pc, #356]	@ (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dec:	e002      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005df2:	e386      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005df4:	e385      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005df6:	4b57      	ldr	r3, [pc, #348]	@ (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dfa:	e382      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e00:	e37f      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e06:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	f040 80a7 	bne.w	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e10:	4b4c      	ldr	r3, [pc, #304]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e14:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005e18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e20:	d055      	beq.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e28:	f200 8096 	bhi.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e32:	f000 8084 	beq.w	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e3c:	f200 808c 	bhi.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e46:	d030      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e4e:	f200 8083 	bhi.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e5e:	d012      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005e60:	e07a      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e62:	4b38      	ldr	r3, [pc, #224]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fe0b 	bl	8006a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e7e:	e340      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e84:	e33d      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e86:	4b2f      	ldr	r3, [pc, #188]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e94:	f107 0318 	add.w	r3, r7, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fb51 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ea2:	e32e      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea8:	e32b      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005eaa:	4b26      	ldr	r3, [pc, #152]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb6:	d107      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eb8:	f107 030c 	add.w	r3, r7, #12
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fc93 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ec6:	e31c      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ecc:	e319      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ece:	4b1d      	ldr	r3, [pc, #116]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ed6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d10c      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eea:	4b16      	ldr	r3, [pc, #88]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	08db      	lsrs	r3, r3, #3
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	4a14      	ldr	r2, [pc, #80]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8005efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005efc:	e01e      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005efe:	4b11      	ldr	r3, [pc, #68]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f0a:	d106      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f12:	d102      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f14:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f18:	e010      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f26:	d106      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f2e:	d102      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f30:	4b07      	ldr	r3, [pc, #28]	@ (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f34:	e002      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f3a:	e2e2      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f3c:	e2e1      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f3e:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f42:	e2de      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f44:	58024400 	.word	0x58024400
 8005f48:	03d09000 	.word	0x03d09000
 8005f4c:	003d0900 	.word	0x003d0900
 8005f50:	017d7840 	.word	0x017d7840
 8005f54:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f5c:	e2d1      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f62:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005f66:	430b      	orrs	r3, r1
 8005f68:	f040 809c 	bne.w	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f6c:	4b93      	ldr	r3, [pc, #588]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f70:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005f74:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f7c:	d054      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f84:	f200 808b 	bhi.w	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f8e:	f000 8083 	beq.w	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f98:	f200 8081 	bhi.w	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fa2:	d02f      	beq.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005faa:	d878      	bhi.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d004      	beq.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb8:	d012      	beq.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005fba:	e070      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fbc:	4b7f      	ldr	r3, [pc, #508]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fc8:	d107      	bne.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fd5e 	bl	8006a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fd8:	e293      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fde:	e290      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fe0:	4b76      	ldr	r3, [pc, #472]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fec:	d107      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fee:	f107 0318 	add.w	r3, r7, #24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 faa4 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ffc:	e281      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006002:	e27e      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006004:	4b6d      	ldr	r3, [pc, #436]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800600c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006010:	d107      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006012:	f107 030c 	add.w	r3, r7, #12
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fbe6 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006020:	e26f      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006026:	e26c      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006028:	4b64      	ldr	r3, [pc, #400]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800602a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006030:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006032:	4b62      	ldr	r3, [pc, #392]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d10c      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800603e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006044:	4b5d      	ldr	r3, [pc, #372]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	08db      	lsrs	r3, r3, #3
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	4a5c      	ldr	r2, [pc, #368]	@ (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
 8006054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006056:	e01e      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006058:	4b58      	ldr	r3, [pc, #352]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006064:	d106      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800606c:	d102      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800606e:	4b55      	ldr	r3, [pc, #340]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006072:	e010      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006074:	4b51      	ldr	r3, [pc, #324]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006080:	d106      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006088:	d102      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800608a:	4b4f      	ldr	r3, [pc, #316]	@ (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800608c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800608e:	e002      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006094:	e235      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006096:	e234      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006098:	4b4c      	ldr	r3, [pc, #304]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800609c:	e231      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a2:	e22e      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060ac:	430b      	orrs	r3, r1
 80060ae:	f040 808f 	bne.w	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80060b2:	4b42      	ldr	r3, [pc, #264]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80060ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80060bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c2:	d06b      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060ca:	d874      	bhi.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060d2:	d056      	beq.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060da:	d86c      	bhi.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060e2:	d03b      	beq.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060ea:	d864      	bhi.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060f2:	d021      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80060f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060fa:	d85c      	bhi.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80060fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006108:	d004      	beq.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800610a:	e054      	b.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800610c:	f7fe fa0a 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 8006110:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006112:	e1f6      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006114:	4b29      	ldr	r3, [pc, #164]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800611c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006120:	d107      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006122:	f107 0318 	add.w	r3, r7, #24
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fa0a 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006130:	e1e7      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006136:	e1e4      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006138:	4b20      	ldr	r3, [pc, #128]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006144:	d107      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006146:	f107 030c 	add.w	r3, r7, #12
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fb4c 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006154:	e1d5      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800615a:	e1d2      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800615c:	4b17      	ldr	r3, [pc, #92]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b04      	cmp	r3, #4
 8006166:	d109      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	08db      	lsrs	r3, r3, #3
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	4a13      	ldr	r2, [pc, #76]	@ (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
 8006178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800617a:	e1c2      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006180:	e1bf      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006182:	4b0e      	ldr	r3, [pc, #56]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800618e:	d102      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006190:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006194:	e1b5      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619a:	e1b2      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800619c:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061a8:	d102      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80061aa:	4b07      	ldr	r3, [pc, #28]	@ (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80061ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ae:	e1a8      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b4:	e1a5      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ba:	e1a2      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061bc:	58024400 	.word	0x58024400
 80061c0:	03d09000 	.word	0x03d09000
 80061c4:	003d0900 	.word	0x003d0900
 80061c8:	017d7840 	.word	0x017d7840
 80061cc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80061d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80061d8:	430b      	orrs	r3, r1
 80061da:	d173      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80061dc:	4b9c      	ldr	r3, [pc, #624]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80061de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061ec:	d02f      	beq.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80061ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f4:	d863      	bhi.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006202:	d012      	beq.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006204:	e05b      	b.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006206:	4b92      	ldr	r3, [pc, #584]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800620e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006212:	d107      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006214:	f107 0318 	add.w	r3, r7, #24
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f991 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006222:	e16e      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006228:	e16b      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800622a:	4b89      	ldr	r3, [pc, #548]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006236:	d107      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fad3 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006246:	e15c      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800624c:	e159      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800624e:	4b80      	ldr	r3, [pc, #512]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006252:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006256:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006258:	4b7d      	ldr	r3, [pc, #500]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b04      	cmp	r3, #4
 8006262:	d10c      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800626a:	4b79      	ldr	r3, [pc, #484]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	08db      	lsrs	r3, r3, #3
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	4a77      	ldr	r2, [pc, #476]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006276:	fa22 f303 	lsr.w	r3, r2, r3
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800627c:	e01e      	b.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800627e:	4b74      	ldr	r3, [pc, #464]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800628a:	d106      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006292:	d102      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006294:	4b70      	ldr	r3, [pc, #448]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006298:	e010      	b.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800629a:	4b6d      	ldr	r3, [pc, #436]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a6:	d106      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80062a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ae:	d102      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062b0:	4b6a      	ldr	r3, [pc, #424]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062b4:	e002      	b.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062ba:	e122      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062bc:	e121      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c2:	e11e      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80062c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80062cc:	430b      	orrs	r3, r1
 80062ce:	d133      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80062d0:	4b5f      	ldr	r3, [pc, #380]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e6:	d012      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80062e8:	e023      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062ea:	4b59      	ldr	r3, [pc, #356]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fbc7 	bl	8006a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006306:	e0fc      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800630c:	e0f9      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800630e:	4b50      	ldr	r3, [pc, #320]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800631a:	d107      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631c:	f107 0318 	add.w	r3, r7, #24
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f90d 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800632a:	e0ea      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006330:	e0e7      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006336:	e0e4      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006340:	430b      	orrs	r3, r1
 8006342:	f040 808d 	bne.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006346:	4b42      	ldr	r3, [pc, #264]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800634e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006356:	d06b      	beq.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800635e:	d874      	bhi.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006366:	d056      	beq.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800636e:	d86c      	bhi.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006376:	d03b      	beq.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800637e:	d864      	bhi.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006386:	d021      	beq.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800638e:	d85c      	bhi.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800639c:	d004      	beq.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800639e:	e054      	b.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063a0:	f000 f8b8 	bl	8006514 <HAL_RCCEx_GetD3PCLK1Freq>
 80063a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063a6:	e0ac      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063a8:	4b29      	ldr	r3, [pc, #164]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063b4:	d107      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063b6:	f107 0318 	add.w	r3, r7, #24
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f8c0 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063c4:	e09d      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ca:	e09a      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063cc:	4b20      	ldr	r3, [pc, #128]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d8:	d107      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063da:	f107 030c 	add.w	r3, r7, #12
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fa02 	bl	80067e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063e8:	e08b      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ee:	e088      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f0:	4b17      	ldr	r3, [pc, #92]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d109      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063fc:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	08db      	lsrs	r3, r3, #3
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	4a13      	ldr	r2, [pc, #76]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800640e:	e078      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006414:	e075      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006416:	4b0e      	ldr	r3, [pc, #56]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006422:	d102      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006424:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006428:	e06b      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642e:	e068      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006430:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800643c:	d102      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800643e:	4b07      	ldr	r3, [pc, #28]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006442:	e05e      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006448:	e05b      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800644e:	e058      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006450:	58024400 	.word	0x58024400
 8006454:	03d09000 	.word	0x03d09000
 8006458:	003d0900 	.word	0x003d0900
 800645c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006464:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006468:	430b      	orrs	r3, r1
 800646a:	d148      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800646c:	4b27      	ldr	r3, [pc, #156]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800646e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006470:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006474:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800647c:	d02a      	beq.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006484:	d838      	bhi.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800648c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006492:	d00d      	beq.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006494:	e030      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006496:	4b1d      	ldr	r3, [pc, #116]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064a2:	d102      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80064a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80064a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064a8:	e02b      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ae:	e028      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064b0:	4b16      	ldr	r3, [pc, #88]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064bc:	d107      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fae4 	bl	8006a90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064cc:	e019      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d2:	e016      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064d4:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e0:	d107      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e2:	f107 0318 	add.w	r3, r7, #24
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f82a 	bl	8006540 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064f0:	e007      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064fc:	e001      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006504:	4618      	mov	r0, r3
 8006506:	3740      	adds	r7, #64	@ 0x40
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	58024400 	.word	0x58024400
 8006510:	017d7840 	.word	0x017d7840

08006514 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006518:	f7fd ffd4 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800651c:	4602      	mov	r2, r0
 800651e:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	091b      	lsrs	r3, r3, #4
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	4904      	ldr	r1, [pc, #16]	@ (800653c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800652a:	5ccb      	ldrb	r3, [r1, r3]
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006534:	4618      	mov	r0, r3
 8006536:	bd80      	pop	{r7, pc}
 8006538:	58024400 	.word	0x58024400
 800653c:	0800a724 	.word	0x0800a724

08006540 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006540:	b480      	push	{r7}
 8006542:	b089      	sub	sp, #36	@ 0x24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006548:	4ba1      	ldr	r3, [pc, #644]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006552:	4b9f      	ldr	r3, [pc, #636]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	0b1b      	lsrs	r3, r3, #12
 8006558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800655c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800655e:	4b9c      	ldr	r3, [pc, #624]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800656a:	4b99      	ldr	r3, [pc, #612]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800656c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656e:	08db      	lsrs	r3, r3, #3
 8006570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006582:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8111 	beq.w	80067b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f000 8083 	beq.w	800669c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b02      	cmp	r3, #2
 800659a:	f200 80a1 	bhi.w	80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d056      	beq.n	8006658 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065aa:	e099      	b.n	80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ac:	4b88      	ldr	r3, [pc, #544]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d02d      	beq.n	8006614 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065b8:	4b85      	ldr	r3, [pc, #532]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	08db      	lsrs	r3, r3, #3
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	4a84      	ldr	r2, [pc, #528]	@ (80067d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
 80065c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	ee07 3a90 	vmov	s15, r3
 80065d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e2:	4b7b      	ldr	r3, [pc, #492]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006612:	e087      	b.n	8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006626:	4b6a      	ldr	r3, [pc, #424]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006636:	ed97 6a03 	vldr	s12, [r7, #12]
 800663a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800663e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800664a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006656:	e065      	b.n	8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006662:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800666a:	4b59      	ldr	r3, [pc, #356]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800666c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667a:	ed97 6a03 	vldr	s12, [r7, #12]
 800667e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800668a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800668e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800669a:	e043      	b.n	8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ae:	4b48      	ldr	r3, [pc, #288]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066be:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066de:	e021      	b.n	8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f2:	4b37      	ldr	r3, [pc, #220]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006702:	ed97 6a03 	vldr	s12, [r7, #12]
 8006706:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800670a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800671a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006722:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006724:	4b2a      	ldr	r3, [pc, #168]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006728:	0a5b      	lsrs	r3, r3, #9
 800672a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800673a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800673e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800674a:	ee17 2a90 	vmov	r2, s15
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006752:	4b1f      	ldr	r3, [pc, #124]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006756:	0c1b      	lsrs	r3, r3, #16
 8006758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800676c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006778:	ee17 2a90 	vmov	r2, s15
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006780:	4b13      	ldr	r3, [pc, #76]	@ (80067d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	0e1b      	lsrs	r3, r3, #24
 8006786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800679a:	edd7 6a07 	vldr	s13, [r7, #28]
 800679e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a6:	ee17 2a90 	vmov	r2, s15
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067ae:	e008      	b.n	80067c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	609a      	str	r2, [r3, #8]
}
 80067c2:	bf00      	nop
 80067c4:	3724      	adds	r7, #36	@ 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	58024400 	.word	0x58024400
 80067d4:	03d09000 	.word	0x03d09000
 80067d8:	46000000 	.word	0x46000000
 80067dc:	4c742400 	.word	0x4c742400
 80067e0:	4a742400 	.word	0x4a742400
 80067e4:	4bbebc20 	.word	0x4bbebc20

080067e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b089      	sub	sp, #36	@ 0x24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067f0:	4ba1      	ldr	r3, [pc, #644]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80067fa:	4b9f      	ldr	r3, [pc, #636]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	0d1b      	lsrs	r3, r3, #20
 8006800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006804:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006806:	4b9c      	ldr	r3, [pc, #624]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006812:	4b99      	ldr	r3, [pc, #612]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	08db      	lsrs	r3, r3, #3
 8006818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	fb02 f303 	mul.w	r3, r2, r3
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8111 	beq.w	8006a58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b02      	cmp	r3, #2
 800683a:	f000 8083 	beq.w	8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b02      	cmp	r3, #2
 8006842:	f200 80a1 	bhi.w	8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d056      	beq.n	8006900 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006852:	e099      	b.n	8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006854:	4b88      	ldr	r3, [pc, #544]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02d      	beq.n	80068bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006860:	4b85      	ldr	r3, [pc, #532]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	08db      	lsrs	r3, r3, #3
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	4a84      	ldr	r2, [pc, #528]	@ (8006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800688a:	4b7b      	ldr	r3, [pc, #492]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689a:	ed97 6a03 	vldr	s12, [r7, #12]
 800689e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068ba:	e087      	b.n	80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80068ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068de:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068fe:	e065      	b.n	80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b59      	ldr	r3, [pc, #356]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006922:	ed97 6a03 	vldr	s12, [r7, #12]
 8006926:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006942:	e043      	b.n	80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006956:	4b48      	ldr	r3, [pc, #288]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006966:	ed97 6a03 	vldr	s12, [r7, #12]
 800696a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800696e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800697a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006986:	e021      	b.n	80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699a:	4b37      	ldr	r3, [pc, #220]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80069cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d0:	0a5b      	lsrs	r3, r3, #9
 80069d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f2:	ee17 2a90 	vmov	r2, s15
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80069fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a04:	ee07 3a90 	vmov	s15, r3
 8006a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a20:	ee17 2a90 	vmov	r2, s15
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a28:	4b13      	ldr	r3, [pc, #76]	@ (8006a78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2c:	0e1b      	lsrs	r3, r3, #24
 8006a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a4e:	ee17 2a90 	vmov	r2, s15
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a56:	e008      	b.n	8006a6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	609a      	str	r2, [r3, #8]
}
 8006a6a:	bf00      	nop
 8006a6c:	3724      	adds	r7, #36	@ 0x24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	03d09000 	.word	0x03d09000
 8006a80:	46000000 	.word	0x46000000
 8006a84:	4c742400 	.word	0x4c742400
 8006a88:	4a742400 	.word	0x4a742400
 8006a8c:	4bbebc20 	.word	0x4bbebc20

08006a90 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b089      	sub	sp, #36	@ 0x24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a98:	4ba0      	ldr	r3, [pc, #640]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006aa2:	4b9e      	ldr	r3, [pc, #632]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	091b      	lsrs	r3, r3, #4
 8006aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006aae:	4b9b      	ldr	r3, [pc, #620]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ab8:	4b98      	ldr	r3, [pc, #608]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	fb02 f303 	mul.w	r3, r2, r3
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 8111 	beq.w	8006cfe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	f000 8083 	beq.w	8006bea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	f200 80a1 	bhi.w	8006c2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d056      	beq.n	8006ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006af8:	e099      	b.n	8006c2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006afa:	4b88      	ldr	r3, [pc, #544]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d02d      	beq.n	8006b62 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b06:	4b85      	ldr	r3, [pc, #532]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	08db      	lsrs	r3, r3, #3
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	4a83      	ldr	r2, [pc, #524]	@ (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b12:	fa22 f303 	lsr.w	r3, r2, r3
 8006b16:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b30:	4b7a      	ldr	r3, [pc, #488]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b38:	ee07 3a90 	vmov	s15, r3
 8006b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b44:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b60:	e087      	b.n	8006c72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b74:	4b69      	ldr	r3, [pc, #420]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b88:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ba4:	e065      	b.n	8006c72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb8:	4b58      	ldr	r3, [pc, #352]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bcc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be8:	e043      	b.n	8006c72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfc:	4b47      	ldr	r3, [pc, #284]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c10:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c2c:	e021      	b.n	8006c72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c38:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c40:	4b36      	ldr	r3, [pc, #216]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c50:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c54:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c70:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006c72:	4b2a      	ldr	r3, [pc, #168]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c76:	0a5b      	lsrs	r3, r3, #9
 8006c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c98:	ee17 2a90 	vmov	r2, s15
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca4:	0c1b      	lsrs	r3, r3, #16
 8006ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc6:	ee17 2a90 	vmov	r2, s15
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006cce:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd2:	0e1b      	lsrs	r3, r3, #24
 8006cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf4:	ee17 2a90 	vmov	r2, s15
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006cfc:	e008      	b.n	8006d10 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	bf00      	nop
 8006d12:	3724      	adds	r7, #36	@ 0x24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	03d09000 	.word	0x03d09000
 8006d24:	46000000 	.word	0x46000000
 8006d28:	4c742400 	.word	0x4c742400
 8006d2c:	4a742400 	.word	0x4a742400
 8006d30:	4bbebc20 	.word	0x4bbebc20

08006d34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d42:	4b53      	ldr	r3, [pc, #332]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d101      	bne.n	8006d52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e099      	b.n	8006e86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d52:	4b4f      	ldr	r3, [pc, #316]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a4e      	ldr	r2, [pc, #312]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006d58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d5e:	f7fa fc05 	bl	800156c <HAL_GetTick>
 8006d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d64:	e008      	b.n	8006d78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d66:	f7fa fc01 	bl	800156c <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e086      	b.n	8006e86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d78:	4b45      	ldr	r3, [pc, #276]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1f0      	bne.n	8006d66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d84:	4b42      	ldr	r3, [pc, #264]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	031b      	lsls	r3, r3, #12
 8006d92:	493f      	ldr	r1, [pc, #252]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	025b      	lsls	r3, r3, #9
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	041b      	lsls	r3, r3, #16
 8006db6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	061b      	lsls	r3, r3, #24
 8006dc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006dc8:	4931      	ldr	r1, [pc, #196]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006dce:	4b30      	ldr	r3, [pc, #192]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	492d      	ldr	r1, [pc, #180]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006de0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	f023 0220 	bic.w	r2, r3, #32
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	4928      	ldr	r1, [pc, #160]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006df2:	4b27      	ldr	r3, [pc, #156]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006df8:	f023 0310 	bic.w	r3, r3, #16
 8006dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dfe:	4b24      	ldr	r3, [pc, #144]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e02:	4b24      	ldr	r3, [pc, #144]	@ (8006e94 <RCCEx_PLL2_Config+0x160>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	69d2      	ldr	r2, [r2, #28]
 8006e0a:	00d2      	lsls	r2, r2, #3
 8006e0c:	4920      	ldr	r1, [pc, #128]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e12:	4b1f      	ldr	r3, [pc, #124]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e16:	4a1e      	ldr	r2, [pc, #120]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e18:	f043 0310 	orr.w	r3, r3, #16
 8006e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d106      	bne.n	8006e32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e24:	4b1a      	ldr	r3, [pc, #104]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	4a19      	ldr	r2, [pc, #100]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e30:	e00f      	b.n	8006e52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d106      	bne.n	8006e46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e38:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	4a14      	ldr	r2, [pc, #80]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e44:	e005      	b.n	8006e52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e46:	4b12      	ldr	r3, [pc, #72]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	4a11      	ldr	r2, [pc, #68]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e52:	4b0f      	ldr	r3, [pc, #60]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a0e      	ldr	r2, [pc, #56]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5e:	f7fa fb85 	bl	800156c <HAL_GetTick>
 8006e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e64:	e008      	b.n	8006e78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e66:	f7fa fb81 	bl	800156c <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e006      	b.n	8006e86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <RCCEx_PLL2_Config+0x15c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
 8006e94:	ffff0007 	.word	0xffff0007

08006e98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ea6:	4b53      	ldr	r3, [pc, #332]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d101      	bne.n	8006eb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e099      	b.n	8006fea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a4e      	ldr	r2, [pc, #312]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec2:	f7fa fb53 	bl	800156c <HAL_GetTick>
 8006ec6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ec8:	e008      	b.n	8006edc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006eca:	f7fa fb4f 	bl	800156c <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e086      	b.n	8006fea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006edc:	4b45      	ldr	r3, [pc, #276]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f0      	bne.n	8006eca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ee8:	4b42      	ldr	r3, [pc, #264]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	051b      	lsls	r3, r3, #20
 8006ef6:	493f      	ldr	r1, [pc, #252]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	628b      	str	r3, [r1, #40]	@ 0x28
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	025b      	lsls	r3, r3, #9
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	061b      	lsls	r3, r3, #24
 8006f28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f2c:	4931      	ldr	r1, [pc, #196]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f32:	4b30      	ldr	r3, [pc, #192]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	492d      	ldr	r1, [pc, #180]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f44:	4b2b      	ldr	r3, [pc, #172]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	4928      	ldr	r1, [pc, #160]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f56:	4b27      	ldr	r3, [pc, #156]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	4a26      	ldr	r2, [pc, #152]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f62:	4b24      	ldr	r3, [pc, #144]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f66:	4b24      	ldr	r3, [pc, #144]	@ (8006ff8 <RCCEx_PLL3_Config+0x160>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	69d2      	ldr	r2, [r2, #28]
 8006f6e:	00d2      	lsls	r2, r2, #3
 8006f70:	4920      	ldr	r1, [pc, #128]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f76:	4b1f      	ldr	r3, [pc, #124]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d106      	bne.n	8006f96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f88:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	4a19      	ldr	r2, [pc, #100]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f94:	e00f      	b.n	8006fb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d106      	bne.n	8006faa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f9c:	4b15      	ldr	r3, [pc, #84]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	4a14      	ldr	r2, [pc, #80]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006fa2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fa8:	e005      	b.n	8006fb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006faa:	4b12      	ldr	r3, [pc, #72]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	4a11      	ldr	r2, [pc, #68]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006fb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a0e      	ldr	r2, [pc, #56]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc2:	f7fa fad3 	bl	800156c <HAL_GetTick>
 8006fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fc8:	e008      	b.n	8006fdc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fca:	f7fa facf 	bl	800156c <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e006      	b.n	8006fea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fdc:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <RCCEx_PLL3_Config+0x15c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	ffff0007 	.word	0xffff0007

08006ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e049      	b.n	80070a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fa f8c4 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f000 fb46 	bl	80076cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d001      	beq.n	80070c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e04c      	b.n	800715e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a26      	ldr	r2, [pc, #152]	@ (800716c <HAL_TIM_Base_Start+0xc0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d022      	beq.n	800711c <HAL_TIM_Base_Start+0x70>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070de:	d01d      	beq.n	800711c <HAL_TIM_Base_Start+0x70>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a22      	ldr	r2, [pc, #136]	@ (8007170 <HAL_TIM_Base_Start+0xc4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d018      	beq.n	800711c <HAL_TIM_Base_Start+0x70>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a21      	ldr	r2, [pc, #132]	@ (8007174 <HAL_TIM_Base_Start+0xc8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d013      	beq.n	800711c <HAL_TIM_Base_Start+0x70>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007178 <HAL_TIM_Base_Start+0xcc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00e      	beq.n	800711c <HAL_TIM_Base_Start+0x70>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a1e      	ldr	r2, [pc, #120]	@ (800717c <HAL_TIM_Base_Start+0xd0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d009      	beq.n	800711c <HAL_TIM_Base_Start+0x70>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1c      	ldr	r2, [pc, #112]	@ (8007180 <HAL_TIM_Base_Start+0xd4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d004      	beq.n	800711c <HAL_TIM_Base_Start+0x70>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1b      	ldr	r2, [pc, #108]	@ (8007184 <HAL_TIM_Base_Start+0xd8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d115      	bne.n	8007148 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	4b19      	ldr	r3, [pc, #100]	@ (8007188 <HAL_TIM_Base_Start+0xdc>)
 8007124:	4013      	ands	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b06      	cmp	r3, #6
 800712c:	d015      	beq.n	800715a <HAL_TIM_Base_Start+0xae>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007134:	d011      	beq.n	800715a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0201 	orr.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007146:	e008      	b.n	800715a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e000      	b.n	800715c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40010400 	.word	0x40010400
 8007180:	40001800 	.word	0x40001800
 8007184:	40014000 	.word	0x40014000
 8007188:	00010007 	.word	0x00010007

0800718c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	d001      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e054      	b.n	800724e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a26      	ldr	r2, [pc, #152]	@ (800725c <HAL_TIM_Base_Start_IT+0xd0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d022      	beq.n	800720c <HAL_TIM_Base_Start_IT+0x80>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ce:	d01d      	beq.n	800720c <HAL_TIM_Base_Start_IT+0x80>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a22      	ldr	r2, [pc, #136]	@ (8007260 <HAL_TIM_Base_Start_IT+0xd4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d018      	beq.n	800720c <HAL_TIM_Base_Start_IT+0x80>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a21      	ldr	r2, [pc, #132]	@ (8007264 <HAL_TIM_Base_Start_IT+0xd8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <HAL_TIM_Base_Start_IT+0x80>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1f      	ldr	r2, [pc, #124]	@ (8007268 <HAL_TIM_Base_Start_IT+0xdc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00e      	beq.n	800720c <HAL_TIM_Base_Start_IT+0x80>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a1e      	ldr	r2, [pc, #120]	@ (800726c <HAL_TIM_Base_Start_IT+0xe0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_TIM_Base_Start_IT+0x80>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007270 <HAL_TIM_Base_Start_IT+0xe4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_TIM_Base_Start_IT+0x80>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <HAL_TIM_Base_Start_IT+0xe8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d115      	bne.n	8007238 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	4b19      	ldr	r3, [pc, #100]	@ (8007278 <HAL_TIM_Base_Start_IT+0xec>)
 8007214:	4013      	ands	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b06      	cmp	r3, #6
 800721c:	d015      	beq.n	800724a <HAL_TIM_Base_Start_IT+0xbe>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007224:	d011      	beq.n	800724a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0201 	orr.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007236:	e008      	b.n	800724a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e000      	b.n	800724c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40010000 	.word	0x40010000
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40000c00 	.word	0x40000c00
 800726c:	40010400 	.word	0x40010400
 8007270:	40001800 	.word	0x40001800
 8007274:	40014000 	.word	0x40014000
 8007278:	00010007 	.word	0x00010007

0800727c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d020      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01b      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0202 	mvn.w	r2, #2
 80072b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f9e2 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f9d4 	bl	800767c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f9e5 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 0304 	and.w	r3, r3, #4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d020      	beq.n	800732c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01b      	beq.n	800732c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0204 	mvn.w	r2, #4
 80072fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9bc 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 8007318:	e005      	b.n	8007326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9ae 	bl	800767c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f9bf 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d020      	beq.n	8007378 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01b      	beq.n	8007378 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0208 	mvn.w	r2, #8
 8007348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2204      	movs	r2, #4
 800734e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f996 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f988 	bl	800767c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f999 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b00      	cmp	r3, #0
 8007380:	d020      	beq.n	80073c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f003 0310 	and.w	r3, r3, #16
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01b      	beq.n	80073c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0210 	mvn.w	r2, #16
 8007394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2208      	movs	r2, #8
 800739a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f970 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 80073b0:	e005      	b.n	80073be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f962 	bl	800767c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f973 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d007      	beq.n	80073e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0201 	mvn.w	r2, #1
 80073e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7f9 fe3c 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d104      	bne.n	80073fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00c      	beq.n	8007416 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800740e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fb31 	bl	8007a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00c      	beq.n	800743a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fb29 	bl	8007a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f92d 	bl	80076b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f06f 0220 	mvn.w	r2, #32
 800747a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 faf1 	bl	8007a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e0dc      	b.n	8007662 <HAL_TIM_ConfigClockSource+0x1d6>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	4b6a      	ldr	r3, [pc, #424]	@ (800766c <HAL_TIM_ConfigClockSource+0x1e0>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a64      	ldr	r2, [pc, #400]	@ (8007670 <HAL_TIM_ConfigClockSource+0x1e4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	f000 80a9 	beq.w	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 80074e4:	4a62      	ldr	r2, [pc, #392]	@ (8007670 <HAL_TIM_ConfigClockSource+0x1e4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	f200 80ae 	bhi.w	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 80074ec:	4a61      	ldr	r2, [pc, #388]	@ (8007674 <HAL_TIM_ConfigClockSource+0x1e8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	f000 80a1 	beq.w	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 80074f4:	4a5f      	ldr	r2, [pc, #380]	@ (8007674 <HAL_TIM_ConfigClockSource+0x1e8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	f200 80a6 	bhi.w	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 80074fc:	4a5e      	ldr	r2, [pc, #376]	@ (8007678 <HAL_TIM_ConfigClockSource+0x1ec>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	f000 8099 	beq.w	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 8007504:	4a5c      	ldr	r2, [pc, #368]	@ (8007678 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007506:	4293      	cmp	r3, r2
 8007508:	f200 809e 	bhi.w	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 800750c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007510:	f000 8091 	beq.w	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 8007514:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007518:	f200 8096 	bhi.w	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 800751c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007520:	f000 8089 	beq.w	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 8007524:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007528:	f200 808e 	bhi.w	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 800752c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007530:	d03e      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x124>
 8007532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007536:	f200 8087 	bhi.w	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 800753a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800753e:	f000 8086 	beq.w	800764e <HAL_TIM_ConfigClockSource+0x1c2>
 8007542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007546:	d87f      	bhi.n	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 8007548:	2b70      	cmp	r3, #112	@ 0x70
 800754a:	d01a      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0xf6>
 800754c:	2b70      	cmp	r3, #112	@ 0x70
 800754e:	d87b      	bhi.n	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 8007550:	2b60      	cmp	r3, #96	@ 0x60
 8007552:	d050      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x16a>
 8007554:	2b60      	cmp	r3, #96	@ 0x60
 8007556:	d877      	bhi.n	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 8007558:	2b50      	cmp	r3, #80	@ 0x50
 800755a:	d03c      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0x14a>
 800755c:	2b50      	cmp	r3, #80	@ 0x50
 800755e:	d873      	bhi.n	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 8007560:	2b40      	cmp	r3, #64	@ 0x40
 8007562:	d058      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x18a>
 8007564:	2b40      	cmp	r3, #64	@ 0x40
 8007566:	d86f      	bhi.n	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 8007568:	2b30      	cmp	r3, #48	@ 0x30
 800756a:	d064      	beq.n	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 800756c:	2b30      	cmp	r3, #48	@ 0x30
 800756e:	d86b      	bhi.n	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 8007570:	2b20      	cmp	r3, #32
 8007572:	d060      	beq.n	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 8007574:	2b20      	cmp	r3, #32
 8007576:	d867      	bhi.n	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d05c      	beq.n	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 800757c:	2b10      	cmp	r3, #16
 800757e:	d05a      	beq.n	8007636 <HAL_TIM_ConfigClockSource+0x1aa>
 8007580:	e062      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007592:	f000 f9b9 	bl	8007908 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	609a      	str	r2, [r3, #8]
      break;
 80075ae:	e04f      	b.n	8007650 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075c0:	f000 f9a2 	bl	8007908 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689a      	ldr	r2, [r3, #8]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075d2:	609a      	str	r2, [r3, #8]
      break;
 80075d4:	e03c      	b.n	8007650 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e2:	461a      	mov	r2, r3
 80075e4:	f000 f912 	bl	800780c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2150      	movs	r1, #80	@ 0x50
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f96c 	bl	80078cc <TIM_ITRx_SetConfig>
      break;
 80075f4:	e02c      	b.n	8007650 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007602:	461a      	mov	r2, r3
 8007604:	f000 f931 	bl	800786a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2160      	movs	r1, #96	@ 0x60
 800760e:	4618      	mov	r0, r3
 8007610:	f000 f95c 	bl	80078cc <TIM_ITRx_SetConfig>
      break;
 8007614:	e01c      	b.n	8007650 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007622:	461a      	mov	r2, r3
 8007624:	f000 f8f2 	bl	800780c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2140      	movs	r1, #64	@ 0x40
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f94c 	bl	80078cc <TIM_ITRx_SetConfig>
      break;
 8007634:	e00c      	b.n	8007650 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f000 f943 	bl	80078cc <TIM_ITRx_SetConfig>
      break;
 8007646:	e003      	b.n	8007650 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	73fb      	strb	r3, [r7, #15]
      break;
 800764c:	e000      	b.n	8007650 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800764e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	ffceff88 	.word	0xffceff88
 8007670:	00100040 	.word	0x00100040
 8007674:	00100030 	.word	0x00100030
 8007678:	00100020 	.word	0x00100020

0800767c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a43      	ldr	r2, [pc, #268]	@ (80077ec <TIM_Base_SetConfig+0x120>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d013      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ea:	d00f      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a40      	ldr	r2, [pc, #256]	@ (80077f0 <TIM_Base_SetConfig+0x124>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00b      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a3f      	ldr	r2, [pc, #252]	@ (80077f4 <TIM_Base_SetConfig+0x128>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d007      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a3e      	ldr	r2, [pc, #248]	@ (80077f8 <TIM_Base_SetConfig+0x12c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a3d      	ldr	r2, [pc, #244]	@ (80077fc <TIM_Base_SetConfig+0x130>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d108      	bne.n	800771e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a32      	ldr	r2, [pc, #200]	@ (80077ec <TIM_Base_SetConfig+0x120>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01f      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800772c:	d01b      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a2f      	ldr	r2, [pc, #188]	@ (80077f0 <TIM_Base_SetConfig+0x124>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d017      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a2e      	ldr	r2, [pc, #184]	@ (80077f4 <TIM_Base_SetConfig+0x128>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a2d      	ldr	r2, [pc, #180]	@ (80077f8 <TIM_Base_SetConfig+0x12c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00f      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a2c      	ldr	r2, [pc, #176]	@ (80077fc <TIM_Base_SetConfig+0x130>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00b      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a2b      	ldr	r2, [pc, #172]	@ (8007800 <TIM_Base_SetConfig+0x134>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d007      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2a      	ldr	r2, [pc, #168]	@ (8007804 <TIM_Base_SetConfig+0x138>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a29      	ldr	r2, [pc, #164]	@ (8007808 <TIM_Base_SetConfig+0x13c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d108      	bne.n	8007778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800776c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a14      	ldr	r2, [pc, #80]	@ (80077ec <TIM_Base_SetConfig+0x120>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00f      	beq.n	80077be <TIM_Base_SetConfig+0xf2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a16      	ldr	r2, [pc, #88]	@ (80077fc <TIM_Base_SetConfig+0x130>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00b      	beq.n	80077be <TIM_Base_SetConfig+0xf2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a15      	ldr	r2, [pc, #84]	@ (8007800 <TIM_Base_SetConfig+0x134>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <TIM_Base_SetConfig+0xf2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a14      	ldr	r2, [pc, #80]	@ (8007804 <TIM_Base_SetConfig+0x138>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_Base_SetConfig+0xf2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a13      	ldr	r2, [pc, #76]	@ (8007808 <TIM_Base_SetConfig+0x13c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d103      	bne.n	80077c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	691a      	ldr	r2, [r3, #16]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f043 0204 	orr.w	r2, r3, #4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	601a      	str	r2, [r3, #0]
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40010400 	.word	0x40010400
 8007800:	40014000 	.word	0x40014000
 8007804:	40014400 	.word	0x40014400
 8007808:	40014800 	.word	0x40014800

0800780c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f023 0201 	bic.w	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f023 030a 	bic.w	r3, r3, #10
 8007848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	621a      	str	r2, [r3, #32]
}
 800785e:	bf00      	nop
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800786a:	b480      	push	{r7}
 800786c:	b087      	sub	sp, #28
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	f023 0210 	bic.w	r2, r3, #16
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007894:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	031b      	lsls	r3, r3, #12
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <TIM_ITRx_SetConfig+0x38>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f043 0307 	orr.w	r3, r3, #7
 80078ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	609a      	str	r2, [r3, #8]
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	ffcfff8f 	.word	0xffcfff8f

08007908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	021a      	lsls	r2, r3, #8
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	431a      	orrs	r2, r3
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4313      	orrs	r3, r2
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	609a      	str	r2, [r3, #8]
}
 800793c:	bf00      	nop
 800793e:	371c      	adds	r7, #28
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800795c:	2302      	movs	r3, #2
 800795e:	e06d      	b.n	8007a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a30      	ldr	r2, [pc, #192]	@ (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2f      	ldr	r2, [pc, #188]	@ (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d108      	bne.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800799a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a20      	ldr	r2, [pc, #128]	@ (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d022      	beq.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d2:	d01d      	beq.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d018      	beq.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d013      	beq.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00e      	beq.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a15      	ldr	r2, [pc, #84]	@ (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a16      	ldr	r2, [pc, #88]	@ (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a15      	ldr	r2, [pc, #84]	@ (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10c      	bne.n	8007a2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	40010000 	.word	0x40010000
 8007a4c:	40010400 	.word	0x40010400
 8007a50:	40000400 	.word	0x40000400
 8007a54:	40000800 	.word	0x40000800
 8007a58:	40000c00 	.word	0x40000c00
 8007a5c:	40001800 	.word	0x40001800
 8007a60:	40014000 	.word	0x40014000

08007a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <__NVIC_SetPriority>:
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	db0a      	blt.n	8007aca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	490c      	ldr	r1, [pc, #48]	@ (8007aec <__NVIC_SetPriority+0x4c>)
 8007aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007abe:	0112      	lsls	r2, r2, #4
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ac8:	e00a      	b.n	8007ae0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	4908      	ldr	r1, [pc, #32]	@ (8007af0 <__NVIC_SetPriority+0x50>)
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	f003 030f 	and.w	r3, r3, #15
 8007ad6:	3b04      	subs	r3, #4
 8007ad8:	0112      	lsls	r2, r2, #4
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	440b      	add	r3, r1
 8007ade:	761a      	strb	r2, [r3, #24]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	e000e100 	.word	0xe000e100
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007af8:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <SysTick_Handler+0x1c>)
 8007afa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007afc:	f001 fd18 	bl	8009530 <xTaskGetSchedulerState>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d001      	beq.n	8007b0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b06:	f002 fb0f 	bl	800a128 <xPortSysTickHandler>
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	e000e010 	.word	0xe000e010

08007b14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b18:	2100      	movs	r1, #0
 8007b1a:	f06f 0004 	mvn.w	r0, #4
 8007b1e:	f7ff ffbf 	bl	8007aa0 <__NVIC_SetPriority>
#endif
}
 8007b22:	bf00      	nop
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b2e:	f3ef 8305 	mrs	r3, IPSR
 8007b32:	603b      	str	r3, [r7, #0]
  return(result);
 8007b34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b3a:	f06f 0305 	mvn.w	r3, #5
 8007b3e:	607b      	str	r3, [r7, #4]
 8007b40:	e00c      	b.n	8007b5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b42:	4b0a      	ldr	r3, [pc, #40]	@ (8007b6c <osKernelInitialize+0x44>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d105      	bne.n	8007b56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b4a:	4b08      	ldr	r3, [pc, #32]	@ (8007b6c <osKernelInitialize+0x44>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	607b      	str	r3, [r7, #4]
 8007b54:	e002      	b.n	8007b5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b5c:	687b      	ldr	r3, [r7, #4]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	240001e8 	.word	0x240001e8

08007b70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b76:	f3ef 8305 	mrs	r3, IPSR
 8007b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b82:	f06f 0305 	mvn.w	r3, #5
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	e010      	b.n	8007bac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb8 <osKernelStart+0x48>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d109      	bne.n	8007ba6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b92:	f7ff ffbf 	bl	8007b14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b96:	4b08      	ldr	r3, [pc, #32]	@ (8007bb8 <osKernelStart+0x48>)
 8007b98:	2202      	movs	r2, #2
 8007b9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b9c:	f001 f87a 	bl	8008c94 <vTaskStartScheduler>
      stat = osOK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	607b      	str	r3, [r7, #4]
 8007ba4:	e002      	b.n	8007bac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8007baa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bac:	687b      	ldr	r3, [r7, #4]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	240001e8 	.word	0x240001e8

08007bbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08e      	sub	sp, #56	@ 0x38
 8007bc0:	af04      	add	r7, sp, #16
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bcc:	f3ef 8305 	mrs	r3, IPSR
 8007bd0:	617b      	str	r3, [r7, #20]
  return(result);
 8007bd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d17e      	bne.n	8007cd6 <osThreadNew+0x11a>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d07b      	beq.n	8007cd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007bde:	2380      	movs	r3, #128	@ 0x80
 8007be0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007be2:	2318      	movs	r3, #24
 8007be4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007bea:	f04f 33ff 	mov.w	r3, #4294967295
 8007bee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d045      	beq.n	8007c82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <osThreadNew+0x48>
        name = attr->name;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <osThreadNew+0x6e>
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	2b38      	cmp	r3, #56	@ 0x38
 8007c1c:	d805      	bhi.n	8007c2a <osThreadNew+0x6e>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <osThreadNew+0x72>
        return (NULL);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e054      	b.n	8007cd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	089b      	lsrs	r3, r3, #2
 8007c3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <osThreadNew+0xa8>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c4c:	d90a      	bls.n	8007c64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d006      	beq.n	8007c64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <osThreadNew+0xa8>
        mem = 1;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	e010      	b.n	8007c86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10c      	bne.n	8007c86 <osThreadNew+0xca>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d108      	bne.n	8007c86 <osThreadNew+0xca>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d104      	bne.n	8007c86 <osThreadNew+0xca>
          mem = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	e001      	b.n	8007c86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d110      	bne.n	8007cae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c94:	9202      	str	r2, [sp, #8]
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6a3a      	ldr	r2, [r7, #32]
 8007ca0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 fe1a 	bl	80088dc <xTaskCreateStatic>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	613b      	str	r3, [r7, #16]
 8007cac:	e013      	b.n	8007cd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d110      	bne.n	8007cd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	f107 0310 	add.w	r3, r7, #16
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fe68 	bl	800899c <xTaskCreate>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d001      	beq.n	8007cd6 <osThreadNew+0x11a>
            hTask = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cd6:	693b      	ldr	r3, [r7, #16]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3728      	adds	r7, #40	@ 0x28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ce8:	f3ef 8305 	mrs	r3, IPSR
 8007cec:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <osDelay+0x1c>
    stat = osErrorISR;
 8007cf4:	f06f 0305 	mvn.w	r3, #5
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e007      	b.n	8007d0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 ff8e 	bl	8008c28 <vTaskDelay>
    }
  }

  return (stat);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4a07      	ldr	r2, [pc, #28]	@ (8007d44 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	4a06      	ldr	r2, [pc, #24]	@ (8007d48 <vApplicationGetIdleTaskMemory+0x30>)
 8007d2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2280      	movs	r2, #128	@ 0x80
 8007d34:	601a      	str	r2, [r3, #0]
}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	240001ec 	.word	0x240001ec
 8007d48:	24000248 	.word	0x24000248

08007d4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a07      	ldr	r2, [pc, #28]	@ (8007d78 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4a06      	ldr	r2, [pc, #24]	@ (8007d7c <vApplicationGetTimerTaskMemory+0x30>)
 8007d62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d6a:	601a      	str	r2, [r3, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	24000448 	.word	0x24000448
 8007d7c:	240004a4 	.word	0x240004a4

08007d80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f103 0208 	add.w	r2, r3, #8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295
 8007d98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f103 0208 	add.w	r2, r3, #8
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f103 0208 	add.w	r2, r3, #8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b085      	sub	sp, #20
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e38:	d103      	bne.n	8007e42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	e00c      	b.n	8007e5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3308      	adds	r3, #8
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	e002      	b.n	8007e50 <vListInsert+0x2e>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d2f6      	bcs.n	8007e4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	601a      	str	r2, [r3, #0]
}
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6892      	ldr	r2, [r2, #8]
 8007eaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6852      	ldr	r2, [r2, #4]
 8007eb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d103      	bne.n	8007ec8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	1e5a      	subs	r2, r3, #1
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	e7fd      	b.n	8007f10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f14:	f002 f878 	bl	800a008 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f20:	68f9      	ldr	r1, [r7, #12]
 8007f22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	441a      	add	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f44:	3b01      	subs	r3, #1
 8007f46:	68f9      	ldr	r1, [r7, #12]
 8007f48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f4a:	fb01 f303 	mul.w	r3, r1, r3
 8007f4e:	441a      	add	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	22ff      	movs	r2, #255	@ 0xff
 8007f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	22ff      	movs	r2, #255	@ 0xff
 8007f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d114      	bne.n	8007f94 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d01a      	beq.n	8007fa8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3310      	adds	r3, #16
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 f91a 	bl	80091b0 <xTaskRemoveFromEventList>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d012      	beq.n	8007fa8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f82:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb8 <xQueueGenericReset+0xd0>)
 8007f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	e009      	b.n	8007fa8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3310      	adds	r3, #16
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fef1 	bl	8007d80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3324      	adds	r3, #36	@ 0x24
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff feec 	bl	8007d80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fa8:	f002 f860 	bl	800a06c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fac:	2301      	movs	r3, #1
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	e000ed04 	.word	0xe000ed04

08007fbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08e      	sub	sp, #56	@ 0x38
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10b      	bne.n	8007fe8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10b      	bne.n	8008006 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	e7fd      	b.n	8008002 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <xQueueGenericCreateStatic+0x56>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <xQueueGenericCreateStatic+0x5a>
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <xQueueGenericCreateStatic+0x5c>
 8008016:	2300      	movs	r3, #0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10b      	bne.n	8008034 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	623b      	str	r3, [r7, #32]
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <xQueueGenericCreateStatic+0x84>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <xQueueGenericCreateStatic+0x88>
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <xQueueGenericCreateStatic+0x8a>
 8008044:	2300      	movs	r3, #0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10b      	bne.n	8008062 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	61fb      	str	r3, [r7, #28]
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008062:	2350      	movs	r3, #80	@ 0x50
 8008064:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b50      	cmp	r3, #80	@ 0x50
 800806a:	d00b      	beq.n	8008084 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	61bb      	str	r3, [r7, #24]
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008084:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800808a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00d      	beq.n	80080ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008098:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800809c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4613      	mov	r3, r2
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f805 	bl	80080b6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3730      	adds	r7, #48	@ 0x30
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d103      	bne.n	80080d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	e002      	b.n	80080d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080e4:	2101      	movs	r1, #1
 80080e6:	69b8      	ldr	r0, [r7, #24]
 80080e8:	f7ff fefe 	bl	8007ee8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08e      	sub	sp, #56	@ 0x38
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10b      	bne.n	8008130 <xQueueGenericSend+0x34>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	e7fd      	b.n	800812c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d103      	bne.n	800813e <xQueueGenericSend+0x42>
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <xQueueGenericSend+0x46>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueGenericSend+0x48>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10b      	bne.n	8008160 <xQueueGenericSend+0x64>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800815a:	bf00      	nop
 800815c:	bf00      	nop
 800815e:	e7fd      	b.n	800815c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d103      	bne.n	800816e <xQueueGenericSend+0x72>
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <xQueueGenericSend+0x76>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <xQueueGenericSend+0x78>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10b      	bne.n	8008190 <xQueueGenericSend+0x94>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	623b      	str	r3, [r7, #32]
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	e7fd      	b.n	800818c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008190:	f001 f9ce 	bl	8009530 <xTaskGetSchedulerState>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <xQueueGenericSend+0xa4>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <xQueueGenericSend+0xa8>
 80081a0:	2301      	movs	r3, #1
 80081a2:	e000      	b.n	80081a6 <xQueueGenericSend+0xaa>
 80081a4:	2300      	movs	r3, #0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10b      	bne.n	80081c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	61fb      	str	r3, [r7, #28]
}
 80081bc:	bf00      	nop
 80081be:	bf00      	nop
 80081c0:	e7fd      	b.n	80081be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081c2:	f001 ff21 	bl	800a008 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d302      	bcc.n	80081d8 <xQueueGenericSend+0xdc>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d129      	bne.n	800822c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081de:	f000 fa0f 	bl	8008600 <prvCopyDataToQueue>
 80081e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d010      	beq.n	800820e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ee:	3324      	adds	r3, #36	@ 0x24
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 ffdd 	bl	80091b0 <xTaskRemoveFromEventList>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d013      	beq.n	8008224 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081fc:	4b3f      	ldr	r3, [pc, #252]	@ (80082fc <xQueueGenericSend+0x200>)
 80081fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	e00a      	b.n	8008224 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d007      	beq.n	8008224 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008214:	4b39      	ldr	r3, [pc, #228]	@ (80082fc <xQueueGenericSend+0x200>)
 8008216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008224:	f001 ff22 	bl	800a06c <vPortExitCritical>
				return pdPASS;
 8008228:	2301      	movs	r3, #1
 800822a:	e063      	b.n	80082f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d103      	bne.n	800823a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008232:	f001 ff1b 	bl	800a06c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008236:	2300      	movs	r3, #0
 8008238:	e05c      	b.n	80082f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800823a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823c:	2b00      	cmp	r3, #0
 800823e:	d106      	bne.n	800824e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008240:	f107 0314 	add.w	r3, r7, #20
 8008244:	4618      	mov	r0, r3
 8008246:	f001 f817 	bl	8009278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800824a:	2301      	movs	r3, #1
 800824c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800824e:	f001 ff0d 	bl	800a06c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008252:	f000 fd87 	bl	8008d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008256:	f001 fed7 	bl	800a008 <vPortEnterCritical>
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008260:	b25b      	sxtb	r3, r3
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008266:	d103      	bne.n	8008270 <xQueueGenericSend+0x174>
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008272:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008276:	b25b      	sxtb	r3, r3
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d103      	bne.n	8008286 <xQueueGenericSend+0x18a>
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008286:	f001 fef1 	bl	800a06c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800828a:	1d3a      	adds	r2, r7, #4
 800828c:	f107 0314 	add.w	r3, r7, #20
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f001 f806 	bl	80092a4 <xTaskCheckForTimeOut>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d124      	bne.n	80082e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800829e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082a0:	f000 faa6 	bl	80087f0 <prvIsQueueFull>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d018      	beq.n	80082dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	3310      	adds	r3, #16
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 ff2a 	bl	800910c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ba:	f000 fa31 	bl	8008720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082be:	f000 fd5f 	bl	8008d80 <xTaskResumeAll>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f47f af7c 	bne.w	80081c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082ca:	4b0c      	ldr	r3, [pc, #48]	@ (80082fc <xQueueGenericSend+0x200>)
 80082cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	e772      	b.n	80081c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082de:	f000 fa1f 	bl	8008720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082e2:	f000 fd4d 	bl	8008d80 <xTaskResumeAll>
 80082e6:	e76c      	b.n	80081c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ea:	f000 fa19 	bl	8008720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082ee:	f000 fd47 	bl	8008d80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3738      	adds	r7, #56	@ 0x38
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b090      	sub	sp, #64	@ 0x40
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10b      	bne.n	8008330 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800832a:	bf00      	nop
 800832c:	bf00      	nop
 800832e:	e7fd      	b.n	800832c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d103      	bne.n	800833e <xQueueGenericSendFromISR+0x3e>
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <xQueueGenericSendFromISR+0x42>
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <xQueueGenericSendFromISR+0x44>
 8008342:	2300      	movs	r3, #0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10b      	bne.n	8008360 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800835a:	bf00      	nop
 800835c:	bf00      	nop
 800835e:	e7fd      	b.n	800835c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d103      	bne.n	800836e <xQueueGenericSendFromISR+0x6e>
 8008366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <xQueueGenericSendFromISR+0x72>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <xQueueGenericSendFromISR+0x74>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10b      	bne.n	8008390 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	623b      	str	r3, [r7, #32]
}
 800838a:	bf00      	nop
 800838c:	bf00      	nop
 800838e:	e7fd      	b.n	800838c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008390:	f001 ff1a 	bl	800a1c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008394:	f3ef 8211 	mrs	r2, BASEPRI
 8008398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	61fa      	str	r2, [r7, #28]
 80083aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d302      	bcc.n	80083c2 <xQueueGenericSendFromISR+0xc2>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d12f      	bne.n	8008422 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	68b9      	ldr	r1, [r7, #8]
 80083d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083d8:	f000 f912 	bl	8008600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e4:	d112      	bne.n	800840c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d016      	beq.n	800841c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f0:	3324      	adds	r3, #36	@ 0x24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fedc 	bl	80091b0 <xTaskRemoveFromEventList>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00e      	beq.n	800841c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	e007      	b.n	800841c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800840c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008410:	3301      	adds	r3, #1
 8008412:	b2db      	uxtb	r3, r3
 8008414:	b25a      	sxtb	r2, r3
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800841c:	2301      	movs	r3, #1
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008420:	e001      	b.n	8008426 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008422:	2300      	movs	r3, #0
 8008424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008428:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008430:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008434:	4618      	mov	r0, r3
 8008436:	3740      	adds	r7, #64	@ 0x40
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	@ 0x30
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008448:	2300      	movs	r3, #0
 800844a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <xQueueReceive+0x32>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	623b      	str	r3, [r7, #32]
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	e7fd      	b.n	800846a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <xQueueReceive+0x40>
 8008474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <xQueueReceive+0x44>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <xQueueReceive+0x46>
 8008480:	2300      	movs	r3, #0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10b      	bne.n	800849e <xQueueReceive+0x62>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	61fb      	str	r3, [r7, #28]
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	e7fd      	b.n	800849a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800849e:	f001 f847 	bl	8009530 <xTaskGetSchedulerState>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <xQueueReceive+0x72>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <xQueueReceive+0x76>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <xQueueReceive+0x78>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10b      	bne.n	80084d0 <xQueueReceive+0x94>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	61bb      	str	r3, [r7, #24]
}
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	e7fd      	b.n	80084cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084d0:	f001 fd9a 	bl	800a008 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01f      	beq.n	8008520 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084e4:	f000 f8f6 	bl	80086d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	1e5a      	subs	r2, r3, #1
 80084ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00f      	beq.n	8008518 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fa:	3310      	adds	r3, #16
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fe57 	bl	80091b0 <xTaskRemoveFromEventList>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008508:	4b3c      	ldr	r3, [pc, #240]	@ (80085fc <xQueueReceive+0x1c0>)
 800850a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008518:	f001 fda8 	bl	800a06c <vPortExitCritical>
				return pdPASS;
 800851c:	2301      	movs	r3, #1
 800851e:	e069      	b.n	80085f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d103      	bne.n	800852e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008526:	f001 fda1 	bl	800a06c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800852a:	2300      	movs	r3, #0
 800852c:	e062      	b.n	80085f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008534:	f107 0310 	add.w	r3, r7, #16
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fe9d 	bl	8009278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800853e:	2301      	movs	r3, #1
 8008540:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008542:	f001 fd93 	bl	800a06c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008546:	f000 fc0d 	bl	8008d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800854a:	f001 fd5d 	bl	800a008 <vPortEnterCritical>
 800854e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008554:	b25b      	sxtb	r3, r3
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	d103      	bne.n	8008564 <xQueueReceive+0x128>
 800855c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800856a:	b25b      	sxtb	r3, r3
 800856c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008570:	d103      	bne.n	800857a <xQueueReceive+0x13e>
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800857a:	f001 fd77 	bl	800a06c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800857e:	1d3a      	adds	r2, r7, #4
 8008580:	f107 0310 	add.w	r3, r7, #16
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fe8c 	bl	80092a4 <xTaskCheckForTimeOut>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d123      	bne.n	80085da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008594:	f000 f916 	bl	80087c4 <prvIsQueueEmpty>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d017      	beq.n	80085ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800859e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a0:	3324      	adds	r3, #36	@ 0x24
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fdb0 	bl	800910c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ae:	f000 f8b7 	bl	8008720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085b2:	f000 fbe5 	bl	8008d80 <xTaskResumeAll>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d189      	bne.n	80084d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085bc:	4b0f      	ldr	r3, [pc, #60]	@ (80085fc <xQueueReceive+0x1c0>)
 80085be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	e780      	b.n	80084d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d0:	f000 f8a6 	bl	8008720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085d4:	f000 fbd4 	bl	8008d80 <xTaskResumeAll>
 80085d8:	e77a      	b.n	80084d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085dc:	f000 f8a0 	bl	8008720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085e0:	f000 fbce 	bl	8008d80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085e6:	f000 f8ed 	bl	80087c4 <prvIsQueueEmpty>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f43f af6f 	beq.w	80084d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3730      	adds	r7, #48	@ 0x30
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10d      	bne.n	800863a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d14d      	bne.n	80086c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 ff9e 	bl	800956c <xTaskPriorityDisinherit>
 8008630:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	609a      	str	r2, [r3, #8]
 8008638:	e043      	b.n	80086c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d119      	bne.n	8008674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6858      	ldr	r0, [r3, #4]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	461a      	mov	r2, r3
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	f002 f818 	bl	800a680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008658:	441a      	add	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	429a      	cmp	r2, r3
 8008668:	d32b      	bcc.n	80086c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	e026      	b.n	80086c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	68d8      	ldr	r0, [r3, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867c:	461a      	mov	r2, r3
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	f001 fffe 	bl	800a680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868c:	425b      	negs	r3, r3
 800868e:	441a      	add	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d207      	bcs.n	80086b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a8:	425b      	negs	r3, r3
 80086aa:	441a      	add	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d105      	bne.n	80086c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	3b01      	subs	r3, #1
 80086c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086ca:	697b      	ldr	r3, [r7, #20]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d018      	beq.n	8008718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d303      	bcc.n	8008708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68d9      	ldr	r1, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008710:	461a      	mov	r2, r3
 8008712:	6838      	ldr	r0, [r7, #0]
 8008714:	f001 ffb4 	bl	800a680 <memcpy>
	}
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008728:	f001 fc6e 	bl	800a008 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008734:	e011      	b.n	800875a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d012      	beq.n	8008764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3324      	adds	r3, #36	@ 0x24
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fd34 	bl	80091b0 <xTaskRemoveFromEventList>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800874e:	f000 fe0d 	bl	800936c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	3b01      	subs	r3, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800875a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800875e:	2b00      	cmp	r3, #0
 8008760:	dce9      	bgt.n	8008736 <prvUnlockQueue+0x16>
 8008762:	e000      	b.n	8008766 <prvUnlockQueue+0x46>
					break;
 8008764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	22ff      	movs	r2, #255	@ 0xff
 800876a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800876e:	f001 fc7d 	bl	800a06c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008772:	f001 fc49 	bl	800a008 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800877c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800877e:	e011      	b.n	80087a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d012      	beq.n	80087ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3310      	adds	r3, #16
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fd0f 	bl	80091b0 <xTaskRemoveFromEventList>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008798:	f000 fde8 	bl	800936c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	3b01      	subs	r3, #1
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dce9      	bgt.n	8008780 <prvUnlockQueue+0x60>
 80087ac:	e000      	b.n	80087b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	22ff      	movs	r2, #255	@ 0xff
 80087b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087b8:	f001 fc58 	bl	800a06c <vPortExitCritical>
}
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087cc:	f001 fc1c 	bl	800a008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087d8:	2301      	movs	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	e001      	b.n	80087e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087e2:	f001 fc43 	bl	800a06c <vPortExitCritical>

	return xReturn;
 80087e6:	68fb      	ldr	r3, [r7, #12]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087f8:	f001 fc06 	bl	800a008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008804:	429a      	cmp	r2, r3
 8008806:	d102      	bne.n	800880e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	e001      	b.n	8008812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008812:	f001 fc2b 	bl	800a06c <vPortExitCritical>

	return xReturn;
 8008816:	68fb      	ldr	r3, [r7, #12]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	e014      	b.n	800885a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008830:	4a0f      	ldr	r2, [pc, #60]	@ (8008870 <vQueueAddToRegistry+0x50>)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800883c:	490c      	ldr	r1, [pc, #48]	@ (8008870 <vQueueAddToRegistry+0x50>)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008846:	4a0a      	ldr	r2, [pc, #40]	@ (8008870 <vQueueAddToRegistry+0x50>)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	4413      	add	r3, r2
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008852:	e006      	b.n	8008862 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b07      	cmp	r3, #7
 800885e:	d9e7      	bls.n	8008830 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	240008a4 	.word	0x240008a4

08008874 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008884:	f001 fbc0 	bl	800a008 <vPortEnterCritical>
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800888e:	b25b      	sxtb	r3, r3
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008894:	d103      	bne.n	800889e <vQueueWaitForMessageRestricted+0x2a>
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d103      	bne.n	80088b4 <vQueueWaitForMessageRestricted+0x40>
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b4:	f001 fbda 	bl	800a06c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d106      	bne.n	80088ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	3324      	adds	r3, #36	@ 0x24
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fc45 	bl	8009158 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f7ff ff26 	bl	8008720 <prvUnlockQueue>
	}
 80088d4:	bf00      	nop
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08e      	sub	sp, #56	@ 0x38
 80088e0:	af04      	add	r7, sp, #16
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <xTaskCreateStatic+0x2c>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	623b      	str	r3, [r7, #32]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10b      	bne.n	8008926 <xTaskCreateStatic+0x4a>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	61fb      	str	r3, [r7, #28]
}
 8008920:	bf00      	nop
 8008922:	bf00      	nop
 8008924:	e7fd      	b.n	8008922 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008926:	235c      	movs	r3, #92	@ 0x5c
 8008928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2b5c      	cmp	r3, #92	@ 0x5c
 800892e:	d00b      	beq.n	8008948 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	61bb      	str	r3, [r7, #24]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008948:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800894a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01e      	beq.n	800898e <xTaskCreateStatic+0xb2>
 8008950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008952:	2b00      	cmp	r3, #0
 8008954:	d01b      	beq.n	800898e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008958:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800895e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	2202      	movs	r2, #2
 8008964:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008968:	2300      	movs	r3, #0
 800896a:	9303      	str	r3, [sp, #12]
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	9302      	str	r3, [sp, #8]
 8008970:	f107 0314 	add.w	r3, r7, #20
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f850 	bl	8008a26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008986:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008988:	f000 f8de 	bl	8008b48 <prvAddNewTaskToReadyList>
 800898c:	e001      	b.n	8008992 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008992:	697b      	ldr	r3, [r7, #20]
	}
 8008994:	4618      	mov	r0, r3
 8008996:	3728      	adds	r7, #40	@ 0x28
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08c      	sub	sp, #48	@ 0x30
 80089a0:	af04      	add	r7, sp, #16
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4613      	mov	r3, r2
 80089aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 fc4b 	bl	800a24c <pvPortMalloc>
 80089b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00e      	beq.n	80089dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089be:	205c      	movs	r0, #92	@ 0x5c
 80089c0:	f001 fc44 	bl	800a24c <pvPortMalloc>
 80089c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80089d2:	e005      	b.n	80089e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089d4:	6978      	ldr	r0, [r7, #20]
 80089d6:	f001 fd07 	bl	800a3e8 <vPortFree>
 80089da:	e001      	b.n	80089e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d017      	beq.n	8008a16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	2300      	movs	r3, #0
 80089f2:	9303      	str	r3, [sp, #12]
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	9302      	str	r3, [sp, #8]
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f80e 	bl	8008a26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a0a:	69f8      	ldr	r0, [r7, #28]
 8008a0c:	f000 f89c 	bl	8008b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a10:	2301      	movs	r3, #1
 8008a12:	61bb      	str	r3, [r7, #24]
 8008a14:	e002      	b.n	8008a1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
	}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b088      	sub	sp, #32
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
 8008a32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a36:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	21a5      	movs	r1, #165	@ 0xa5
 8008a40:	f001 fdf2 	bl	800a628 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008a4e:	440b      	add	r3, r1
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	f023 0307 	bic.w	r3, r3, #7
 8008a5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	617b      	str	r3, [r7, #20]
}
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
 8008a7e:	e7fd      	b.n	8008a7c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01f      	beq.n	8008ac6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a86:	2300      	movs	r3, #0
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	e012      	b.n	8008ab2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	7819      	ldrb	r1, [r3, #0]
 8008a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	4413      	add	r3, r2
 8008a9a:	3334      	adds	r3, #52	@ 0x34
 8008a9c:	460a      	mov	r2, r1
 8008a9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d006      	beq.n	8008aba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	2b0f      	cmp	r3, #15
 8008ab6:	d9e9      	bls.n	8008a8c <prvInitialiseNewTask+0x66>
 8008ab8:	e000      	b.n	8008abc <prvInitialiseNewTask+0x96>
			{
				break;
 8008aba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ac4:	e003      	b.n	8008ace <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad0:	2b37      	cmp	r3, #55	@ 0x37
 8008ad2:	d901      	bls.n	8008ad8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ad4:	2337      	movs	r3, #55	@ 0x37
 8008ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008adc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aec:	3304      	adds	r3, #4
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff f966 	bl	8007dc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	3318      	adds	r3, #24
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff f961 	bl	8007dc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b12:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	2200      	movs	r2, #0
 8008b18:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	68f9      	ldr	r1, [r7, #12]
 8008b26:	69b8      	ldr	r0, [r7, #24]
 8008b28:	f001 f93e 	bl	8009da8 <pxPortInitialiseStack>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b3e:	bf00      	nop
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b50:	f001 fa5a 	bl	800a008 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b54:	4b2d      	ldr	r3, [pc, #180]	@ (8008c0c <prvAddNewTaskToReadyList+0xc4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8008c0c <prvAddNewTaskToReadyList+0xc4>)
 8008b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8008c10 <prvAddNewTaskToReadyList+0xc8>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b66:	4a2a      	ldr	r2, [pc, #168]	@ (8008c10 <prvAddNewTaskToReadyList+0xc8>)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b6c:	4b27      	ldr	r3, [pc, #156]	@ (8008c0c <prvAddNewTaskToReadyList+0xc4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d110      	bne.n	8008b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b74:	f000 fc1e 	bl	80093b4 <prvInitialiseTaskLists>
 8008b78:	e00d      	b.n	8008b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b7a:	4b26      	ldr	r3, [pc, #152]	@ (8008c14 <prvAddNewTaskToReadyList+0xcc>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d109      	bne.n	8008b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b82:	4b23      	ldr	r3, [pc, #140]	@ (8008c10 <prvAddNewTaskToReadyList+0xc8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d802      	bhi.n	8008b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b90:	4a1f      	ldr	r2, [pc, #124]	@ (8008c10 <prvAddNewTaskToReadyList+0xc8>)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b96:	4b20      	ldr	r3, [pc, #128]	@ (8008c18 <prvAddNewTaskToReadyList+0xd0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8008c18 <prvAddNewTaskToReadyList+0xd0>)
 8008b9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c18 <prvAddNewTaskToReadyList+0xd0>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bac:	4b1b      	ldr	r3, [pc, #108]	@ (8008c1c <prvAddNewTaskToReadyList+0xd4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d903      	bls.n	8008bbc <prvAddNewTaskToReadyList+0x74>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	4a18      	ldr	r2, [pc, #96]	@ (8008c1c <prvAddNewTaskToReadyList+0xd4>)
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4a15      	ldr	r2, [pc, #84]	@ (8008c20 <prvAddNewTaskToReadyList+0xd8>)
 8008bca:	441a      	add	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f7ff f901 	bl	8007dda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bd8:	f001 fa48 	bl	800a06c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c14 <prvAddNewTaskToReadyList+0xcc>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00e      	beq.n	8008c02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008be4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c10 <prvAddNewTaskToReadyList+0xc8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d207      	bcs.n	8008c02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c24 <prvAddNewTaskToReadyList+0xdc>)
 8008bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c02:	bf00      	nop
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	24000db8 	.word	0x24000db8
 8008c10:	240008e4 	.word	0x240008e4
 8008c14:	24000dc4 	.word	0x24000dc4
 8008c18:	24000dd4 	.word	0x24000dd4
 8008c1c:	24000dc0 	.word	0x24000dc0
 8008c20:	240008e8 	.word	0x240008e8
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d018      	beq.n	8008c6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c3a:	4b14      	ldr	r3, [pc, #80]	@ (8008c8c <vTaskDelay+0x64>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00b      	beq.n	8008c5a <vTaskDelay+0x32>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60bb      	str	r3, [r7, #8]
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	e7fd      	b.n	8008c56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c5a:	f000 f883 	bl	8008d64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c5e:	2100      	movs	r1, #0
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fcf3 	bl	800964c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c66:	f000 f88b 	bl	8008d80 <xTaskResumeAll>
 8008c6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d107      	bne.n	8008c82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c72:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <vTaskDelay+0x68>)
 8008c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c82:	bf00      	nop
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	24000de0 	.word	0x24000de0
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08a      	sub	sp, #40	@ 0x28
 8008c98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ca2:	463a      	mov	r2, r7
 8008ca4:	1d39      	adds	r1, r7, #4
 8008ca6:	f107 0308 	add.w	r3, r7, #8
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff f834 	bl	8007d18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	9202      	str	r2, [sp, #8]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	460a      	mov	r2, r1
 8008cc2:	4922      	ldr	r1, [pc, #136]	@ (8008d4c <vTaskStartScheduler+0xb8>)
 8008cc4:	4822      	ldr	r0, [pc, #136]	@ (8008d50 <vTaskStartScheduler+0xbc>)
 8008cc6:	f7ff fe09 	bl	80088dc <xTaskCreateStatic>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	4a21      	ldr	r2, [pc, #132]	@ (8008d54 <vTaskStartScheduler+0xc0>)
 8008cce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cd0:	4b20      	ldr	r3, [pc, #128]	@ (8008d54 <vTaskStartScheduler+0xc0>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	617b      	str	r3, [r7, #20]
 8008cdc:	e001      	b.n	8008ce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d102      	bne.n	8008cee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ce8:	f000 fd04 	bl	80096f4 <xTimerCreateTimerTask>
 8008cec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d116      	bne.n	8008d22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	613b      	str	r3, [r7, #16]
}
 8008d06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d08:	4b13      	ldr	r3, [pc, #76]	@ (8008d58 <vTaskStartScheduler+0xc4>)
 8008d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d10:	4b12      	ldr	r3, [pc, #72]	@ (8008d5c <vTaskStartScheduler+0xc8>)
 8008d12:	2201      	movs	r2, #1
 8008d14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d16:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <vTaskStartScheduler+0xcc>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d1c:	f001 f8d0 	bl	8009ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d20:	e00f      	b.n	8008d42 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d28:	d10b      	bne.n	8008d42 <vTaskStartScheduler+0xae>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	60fb      	str	r3, [r7, #12]
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	e7fd      	b.n	8008d3e <vTaskStartScheduler+0xaa>
}
 8008d42:	bf00      	nop
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	0800a6c4 	.word	0x0800a6c4
 8008d50:	08009385 	.word	0x08009385
 8008d54:	24000ddc 	.word	0x24000ddc
 8008d58:	24000dd8 	.word	0x24000dd8
 8008d5c:	24000dc4 	.word	0x24000dc4
 8008d60:	24000dbc 	.word	0x24000dbc

08008d64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d68:	4b04      	ldr	r3, [pc, #16]	@ (8008d7c <vTaskSuspendAll+0x18>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	4a03      	ldr	r2, [pc, #12]	@ (8008d7c <vTaskSuspendAll+0x18>)
 8008d70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d72:	bf00      	nop
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	24000de0 	.word	0x24000de0

08008d80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d8e:	4b42      	ldr	r3, [pc, #264]	@ (8008e98 <xTaskResumeAll+0x118>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10b      	bne.n	8008dae <xTaskResumeAll+0x2e>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	603b      	str	r3, [r7, #0]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dae:	f001 f92b 	bl	800a008 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008db2:	4b39      	ldr	r3, [pc, #228]	@ (8008e98 <xTaskResumeAll+0x118>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	4a37      	ldr	r2, [pc, #220]	@ (8008e98 <xTaskResumeAll+0x118>)
 8008dba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dbc:	4b36      	ldr	r3, [pc, #216]	@ (8008e98 <xTaskResumeAll+0x118>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d162      	bne.n	8008e8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dc4:	4b35      	ldr	r3, [pc, #212]	@ (8008e9c <xTaskResumeAll+0x11c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d05e      	beq.n	8008e8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dcc:	e02f      	b.n	8008e2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dce:	4b34      	ldr	r3, [pc, #208]	@ (8008ea0 <xTaskResumeAll+0x120>)
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3318      	adds	r3, #24
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff f85a 	bl	8007e94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3304      	adds	r3, #4
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff f855 	bl	8007e94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dee:	4b2d      	ldr	r3, [pc, #180]	@ (8008ea4 <xTaskResumeAll+0x124>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d903      	bls.n	8008dfe <xTaskResumeAll+0x7e>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea4 <xTaskResumeAll+0x124>)
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4a27      	ldr	r2, [pc, #156]	@ (8008ea8 <xTaskResumeAll+0x128>)
 8008e0c:	441a      	add	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4619      	mov	r1, r3
 8008e14:	4610      	mov	r0, r2
 8008e16:	f7fe ffe0 	bl	8007dda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e1e:	4b23      	ldr	r3, [pc, #140]	@ (8008eac <xTaskResumeAll+0x12c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d302      	bcc.n	8008e2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e28:	4b21      	ldr	r3, [pc, #132]	@ (8008eb0 <xTaskResumeAll+0x130>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea0 <xTaskResumeAll+0x120>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1cb      	bne.n	8008dce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e3c:	f000 fb58 	bl	80094f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e40:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb4 <xTaskResumeAll+0x134>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d010      	beq.n	8008e6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e4c:	f000 f846 	bl	8008edc <xTaskIncrementTick>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e56:	4b16      	ldr	r3, [pc, #88]	@ (8008eb0 <xTaskResumeAll+0x130>)
 8008e58:	2201      	movs	r2, #1
 8008e5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1f1      	bne.n	8008e4c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e68:	4b12      	ldr	r3, [pc, #72]	@ (8008eb4 <xTaskResumeAll+0x134>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e6e:	4b10      	ldr	r3, [pc, #64]	@ (8008eb0 <xTaskResumeAll+0x130>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d009      	beq.n	8008e8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e76:	2301      	movs	r3, #1
 8008e78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <xTaskResumeAll+0x138>)
 8008e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e8a:	f001 f8ef 	bl	800a06c <vPortExitCritical>

	return xAlreadyYielded;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	24000de0 	.word	0x24000de0
 8008e9c:	24000db8 	.word	0x24000db8
 8008ea0:	24000d78 	.word	0x24000d78
 8008ea4:	24000dc0 	.word	0x24000dc0
 8008ea8:	240008e8 	.word	0x240008e8
 8008eac:	240008e4 	.word	0x240008e4
 8008eb0:	24000dcc 	.word	0x24000dcc
 8008eb4:	24000dc8 	.word	0x24000dc8
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ec2:	4b05      	ldr	r3, [pc, #20]	@ (8008ed8 <xTaskGetTickCount+0x1c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ec8:	687b      	ldr	r3, [r7, #4]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	24000dbc 	.word	0x24000dbc

08008edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8009024 <xTaskIncrementTick+0x148>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f040 8090 	bne.w	8009010 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8009028 <xTaskIncrementTick+0x14c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8009028 <xTaskIncrementTick+0x14c>)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d121      	bne.n	8008f48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f04:	4b49      	ldr	r3, [pc, #292]	@ (800902c <xTaskIncrementTick+0x150>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	603b      	str	r3, [r7, #0]
}
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop
 8008f24:	e7fd      	b.n	8008f22 <xTaskIncrementTick+0x46>
 8008f26:	4b41      	ldr	r3, [pc, #260]	@ (800902c <xTaskIncrementTick+0x150>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	4b40      	ldr	r3, [pc, #256]	@ (8009030 <xTaskIncrementTick+0x154>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a3e      	ldr	r2, [pc, #248]	@ (800902c <xTaskIncrementTick+0x150>)
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	4a3e      	ldr	r2, [pc, #248]	@ (8009030 <xTaskIncrementTick+0x154>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8009034 <xTaskIncrementTick+0x158>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	4a3c      	ldr	r2, [pc, #240]	@ (8009034 <xTaskIncrementTick+0x158>)
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	f000 fad4 	bl	80094f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f48:	4b3b      	ldr	r3, [pc, #236]	@ (8009038 <xTaskIncrementTick+0x15c>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d349      	bcc.n	8008fe6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f52:	4b36      	ldr	r3, [pc, #216]	@ (800902c <xTaskIncrementTick+0x150>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d104      	bne.n	8008f66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5c:	4b36      	ldr	r3, [pc, #216]	@ (8009038 <xTaskIncrementTick+0x15c>)
 8008f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f62:	601a      	str	r2, [r3, #0]
					break;
 8008f64:	e03f      	b.n	8008fe6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f66:	4b31      	ldr	r3, [pc, #196]	@ (800902c <xTaskIncrementTick+0x150>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d203      	bcs.n	8008f86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8009038 <xTaskIncrementTick+0x15c>)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f84:	e02f      	b.n	8008fe6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe ff82 	bl	8007e94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe ff79 	bl	8007e94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa6:	4b25      	ldr	r3, [pc, #148]	@ (800903c <xTaskIncrementTick+0x160>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d903      	bls.n	8008fb6 <xTaskIncrementTick+0xda>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb2:	4a22      	ldr	r2, [pc, #136]	@ (800903c <xTaskIncrementTick+0x160>)
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fba:	4613      	mov	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8009040 <xTaskIncrementTick+0x164>)
 8008fc4:	441a      	add	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4619      	mov	r1, r3
 8008fcc:	4610      	mov	r0, r2
 8008fce:	f7fe ff04 	bl	8007dda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8009044 <xTaskIncrementTick+0x168>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d3b8      	bcc.n	8008f52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fe4:	e7b5      	b.n	8008f52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fe6:	4b17      	ldr	r3, [pc, #92]	@ (8009044 <xTaskIncrementTick+0x168>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fec:	4914      	ldr	r1, [pc, #80]	@ (8009040 <xTaskIncrementTick+0x164>)
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	440b      	add	r3, r1
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d901      	bls.n	8009002 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008ffe:	2301      	movs	r3, #1
 8009000:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009002:	4b11      	ldr	r3, [pc, #68]	@ (8009048 <xTaskIncrementTick+0x16c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d007      	beq.n	800901a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800900a:	2301      	movs	r3, #1
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	e004      	b.n	800901a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009010:	4b0e      	ldr	r3, [pc, #56]	@ (800904c <xTaskIncrementTick+0x170>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3301      	adds	r3, #1
 8009016:	4a0d      	ldr	r2, [pc, #52]	@ (800904c <xTaskIncrementTick+0x170>)
 8009018:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800901a:	697b      	ldr	r3, [r7, #20]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	24000de0 	.word	0x24000de0
 8009028:	24000dbc 	.word	0x24000dbc
 800902c:	24000d70 	.word	0x24000d70
 8009030:	24000d74 	.word	0x24000d74
 8009034:	24000dd0 	.word	0x24000dd0
 8009038:	24000dd8 	.word	0x24000dd8
 800903c:	24000dc0 	.word	0x24000dc0
 8009040:	240008e8 	.word	0x240008e8
 8009044:	240008e4 	.word	0x240008e4
 8009048:	24000dcc 	.word	0x24000dcc
 800904c:	24000dc8 	.word	0x24000dc8

08009050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009056:	4b28      	ldr	r3, [pc, #160]	@ (80090f8 <vTaskSwitchContext+0xa8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800905e:	4b27      	ldr	r3, [pc, #156]	@ (80090fc <vTaskSwitchContext+0xac>)
 8009060:	2201      	movs	r2, #1
 8009062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009064:	e042      	b.n	80090ec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009066:	4b25      	ldr	r3, [pc, #148]	@ (80090fc <vTaskSwitchContext+0xac>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906c:	4b24      	ldr	r3, [pc, #144]	@ (8009100 <vTaskSwitchContext+0xb0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	e011      	b.n	8009098 <vTaskSwitchContext+0x48>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10b      	bne.n	8009092 <vTaskSwitchContext+0x42>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	607b      	str	r3, [r7, #4]
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	e7fd      	b.n	800908e <vTaskSwitchContext+0x3e>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3b01      	subs	r3, #1
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	491a      	ldr	r1, [pc, #104]	@ (8009104 <vTaskSwitchContext+0xb4>)
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0e3      	beq.n	8009074 <vTaskSwitchContext+0x24>
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4a13      	ldr	r2, [pc, #76]	@ (8009104 <vTaskSwitchContext+0xb4>)
 80090b8:	4413      	add	r3, r2
 80090ba:	60bb      	str	r3, [r7, #8]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	605a      	str	r2, [r3, #4]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	3308      	adds	r3, #8
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d104      	bne.n	80090dc <vTaskSwitchContext+0x8c>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	605a      	str	r2, [r3, #4]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	4a09      	ldr	r2, [pc, #36]	@ (8009108 <vTaskSwitchContext+0xb8>)
 80090e4:	6013      	str	r3, [r2, #0]
 80090e6:	4a06      	ldr	r2, [pc, #24]	@ (8009100 <vTaskSwitchContext+0xb0>)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6013      	str	r3, [r2, #0]
}
 80090ec:	bf00      	nop
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	24000de0 	.word	0x24000de0
 80090fc:	24000dcc 	.word	0x24000dcc
 8009100:	24000dc0 	.word	0x24000dc0
 8009104:	240008e8 	.word	0x240008e8
 8009108:	240008e4 	.word	0x240008e4

0800910c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10b      	bne.n	8009134 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60fb      	str	r3, [r7, #12]
}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	e7fd      	b.n	8009130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009134:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <vTaskPlaceOnEventList+0x48>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3318      	adds	r3, #24
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7fe fe70 	bl	8007e22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009142:	2101      	movs	r1, #1
 8009144:	6838      	ldr	r0, [r7, #0]
 8009146:	f000 fa81 	bl	800964c <prvAddCurrentTaskToDelayedList>
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	240008e4 	.word	0x240008e4

08009158 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10b      	bne.n	8009182 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	617b      	str	r3, [r7, #20]
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	e7fd      	b.n	800917e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009182:	4b0a      	ldr	r3, [pc, #40]	@ (80091ac <vTaskPlaceOnEventListRestricted+0x54>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3318      	adds	r3, #24
 8009188:	4619      	mov	r1, r3
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7fe fe25 	bl	8007dda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009196:	f04f 33ff 	mov.w	r3, #4294967295
 800919a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	68b8      	ldr	r0, [r7, #8]
 80091a0:	f000 fa54 	bl	800964c <prvAddCurrentTaskToDelayedList>
	}
 80091a4:	bf00      	nop
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	240008e4 	.word	0x240008e4

080091b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10b      	bne.n	80091de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	60fb      	str	r3, [r7, #12]
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	e7fd      	b.n	80091da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	3318      	adds	r3, #24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fe56 	bl	8007e94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009260 <xTaskRemoveFromEventList+0xb0>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d11d      	bne.n	800922c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe fe4d 	bl	8007e94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fe:	4b19      	ldr	r3, [pc, #100]	@ (8009264 <xTaskRemoveFromEventList+0xb4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d903      	bls.n	800920e <xTaskRemoveFromEventList+0x5e>
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920a:	4a16      	ldr	r2, [pc, #88]	@ (8009264 <xTaskRemoveFromEventList+0xb4>)
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4a13      	ldr	r2, [pc, #76]	@ (8009268 <xTaskRemoveFromEventList+0xb8>)
 800921c:	441a      	add	r2, r3
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3304      	adds	r3, #4
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f7fe fdd8 	bl	8007dda <vListInsertEnd>
 800922a:	e005      	b.n	8009238 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3318      	adds	r3, #24
 8009230:	4619      	mov	r1, r3
 8009232:	480e      	ldr	r0, [pc, #56]	@ (800926c <xTaskRemoveFromEventList+0xbc>)
 8009234:	f7fe fdd1 	bl	8007dda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800923c:	4b0c      	ldr	r3, [pc, #48]	@ (8009270 <xTaskRemoveFromEventList+0xc0>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009242:	429a      	cmp	r2, r3
 8009244:	d905      	bls.n	8009252 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009246:	2301      	movs	r3, #1
 8009248:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800924a:	4b0a      	ldr	r3, [pc, #40]	@ (8009274 <xTaskRemoveFromEventList+0xc4>)
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e001      	b.n	8009256 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009256:	697b      	ldr	r3, [r7, #20]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	24000de0 	.word	0x24000de0
 8009264:	24000dc0 	.word	0x24000dc0
 8009268:	240008e8 	.word	0x240008e8
 800926c:	24000d78 	.word	0x24000d78
 8009270:	240008e4 	.word	0x240008e4
 8009274:	24000dcc 	.word	0x24000dcc

08009278 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009280:	4b06      	ldr	r3, [pc, #24]	@ (800929c <vTaskInternalSetTimeOutState+0x24>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009288:	4b05      	ldr	r3, [pc, #20]	@ (80092a0 <vTaskInternalSetTimeOutState+0x28>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	605a      	str	r2, [r3, #4]
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	24000dd0 	.word	0x24000dd0
 80092a0:	24000dbc 	.word	0x24000dbc

080092a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10b      	bne.n	80092cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	613b      	str	r3, [r7, #16]
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	e7fd      	b.n	80092c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10b      	bne.n	80092ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	60fb      	str	r3, [r7, #12]
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	e7fd      	b.n	80092e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092ea:	f000 fe8d 	bl	800a008 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009364 <xTaskCheckForTimeOut+0xc0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009306:	d102      	bne.n	800930e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
 800930c:	e023      	b.n	8009356 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b15      	ldr	r3, [pc, #84]	@ (8009368 <xTaskCheckForTimeOut+0xc4>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d007      	beq.n	800932a <xTaskCheckForTimeOut+0x86>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	429a      	cmp	r2, r3
 8009322:	d302      	bcc.n	800932a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	e015      	b.n	8009356 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	429a      	cmp	r2, r3
 8009332:	d20b      	bcs.n	800934c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	1ad2      	subs	r2, r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff ff99 	bl	8009278 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009346:	2300      	movs	r3, #0
 8009348:	61fb      	str	r3, [r7, #28]
 800934a:	e004      	b.n	8009356 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009356:	f000 fe89 	bl	800a06c <vPortExitCritical>

	return xReturn;
 800935a:	69fb      	ldr	r3, [r7, #28]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3720      	adds	r7, #32
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	24000dbc 	.word	0x24000dbc
 8009368:	24000dd0 	.word	0x24000dd0

0800936c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009370:	4b03      	ldr	r3, [pc, #12]	@ (8009380 <vTaskMissedYield+0x14>)
 8009372:	2201      	movs	r2, #1
 8009374:	601a      	str	r2, [r3, #0]
}
 8009376:	bf00      	nop
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	24000dcc 	.word	0x24000dcc

08009384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800938c:	f000 f852 	bl	8009434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <prvIdleTask+0x28>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d9f9      	bls.n	800938c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009398:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <prvIdleTask+0x2c>)
 800939a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093a8:	e7f0      	b.n	800938c <prvIdleTask+0x8>
 80093aa:	bf00      	nop
 80093ac:	240008e8 	.word	0x240008e8
 80093b0:	e000ed04 	.word	0xe000ed04

080093b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093ba:	2300      	movs	r3, #0
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	e00c      	b.n	80093da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4a12      	ldr	r2, [pc, #72]	@ (8009414 <prvInitialiseTaskLists+0x60>)
 80093cc:	4413      	add	r3, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fcd6 	bl	8007d80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3301      	adds	r3, #1
 80093d8:	607b      	str	r3, [r7, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b37      	cmp	r3, #55	@ 0x37
 80093de:	d9ef      	bls.n	80093c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093e0:	480d      	ldr	r0, [pc, #52]	@ (8009418 <prvInitialiseTaskLists+0x64>)
 80093e2:	f7fe fccd 	bl	8007d80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093e6:	480d      	ldr	r0, [pc, #52]	@ (800941c <prvInitialiseTaskLists+0x68>)
 80093e8:	f7fe fcca 	bl	8007d80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093ec:	480c      	ldr	r0, [pc, #48]	@ (8009420 <prvInitialiseTaskLists+0x6c>)
 80093ee:	f7fe fcc7 	bl	8007d80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093f2:	480c      	ldr	r0, [pc, #48]	@ (8009424 <prvInitialiseTaskLists+0x70>)
 80093f4:	f7fe fcc4 	bl	8007d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093f8:	480b      	ldr	r0, [pc, #44]	@ (8009428 <prvInitialiseTaskLists+0x74>)
 80093fa:	f7fe fcc1 	bl	8007d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093fe:	4b0b      	ldr	r3, [pc, #44]	@ (800942c <prvInitialiseTaskLists+0x78>)
 8009400:	4a05      	ldr	r2, [pc, #20]	@ (8009418 <prvInitialiseTaskLists+0x64>)
 8009402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009404:	4b0a      	ldr	r3, [pc, #40]	@ (8009430 <prvInitialiseTaskLists+0x7c>)
 8009406:	4a05      	ldr	r2, [pc, #20]	@ (800941c <prvInitialiseTaskLists+0x68>)
 8009408:	601a      	str	r2, [r3, #0]
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	240008e8 	.word	0x240008e8
 8009418:	24000d48 	.word	0x24000d48
 800941c:	24000d5c 	.word	0x24000d5c
 8009420:	24000d78 	.word	0x24000d78
 8009424:	24000d8c 	.word	0x24000d8c
 8009428:	24000da4 	.word	0x24000da4
 800942c:	24000d70 	.word	0x24000d70
 8009430:	24000d74 	.word	0x24000d74

08009434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800943a:	e019      	b.n	8009470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800943c:	f000 fde4 	bl	800a008 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009440:	4b10      	ldr	r3, [pc, #64]	@ (8009484 <prvCheckTasksWaitingTermination+0x50>)
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe fd21 	bl	8007e94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009452:	4b0d      	ldr	r3, [pc, #52]	@ (8009488 <prvCheckTasksWaitingTermination+0x54>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3b01      	subs	r3, #1
 8009458:	4a0b      	ldr	r2, [pc, #44]	@ (8009488 <prvCheckTasksWaitingTermination+0x54>)
 800945a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800945c:	4b0b      	ldr	r3, [pc, #44]	@ (800948c <prvCheckTasksWaitingTermination+0x58>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3b01      	subs	r3, #1
 8009462:	4a0a      	ldr	r2, [pc, #40]	@ (800948c <prvCheckTasksWaitingTermination+0x58>)
 8009464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009466:	f000 fe01 	bl	800a06c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f810 	bl	8009490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009470:	4b06      	ldr	r3, [pc, #24]	@ (800948c <prvCheckTasksWaitingTermination+0x58>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e1      	bne.n	800943c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	24000d8c 	.word	0x24000d8c
 8009488:	24000db8 	.word	0x24000db8
 800948c:	24000da0 	.word	0x24000da0

08009490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d108      	bne.n	80094b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 ff9e 	bl	800a3e8 <vPortFree>
				vPortFree( pxTCB );
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 ff9b 	bl	800a3e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094b2:	e019      	b.n	80094e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d103      	bne.n	80094c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 ff92 	bl	800a3e8 <vPortFree>
	}
 80094c4:	e010      	b.n	80094e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d00b      	beq.n	80094e8 <prvDeleteTCB+0x58>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	60fb      	str	r3, [r7, #12]
}
 80094e2:	bf00      	nop
 80094e4:	bf00      	nop
 80094e6:	e7fd      	b.n	80094e4 <prvDeleteTCB+0x54>
	}
 80094e8:	bf00      	nop
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009528 <prvResetNextTaskUnblockTime+0x38>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009500:	4b0a      	ldr	r3, [pc, #40]	@ (800952c <prvResetNextTaskUnblockTime+0x3c>)
 8009502:	f04f 32ff 	mov.w	r2, #4294967295
 8009506:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009508:	e008      	b.n	800951c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800950a:	4b07      	ldr	r3, [pc, #28]	@ (8009528 <prvResetNextTaskUnblockTime+0x38>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	4a04      	ldr	r2, [pc, #16]	@ (800952c <prvResetNextTaskUnblockTime+0x3c>)
 800951a:	6013      	str	r3, [r2, #0]
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	24000d70 	.word	0x24000d70
 800952c:	24000dd8 	.word	0x24000dd8

08009530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009536:	4b0b      	ldr	r3, [pc, #44]	@ (8009564 <xTaskGetSchedulerState+0x34>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d102      	bne.n	8009544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800953e:	2301      	movs	r3, #1
 8009540:	607b      	str	r3, [r7, #4]
 8009542:	e008      	b.n	8009556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009544:	4b08      	ldr	r3, [pc, #32]	@ (8009568 <xTaskGetSchedulerState+0x38>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800954c:	2302      	movs	r3, #2
 800954e:	607b      	str	r3, [r7, #4]
 8009550:	e001      	b.n	8009556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009556:	687b      	ldr	r3, [r7, #4]
	}
 8009558:	4618      	mov	r0, r3
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	24000dc4 	.word	0x24000dc4
 8009568:	24000de0 	.word	0x24000de0

0800956c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d058      	beq.n	8009634 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009582:	4b2f      	ldr	r3, [pc, #188]	@ (8009640 <xTaskPriorityDisinherit+0xd4>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	429a      	cmp	r2, r3
 800958a:	d00b      	beq.n	80095a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60fb      	str	r3, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	bf00      	nop
 80095a2:	e7fd      	b.n	80095a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	60bb      	str	r3, [r7, #8]
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c8:	1e5a      	subs	r2, r3, #1
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d02c      	beq.n	8009634 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d128      	bne.n	8009634 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fc54 	bl	8007e94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009604:	4b0f      	ldr	r3, [pc, #60]	@ (8009644 <xTaskPriorityDisinherit+0xd8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d903      	bls.n	8009614 <xTaskPriorityDisinherit+0xa8>
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009610:	4a0c      	ldr	r2, [pc, #48]	@ (8009644 <xTaskPriorityDisinherit+0xd8>)
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4a09      	ldr	r2, [pc, #36]	@ (8009648 <xTaskPriorityDisinherit+0xdc>)
 8009622:	441a      	add	r2, r3
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	3304      	adds	r3, #4
 8009628:	4619      	mov	r1, r3
 800962a:	4610      	mov	r0, r2
 800962c:	f7fe fbd5 	bl	8007dda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009630:	2301      	movs	r3, #1
 8009632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009634:	697b      	ldr	r3, [r7, #20]
	}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	240008e4 	.word	0x240008e4
 8009644:	24000dc0 	.word	0x24000dc0
 8009648:	240008e8 	.word	0x240008e8

0800964c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009656:	4b21      	ldr	r3, [pc, #132]	@ (80096dc <prvAddCurrentTaskToDelayedList+0x90>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800965c:	4b20      	ldr	r3, [pc, #128]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3304      	adds	r3, #4
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fc16 	bl	8007e94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966e:	d10a      	bne.n	8009686 <prvAddCurrentTaskToDelayedList+0x3a>
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d007      	beq.n	8009686 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009676:	4b1a      	ldr	r3, [pc, #104]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3304      	adds	r3, #4
 800967c:	4619      	mov	r1, r3
 800967e:	4819      	ldr	r0, [pc, #100]	@ (80096e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009680:	f7fe fbab 	bl	8007dda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009684:	e026      	b.n	80096d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4413      	add	r3, r2
 800968c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800968e:	4b14      	ldr	r3, [pc, #80]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	429a      	cmp	r2, r3
 800969c:	d209      	bcs.n	80096b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800969e:	4b12      	ldr	r3, [pc, #72]	@ (80096e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4b0f      	ldr	r3, [pc, #60]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f7fe fbb9 	bl	8007e22 <vListInsert>
}
 80096b0:	e010      	b.n	80096d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096b2:	4b0e      	ldr	r3, [pc, #56]	@ (80096ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	4b0a      	ldr	r3, [pc, #40]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7fe fbaf 	bl	8007e22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096c4:	4b0a      	ldr	r3, [pc, #40]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d202      	bcs.n	80096d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096ce:	4a08      	ldr	r2, [pc, #32]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	6013      	str	r3, [r2, #0]
}
 80096d4:	bf00      	nop
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	24000dbc 	.word	0x24000dbc
 80096e0:	240008e4 	.word	0x240008e4
 80096e4:	24000da4 	.word	0x24000da4
 80096e8:	24000d74 	.word	0x24000d74
 80096ec:	24000d70 	.word	0x24000d70
 80096f0:	24000dd8 	.word	0x24000dd8

080096f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	@ 0x28
 80096f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096fe:	f000 fb13 	bl	8009d28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009702:	4b1d      	ldr	r3, [pc, #116]	@ (8009778 <xTimerCreateTimerTask+0x84>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d021      	beq.n	800974e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009712:	1d3a      	adds	r2, r7, #4
 8009714:	f107 0108 	add.w	r1, r7, #8
 8009718:	f107 030c 	add.w	r3, r7, #12
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fb15 	bl	8007d4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	9202      	str	r2, [sp, #8]
 800972a:	9301      	str	r3, [sp, #4]
 800972c:	2302      	movs	r3, #2
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	2300      	movs	r3, #0
 8009732:	460a      	mov	r2, r1
 8009734:	4911      	ldr	r1, [pc, #68]	@ (800977c <xTimerCreateTimerTask+0x88>)
 8009736:	4812      	ldr	r0, [pc, #72]	@ (8009780 <xTimerCreateTimerTask+0x8c>)
 8009738:	f7ff f8d0 	bl	80088dc <xTaskCreateStatic>
 800973c:	4603      	mov	r3, r0
 800973e:	4a11      	ldr	r2, [pc, #68]	@ (8009784 <xTimerCreateTimerTask+0x90>)
 8009740:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009742:	4b10      	ldr	r3, [pc, #64]	@ (8009784 <xTimerCreateTimerTask+0x90>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800974a:	2301      	movs	r3, #1
 800974c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10b      	bne.n	800976c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	613b      	str	r3, [r7, #16]
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800976c:	697b      	ldr	r3, [r7, #20]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	24000e14 	.word	0x24000e14
 800977c:	0800a6cc 	.word	0x0800a6cc
 8009780:	080098c1 	.word	0x080098c1
 8009784:	24000e18 	.word	0x24000e18

08009788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08a      	sub	sp, #40	@ 0x28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009796:	2300      	movs	r3, #0
 8009798:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10b      	bne.n	80097b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	623b      	str	r3, [r7, #32]
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097b8:	4b19      	ldr	r3, [pc, #100]	@ (8009820 <xTimerGenericCommand+0x98>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d02a      	beq.n	8009816 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b05      	cmp	r3, #5
 80097d0:	dc18      	bgt.n	8009804 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097d2:	f7ff fead 	bl	8009530 <xTaskGetSchedulerState>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d109      	bne.n	80097f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097dc:	4b10      	ldr	r3, [pc, #64]	@ (8009820 <xTimerGenericCommand+0x98>)
 80097de:	6818      	ldr	r0, [r3, #0]
 80097e0:	f107 0110 	add.w	r1, r7, #16
 80097e4:	2300      	movs	r3, #0
 80097e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097e8:	f7fe fc88 	bl	80080fc <xQueueGenericSend>
 80097ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80097ee:	e012      	b.n	8009816 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <xTimerGenericCommand+0x98>)
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	f107 0110 	add.w	r1, r7, #16
 80097f8:	2300      	movs	r3, #0
 80097fa:	2200      	movs	r2, #0
 80097fc:	f7fe fc7e 	bl	80080fc <xQueueGenericSend>
 8009800:	6278      	str	r0, [r7, #36]	@ 0x24
 8009802:	e008      	b.n	8009816 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009804:	4b06      	ldr	r3, [pc, #24]	@ (8009820 <xTimerGenericCommand+0x98>)
 8009806:	6818      	ldr	r0, [r3, #0]
 8009808:	f107 0110 	add.w	r1, r7, #16
 800980c:	2300      	movs	r3, #0
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	f7fe fd76 	bl	8008300 <xQueueGenericSendFromISR>
 8009814:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009818:	4618      	mov	r0, r3
 800981a:	3728      	adds	r7, #40	@ 0x28
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	24000e14 	.word	0x24000e14

08009824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af02      	add	r7, sp, #8
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982e:	4b23      	ldr	r3, [pc, #140]	@ (80098bc <prvProcessExpiredTimer+0x98>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	3304      	adds	r3, #4
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe fb29 	bl	8007e94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d023      	beq.n	8009898 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	699a      	ldr	r2, [r3, #24]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	18d1      	adds	r1, r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	6978      	ldr	r0, [r7, #20]
 800985e:	f000 f8d5 	bl	8009a0c <prvInsertTimerInActiveList>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d020      	beq.n	80098aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009868:	2300      	movs	r3, #0
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	2300      	movs	r3, #0
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	2100      	movs	r1, #0
 8009872:	6978      	ldr	r0, [r7, #20]
 8009874:	f7ff ff88 	bl	8009788 <xTimerGenericCommand>
 8009878:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d114      	bne.n	80098aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60fb      	str	r3, [r7, #12]
}
 8009892:	bf00      	nop
 8009894:	bf00      	nop
 8009896:	e7fd      	b.n	8009894 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800989e:	f023 0301 	bic.w	r3, r3, #1
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	6978      	ldr	r0, [r7, #20]
 80098b0:	4798      	blx	r3
}
 80098b2:	bf00      	nop
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	24000e0c 	.word	0x24000e0c

080098c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098c8:	f107 0308 	add.w	r3, r7, #8
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 f859 	bl	8009984 <prvGetNextExpireTime>
 80098d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	4619      	mov	r1, r3
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 f805 	bl	80098e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098de:	f000 f8d7 	bl	8009a90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098e2:	bf00      	nop
 80098e4:	e7f0      	b.n	80098c8 <prvTimerTask+0x8>
	...

080098e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098f2:	f7ff fa37 	bl	8008d64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098f6:	f107 0308 	add.w	r3, r7, #8
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f866 	bl	80099cc <prvSampleTimeNow>
 8009900:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d130      	bne.n	800996a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <prvProcessTimerOrBlockTask+0x3c>
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	429a      	cmp	r2, r3
 8009914:	d806      	bhi.n	8009924 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009916:	f7ff fa33 	bl	8008d80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800991a:	68f9      	ldr	r1, [r7, #12]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff ff81 	bl	8009824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009922:	e024      	b.n	800996e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d008      	beq.n	800993c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800992a:	4b13      	ldr	r3, [pc, #76]	@ (8009978 <prvProcessTimerOrBlockTask+0x90>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <prvProcessTimerOrBlockTask+0x50>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <prvProcessTimerOrBlockTask+0x52>
 8009938:	2300      	movs	r3, #0
 800993a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800993c:	4b0f      	ldr	r3, [pc, #60]	@ (800997c <prvProcessTimerOrBlockTask+0x94>)
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	4619      	mov	r1, r3
 800994a:	f7fe ff93 	bl	8008874 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800994e:	f7ff fa17 	bl	8008d80 <xTaskResumeAll>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009958:	4b09      	ldr	r3, [pc, #36]	@ (8009980 <prvProcessTimerOrBlockTask+0x98>)
 800995a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	f3bf 8f6f 	isb	sy
}
 8009968:	e001      	b.n	800996e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800996a:	f7ff fa09 	bl	8008d80 <xTaskResumeAll>
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	24000e10 	.word	0x24000e10
 800997c:	24000e14 	.word	0x24000e14
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800998c:	4b0e      	ldr	r3, [pc, #56]	@ (80099c8 <prvGetNextExpireTime+0x44>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <prvGetNextExpireTime+0x16>
 8009996:	2201      	movs	r2, #1
 8009998:	e000      	b.n	800999c <prvGetNextExpireTime+0x18>
 800999a:	2200      	movs	r2, #0
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d105      	bne.n	80099b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099a8:	4b07      	ldr	r3, [pc, #28]	@ (80099c8 <prvGetNextExpireTime+0x44>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	e001      	b.n	80099b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099b8:	68fb      	ldr	r3, [r7, #12]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	24000e0c 	.word	0x24000e0c

080099cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099d4:	f7ff fa72 	bl	8008ebc <xTaskGetTickCount>
 80099d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099da:	4b0b      	ldr	r3, [pc, #44]	@ (8009a08 <prvSampleTimeNow+0x3c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d205      	bcs.n	80099f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099e4:	f000 f93a 	bl	8009c5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	e002      	b.n	80099f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099f6:	4a04      	ldr	r2, [pc, #16]	@ (8009a08 <prvSampleTimeNow+0x3c>)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099fc:	68fb      	ldr	r3, [r7, #12]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	24000e1c 	.word	0x24000e1c

08009a0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d812      	bhi.n	8009a58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	1ad2      	subs	r2, r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d302      	bcc.n	8009a46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	e01b      	b.n	8009a7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a46:	4b10      	ldr	r3, [pc, #64]	@ (8009a88 <prvInsertTimerInActiveList+0x7c>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4610      	mov	r0, r2
 8009a52:	f7fe f9e6 	bl	8007e22 <vListInsert>
 8009a56:	e012      	b.n	8009a7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d206      	bcs.n	8009a6e <prvInsertTimerInActiveList+0x62>
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d302      	bcc.n	8009a6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
 8009a6c:	e007      	b.n	8009a7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a6e:	4b07      	ldr	r3, [pc, #28]	@ (8009a8c <prvInsertTimerInActiveList+0x80>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3304      	adds	r3, #4
 8009a76:	4619      	mov	r1, r3
 8009a78:	4610      	mov	r0, r2
 8009a7a:	f7fe f9d2 	bl	8007e22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a7e:	697b      	ldr	r3, [r7, #20]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	24000e10 	.word	0x24000e10
 8009a8c:	24000e0c 	.word	0x24000e0c

08009a90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08e      	sub	sp, #56	@ 0x38
 8009a94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a96:	e0ce      	b.n	8009c36 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	da19      	bge.n	8009ad2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a9e:	1d3b      	adds	r3, r7, #4
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10b      	bne.n	8009ac2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	61fb      	str	r3, [r7, #28]
}
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	e7fd      	b.n	8009abe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ac8:	6850      	ldr	r0, [r2, #4]
 8009aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009acc:	6892      	ldr	r2, [r2, #8]
 8009ace:	4611      	mov	r1, r2
 8009ad0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f2c0 80ae 	blt.w	8009c36 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe f9d2 	bl	8007e94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009af0:	463b      	mov	r3, r7
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff ff6a 	bl	80099cc <prvSampleTimeNow>
 8009af8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b09      	cmp	r3, #9
 8009afe:	f200 8097 	bhi.w	8009c30 <prvProcessReceivedCommands+0x1a0>
 8009b02:	a201      	add	r2, pc, #4	@ (adr r2, 8009b08 <prvProcessReceivedCommands+0x78>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b31 	.word	0x08009b31
 8009b0c:	08009b31 	.word	0x08009b31
 8009b10:	08009b31 	.word	0x08009b31
 8009b14:	08009ba7 	.word	0x08009ba7
 8009b18:	08009bbb 	.word	0x08009bbb
 8009b1c:	08009c07 	.word	0x08009c07
 8009b20:	08009b31 	.word	0x08009b31
 8009b24:	08009b31 	.word	0x08009b31
 8009b28:	08009ba7 	.word	0x08009ba7
 8009b2c:	08009bbb 	.word	0x08009bbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b36:	f043 0301 	orr.w	r3, r3, #1
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	18d1      	adds	r1, r2, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b50:	f7ff ff5c 	bl	8009a0c <prvInsertTimerInActiveList>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d06c      	beq.n	8009c34 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d061      	beq.n	8009c34 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	441a      	add	r2, r3
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	2100      	movs	r1, #0
 8009b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b82:	f7ff fe01 	bl	8009788 <xTimerGenericCommand>
 8009b86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d152      	bne.n	8009c34 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	61bb      	str	r3, [r7, #24]
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	e7fd      	b.n	8009ba2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bac:	f023 0301 	bic.w	r3, r3, #1
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bb8:	e03d      	b.n	8009c36 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bc0:	f043 0301 	orr.w	r3, r3, #1
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	617b      	str	r3, [r7, #20]
}
 8009bec:	bf00      	nop
 8009bee:	bf00      	nop
 8009bf0:	e7fd      	b.n	8009bee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	699a      	ldr	r2, [r3, #24]
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	18d1      	adds	r1, r2, r3
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c00:	f7ff ff04 	bl	8009a0c <prvInsertTimerInActiveList>
					break;
 8009c04:	e017      	b.n	8009c36 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d103      	bne.n	8009c1c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c16:	f000 fbe7 	bl	800a3e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c1a:	e00c      	b.n	8009c36 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c22:	f023 0301 	bic.w	r3, r3, #1
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c2e:	e002      	b.n	8009c36 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c30:	bf00      	nop
 8009c32:	e000      	b.n	8009c36 <prvProcessReceivedCommands+0x1a6>
					break;
 8009c34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c36:	4b08      	ldr	r3, [pc, #32]	@ (8009c58 <prvProcessReceivedCommands+0x1c8>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	1d39      	adds	r1, r7, #4
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fbfc 	bl	800843c <xQueueReceive>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f47f af26 	bne.w	8009a98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	3730      	adds	r7, #48	@ 0x30
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	24000e14 	.word	0x24000e14

08009c5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c62:	e049      	b.n	8009cf8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c64:	4b2e      	ldr	r3, [pc, #184]	@ (8009d20 <prvSwitchTimerLists+0xc4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8009d20 <prvSwitchTimerLists+0xc4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe f909 	bl	8007e94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d02f      	beq.n	8009cf8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d90e      	bls.n	8009cc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8009d20 <prvSwitchTimerLists+0xc4>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	f7fe f8ae 	bl	8007e22 <vListInsert>
 8009cc6:	e017      	b.n	8009cf8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cc8:	2300      	movs	r3, #0
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff fd58 	bl	8009788 <xTimerGenericCommand>
 8009cd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10b      	bne.n	8009cf8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	603b      	str	r3, [r7, #0]
}
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	e7fd      	b.n	8009cf4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cf8:	4b09      	ldr	r3, [pc, #36]	@ (8009d20 <prvSwitchTimerLists+0xc4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1b0      	bne.n	8009c64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d02:	4b07      	ldr	r3, [pc, #28]	@ (8009d20 <prvSwitchTimerLists+0xc4>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d08:	4b06      	ldr	r3, [pc, #24]	@ (8009d24 <prvSwitchTimerLists+0xc8>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a04      	ldr	r2, [pc, #16]	@ (8009d20 <prvSwitchTimerLists+0xc4>)
 8009d0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d10:	4a04      	ldr	r2, [pc, #16]	@ (8009d24 <prvSwitchTimerLists+0xc8>)
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	6013      	str	r3, [r2, #0]
}
 8009d16:	bf00      	nop
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	24000e0c 	.word	0x24000e0c
 8009d24:	24000e10 	.word	0x24000e10

08009d28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d2e:	f000 f96b 	bl	800a008 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d32:	4b15      	ldr	r3, [pc, #84]	@ (8009d88 <prvCheckForValidListAndQueue+0x60>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d120      	bne.n	8009d7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d3a:	4814      	ldr	r0, [pc, #80]	@ (8009d8c <prvCheckForValidListAndQueue+0x64>)
 8009d3c:	f7fe f820 	bl	8007d80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d40:	4813      	ldr	r0, [pc, #76]	@ (8009d90 <prvCheckForValidListAndQueue+0x68>)
 8009d42:	f7fe f81d 	bl	8007d80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d46:	4b13      	ldr	r3, [pc, #76]	@ (8009d94 <prvCheckForValidListAndQueue+0x6c>)
 8009d48:	4a10      	ldr	r2, [pc, #64]	@ (8009d8c <prvCheckForValidListAndQueue+0x64>)
 8009d4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d4c:	4b12      	ldr	r3, [pc, #72]	@ (8009d98 <prvCheckForValidListAndQueue+0x70>)
 8009d4e:	4a10      	ldr	r2, [pc, #64]	@ (8009d90 <prvCheckForValidListAndQueue+0x68>)
 8009d50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d52:	2300      	movs	r3, #0
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	4b11      	ldr	r3, [pc, #68]	@ (8009d9c <prvCheckForValidListAndQueue+0x74>)
 8009d58:	4a11      	ldr	r2, [pc, #68]	@ (8009da0 <prvCheckForValidListAndQueue+0x78>)
 8009d5a:	2110      	movs	r1, #16
 8009d5c:	200a      	movs	r0, #10
 8009d5e:	f7fe f92d 	bl	8007fbc <xQueueGenericCreateStatic>
 8009d62:	4603      	mov	r3, r0
 8009d64:	4a08      	ldr	r2, [pc, #32]	@ (8009d88 <prvCheckForValidListAndQueue+0x60>)
 8009d66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d68:	4b07      	ldr	r3, [pc, #28]	@ (8009d88 <prvCheckForValidListAndQueue+0x60>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d005      	beq.n	8009d7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d70:	4b05      	ldr	r3, [pc, #20]	@ (8009d88 <prvCheckForValidListAndQueue+0x60>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	490b      	ldr	r1, [pc, #44]	@ (8009da4 <prvCheckForValidListAndQueue+0x7c>)
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe fd52 	bl	8008820 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d7c:	f000 f976 	bl	800a06c <vPortExitCritical>
}
 8009d80:	bf00      	nop
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	24000e14 	.word	0x24000e14
 8009d8c:	24000de4 	.word	0x24000de4
 8009d90:	24000df8 	.word	0x24000df8
 8009d94:	24000e0c 	.word	0x24000e0c
 8009d98:	24000e10 	.word	0x24000e10
 8009d9c:	24000ec0 	.word	0x24000ec0
 8009da0:	24000e20 	.word	0x24000e20
 8009da4:	0800a6d4 	.word	0x0800a6d4

08009da8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3b04      	subs	r3, #4
 8009db8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3b04      	subs	r3, #4
 8009dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f023 0201 	bic.w	r2, r3, #1
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3b04      	subs	r3, #4
 8009dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8009e0c <pxPortInitialiseStack+0x64>)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3b14      	subs	r3, #20
 8009de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3b04      	subs	r3, #4
 8009dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f06f 0202 	mvn.w	r2, #2
 8009df6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3b20      	subs	r3, #32
 8009dfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	08009e11 	.word	0x08009e11

08009e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e1a:	4b13      	ldr	r3, [pc, #76]	@ (8009e68 <prvTaskExitError+0x58>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e22:	d00b      	beq.n	8009e3c <prvTaskExitError+0x2c>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	60fb      	str	r3, [r7, #12]
}
 8009e36:	bf00      	nop
 8009e38:	bf00      	nop
 8009e3a:	e7fd      	b.n	8009e38 <prvTaskExitError+0x28>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60bb      	str	r3, [r7, #8]
}
 8009e4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e50:	bf00      	nop
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0fc      	beq.n	8009e52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e58:	bf00      	nop
 8009e5a:	bf00      	nop
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	24000018 	.word	0x24000018
 8009e6c:	00000000 	.word	0x00000000

08009e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e70:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <pxCurrentTCBConst2>)
 8009e72:	6819      	ldr	r1, [r3, #0]
 8009e74:	6808      	ldr	r0, [r1, #0]
 8009e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7a:	f380 8809 	msr	PSP, r0
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f04f 0000 	mov.w	r0, #0
 8009e86:	f380 8811 	msr	BASEPRI, r0
 8009e8a:	4770      	bx	lr
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst2>:
 8009e90:	240008e4 	.word	0x240008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e98:	4808      	ldr	r0, [pc, #32]	@ (8009ebc <prvPortStartFirstTask+0x24>)
 8009e9a:	6800      	ldr	r0, [r0, #0]
 8009e9c:	6800      	ldr	r0, [r0, #0]
 8009e9e:	f380 8808 	msr	MSP, r0
 8009ea2:	f04f 0000 	mov.w	r0, #0
 8009ea6:	f380 8814 	msr	CONTROL, r0
 8009eaa:	b662      	cpsie	i
 8009eac:	b661      	cpsie	f
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	df00      	svc	0
 8009eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eba:	bf00      	nop
 8009ebc:	e000ed08 	.word	0xe000ed08

08009ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ec6:	4b47      	ldr	r3, [pc, #284]	@ (8009fe4 <xPortStartScheduler+0x124>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a47      	ldr	r2, [pc, #284]	@ (8009fe8 <xPortStartScheduler+0x128>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d10b      	bne.n	8009ee8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	60fb      	str	r3, [r7, #12]
}
 8009ee2:	bf00      	nop
 8009ee4:	bf00      	nop
 8009ee6:	e7fd      	b.n	8009ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fe4 <xPortStartScheduler+0x124>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a3f      	ldr	r2, [pc, #252]	@ (8009fec <xPortStartScheduler+0x12c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d10b      	bne.n	8009f0a <xPortStartScheduler+0x4a>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	613b      	str	r3, [r7, #16]
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	e7fd      	b.n	8009f06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f0a:	4b39      	ldr	r3, [pc, #228]	@ (8009ff0 <xPortStartScheduler+0x130>)
 8009f0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	22ff      	movs	r2, #255	@ 0xff
 8009f1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ff4 <xPortStartScheduler+0x134>)
 8009f30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f32:	4b31      	ldr	r3, [pc, #196]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f34:	2207      	movs	r2, #7
 8009f36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f38:	e009      	b.n	8009f4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	4a2d      	ldr	r2, [pc, #180]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f56:	2b80      	cmp	r3, #128	@ 0x80
 8009f58:	d0ef      	beq.n	8009f3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f5a:	4b27      	ldr	r3, [pc, #156]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f1c3 0307 	rsb	r3, r3, #7
 8009f62:	2b04      	cmp	r3, #4
 8009f64:	d00b      	beq.n	8009f7e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	60bb      	str	r3, [r7, #8]
}
 8009f78:	bf00      	nop
 8009f7a:	bf00      	nop
 8009f7c:	e7fd      	b.n	8009f7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f88:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f90:	4a19      	ldr	r2, [pc, #100]	@ (8009ff8 <xPortStartScheduler+0x138>)
 8009f92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f9c:	4b17      	ldr	r3, [pc, #92]	@ (8009ffc <xPortStartScheduler+0x13c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a16      	ldr	r2, [pc, #88]	@ (8009ffc <xPortStartScheduler+0x13c>)
 8009fa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fa8:	4b14      	ldr	r3, [pc, #80]	@ (8009ffc <xPortStartScheduler+0x13c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a13      	ldr	r2, [pc, #76]	@ (8009ffc <xPortStartScheduler+0x13c>)
 8009fae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fb4:	f000 f8da 	bl	800a16c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fb8:	4b11      	ldr	r3, [pc, #68]	@ (800a000 <xPortStartScheduler+0x140>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fbe:	f000 f8f9 	bl	800a1b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fc2:	4b10      	ldr	r3, [pc, #64]	@ (800a004 <xPortStartScheduler+0x144>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a0f      	ldr	r2, [pc, #60]	@ (800a004 <xPortStartScheduler+0x144>)
 8009fc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fce:	f7ff ff63 	bl	8009e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fd2:	f7ff f83d 	bl	8009050 <vTaskSwitchContext>
	prvTaskExitError();
 8009fd6:	f7ff ff1b 	bl	8009e10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	e000ed00 	.word	0xe000ed00
 8009fe8:	410fc271 	.word	0x410fc271
 8009fec:	410fc270 	.word	0x410fc270
 8009ff0:	e000e400 	.word	0xe000e400
 8009ff4:	24000f10 	.word	0x24000f10
 8009ff8:	24000f14 	.word	0x24000f14
 8009ffc:	e000ed20 	.word	0xe000ed20
 800a000:	24000018 	.word	0x24000018
 800a004:	e000ef34 	.word	0xe000ef34

0800a008 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	607b      	str	r3, [r7, #4]
}
 800a020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a022:	4b10      	ldr	r3, [pc, #64]	@ (800a064 <vPortEnterCritical+0x5c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3301      	adds	r3, #1
 800a028:	4a0e      	ldr	r2, [pc, #56]	@ (800a064 <vPortEnterCritical+0x5c>)
 800a02a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a02c:	4b0d      	ldr	r3, [pc, #52]	@ (800a064 <vPortEnterCritical+0x5c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d110      	bne.n	800a056 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a034:	4b0c      	ldr	r3, [pc, #48]	@ (800a068 <vPortEnterCritical+0x60>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00b      	beq.n	800a056 <vPortEnterCritical+0x4e>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	603b      	str	r3, [r7, #0]
}
 800a050:	bf00      	nop
 800a052:	bf00      	nop
 800a054:	e7fd      	b.n	800a052 <vPortEnterCritical+0x4a>
	}
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	24000018 	.word	0x24000018
 800a068:	e000ed04 	.word	0xe000ed04

0800a06c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a072:	4b12      	ldr	r3, [pc, #72]	@ (800a0bc <vPortExitCritical+0x50>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <vPortExitCritical+0x26>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	607b      	str	r3, [r7, #4]
}
 800a08c:	bf00      	nop
 800a08e:	bf00      	nop
 800a090:	e7fd      	b.n	800a08e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a092:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <vPortExitCritical+0x50>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3b01      	subs	r3, #1
 800a098:	4a08      	ldr	r2, [pc, #32]	@ (800a0bc <vPortExitCritical+0x50>)
 800a09a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a09c:	4b07      	ldr	r3, [pc, #28]	@ (800a0bc <vPortExitCritical+0x50>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d105      	bne.n	800a0b0 <vPortExitCritical+0x44>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	f383 8811 	msr	BASEPRI, r3
}
 800a0ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	24000018 	.word	0x24000018

0800a0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0c0:	f3ef 8009 	mrs	r0, PSP
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	4b15      	ldr	r3, [pc, #84]	@ (800a120 <pxCurrentTCBConst>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	f01e 0f10 	tst.w	lr, #16
 800a0d0:	bf08      	it	eq
 800a0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0da:	6010      	str	r0, [r2, #0]
 800a0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0e4:	f380 8811 	msr	BASEPRI, r0
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f7fe ffae 	bl	8009050 <vTaskSwitchContext>
 800a0f4:	f04f 0000 	mov.w	r0, #0
 800a0f8:	f380 8811 	msr	BASEPRI, r0
 800a0fc:	bc09      	pop	{r0, r3}
 800a0fe:	6819      	ldr	r1, [r3, #0]
 800a100:	6808      	ldr	r0, [r1, #0]
 800a102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a106:	f01e 0f10 	tst.w	lr, #16
 800a10a:	bf08      	it	eq
 800a10c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a110:	f380 8809 	msr	PSP, r0
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w

0800a120 <pxCurrentTCBConst>:
 800a120:	240008e4 	.word	0x240008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop

0800a128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	607b      	str	r3, [r7, #4]
}
 800a140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a142:	f7fe fecb 	bl	8008edc <xTaskIncrementTick>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d003      	beq.n	800a154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a14c:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <xPortSysTickHandler+0x40>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	2300      	movs	r3, #0
 800a156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	f383 8811 	msr	BASEPRI, r3
}
 800a15e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	e000ed04 	.word	0xe000ed04

0800a16c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a170:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a0 <vPortSetupTimerInterrupt+0x34>)
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a176:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a4 <vPortSetupTimerInterrupt+0x38>)
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <vPortSetupTimerInterrupt+0x3c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a0a      	ldr	r2, [pc, #40]	@ (800a1ac <vPortSetupTimerInterrupt+0x40>)
 800a182:	fba2 2303 	umull	r2, r3, r2, r3
 800a186:	099b      	lsrs	r3, r3, #6
 800a188:	4a09      	ldr	r2, [pc, #36]	@ (800a1b0 <vPortSetupTimerInterrupt+0x44>)
 800a18a:	3b01      	subs	r3, #1
 800a18c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a18e:	4b04      	ldr	r3, [pc, #16]	@ (800a1a0 <vPortSetupTimerInterrupt+0x34>)
 800a190:	2207      	movs	r2, #7
 800a192:	601a      	str	r2, [r3, #0]
}
 800a194:	bf00      	nop
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	e000e010 	.word	0xe000e010
 800a1a4:	e000e018 	.word	0xe000e018
 800a1a8:	24000008 	.word	0x24000008
 800a1ac:	10624dd3 	.word	0x10624dd3
 800a1b0:	e000e014 	.word	0xe000e014

0800a1b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1c4 <vPortEnableVFP+0x10>
 800a1b8:	6801      	ldr	r1, [r0, #0]
 800a1ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1be:	6001      	str	r1, [r0, #0]
 800a1c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1c2:	bf00      	nop
 800a1c4:	e000ed88 	.word	0xe000ed88

0800a1c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1ce:	f3ef 8305 	mrs	r3, IPSR
 800a1d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b0f      	cmp	r3, #15
 800a1d8:	d915      	bls.n	800a206 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1da:	4a18      	ldr	r2, [pc, #96]	@ (800a23c <vPortValidateInterruptPriority+0x74>)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1e4:	4b16      	ldr	r3, [pc, #88]	@ (800a240 <vPortValidateInterruptPriority+0x78>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	7afa      	ldrb	r2, [r7, #11]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d20b      	bcs.n	800a206 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	607b      	str	r3, [r7, #4]
}
 800a200:	bf00      	nop
 800a202:	bf00      	nop
 800a204:	e7fd      	b.n	800a202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a206:	4b0f      	ldr	r3, [pc, #60]	@ (800a244 <vPortValidateInterruptPriority+0x7c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a20e:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <vPortValidateInterruptPriority+0x80>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d90b      	bls.n	800a22e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	603b      	str	r3, [r7, #0]
}
 800a228:	bf00      	nop
 800a22a:	bf00      	nop
 800a22c:	e7fd      	b.n	800a22a <vPortValidateInterruptPriority+0x62>
	}
 800a22e:	bf00      	nop
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	e000e3f0 	.word	0xe000e3f0
 800a240:	24000f10 	.word	0x24000f10
 800a244:	e000ed0c 	.word	0xe000ed0c
 800a248:	24000f14 	.word	0x24000f14

0800a24c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	@ 0x28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a258:	f7fe fd84 	bl	8008d64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a25c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3d0 <pvPortMalloc+0x184>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a264:	f000 f924 	bl	800a4b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a268:	4b5a      	ldr	r3, [pc, #360]	@ (800a3d4 <pvPortMalloc+0x188>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4013      	ands	r3, r2
 800a270:	2b00      	cmp	r3, #0
 800a272:	f040 8095 	bne.w	800a3a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01e      	beq.n	800a2ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a27c:	2208      	movs	r2, #8
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4413      	add	r3, r2
 800a282:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d015      	beq.n	800a2ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f023 0307 	bic.w	r3, r3, #7
 800a294:	3308      	adds	r3, #8
 800a296:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f003 0307 	and.w	r3, r3, #7
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <pvPortMalloc+0x6e>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	617b      	str	r3, [r7, #20]
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop
 800a2b8:	e7fd      	b.n	800a2b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d06f      	beq.n	800a3a0 <pvPortMalloc+0x154>
 800a2c0:	4b45      	ldr	r3, [pc, #276]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d86a      	bhi.n	800a3a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2ca:	4b44      	ldr	r3, [pc, #272]	@ (800a3dc <pvPortMalloc+0x190>)
 800a2cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2ce:	4b43      	ldr	r3, [pc, #268]	@ (800a3dc <pvPortMalloc+0x190>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2d4:	e004      	b.n	800a2e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d903      	bls.n	800a2f2 <pvPortMalloc+0xa6>
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f1      	bne.n	800a2d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2f2:	4b37      	ldr	r3, [pc, #220]	@ (800a3d0 <pvPortMalloc+0x184>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d051      	beq.n	800a3a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2208      	movs	r2, #8
 800a302:	4413      	add	r3, r2
 800a304:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	1ad2      	subs	r2, r2, r3
 800a316:	2308      	movs	r3, #8
 800a318:	005b      	lsls	r3, r3, #1
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d920      	bls.n	800a360 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a31e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4413      	add	r3, r2
 800a324:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	f003 0307 	and.w	r3, r3, #7
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00b      	beq.n	800a348 <pvPortMalloc+0xfc>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	613b      	str	r3, [r7, #16]
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	e7fd      	b.n	800a344 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a35a:	69b8      	ldr	r0, [r7, #24]
 800a35c:	f000 f90a 	bl	800a574 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a360:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a36c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a36e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e0 <pvPortMalloc+0x194>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d203      	bcs.n	800a382 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a37a:	4b17      	ldr	r3, [pc, #92]	@ (800a3d8 <pvPortMalloc+0x18c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a18      	ldr	r2, [pc, #96]	@ (800a3e0 <pvPortMalloc+0x194>)
 800a380:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	4b13      	ldr	r3, [pc, #76]	@ (800a3d4 <pvPortMalloc+0x188>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	431a      	orrs	r2, r3
 800a38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a396:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <pvPortMalloc+0x198>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3301      	adds	r3, #1
 800a39c:	4a11      	ldr	r2, [pc, #68]	@ (800a3e4 <pvPortMalloc+0x198>)
 800a39e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3a0:	f7fe fcee 	bl	8008d80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00b      	beq.n	800a3c6 <pvPortMalloc+0x17a>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60fb      	str	r3, [r7, #12]
}
 800a3c0:	bf00      	nop
 800a3c2:	bf00      	nop
 800a3c4:	e7fd      	b.n	800a3c2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3728      	adds	r7, #40	@ 0x28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	24004b20 	.word	0x24004b20
 800a3d4:	24004b34 	.word	0x24004b34
 800a3d8:	24004b24 	.word	0x24004b24
 800a3dc:	24004b18 	.word	0x24004b18
 800a3e0:	24004b28 	.word	0x24004b28
 800a3e4:	24004b2c 	.word	0x24004b2c

0800a3e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d04f      	beq.n	800a49a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	425b      	negs	r3, r3
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4413      	add	r3, r2
 800a402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4b25      	ldr	r3, [pc, #148]	@ (800a4a4 <vPortFree+0xbc>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4013      	ands	r3, r2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10b      	bne.n	800a42e <vPortFree+0x46>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	60fb      	str	r3, [r7, #12]
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	e7fd      	b.n	800a42a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00b      	beq.n	800a44e <vPortFree+0x66>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	60bb      	str	r3, [r7, #8]
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	e7fd      	b.n	800a44a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	4b14      	ldr	r3, [pc, #80]	@ (800a4a4 <vPortFree+0xbc>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4013      	ands	r3, r2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01e      	beq.n	800a49a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d11a      	bne.n	800a49a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a4 <vPortFree+0xbc>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	43db      	mvns	r3, r3
 800a46e:	401a      	ands	r2, r3
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a474:	f7fe fc76 	bl	8008d64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <vPortFree+0xc0>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4413      	add	r3, r2
 800a482:	4a09      	ldr	r2, [pc, #36]	@ (800a4a8 <vPortFree+0xc0>)
 800a484:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a486:	6938      	ldr	r0, [r7, #16]
 800a488:	f000 f874 	bl	800a574 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a48c:	4b07      	ldr	r3, [pc, #28]	@ (800a4ac <vPortFree+0xc4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3301      	adds	r3, #1
 800a492:	4a06      	ldr	r2, [pc, #24]	@ (800a4ac <vPortFree+0xc4>)
 800a494:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a496:	f7fe fc73 	bl	8008d80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a49a:	bf00      	nop
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	24004b34 	.word	0x24004b34
 800a4a8:	24004b24 	.word	0x24004b24
 800a4ac:	24004b30 	.word	0x24004b30

0800a4b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a4ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4bc:	4b27      	ldr	r3, [pc, #156]	@ (800a55c <prvHeapInit+0xac>)
 800a4be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00c      	beq.n	800a4e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3307      	adds	r3, #7
 800a4ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0307 	bic.w	r3, r3, #7
 800a4d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	4a1f      	ldr	r2, [pc, #124]	@ (800a55c <prvHeapInit+0xac>)
 800a4e0:	4413      	add	r3, r2
 800a4e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a560 <prvHeapInit+0xb0>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a560 <prvHeapInit+0xb0>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4fc:	2208      	movs	r2, #8
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	1a9b      	subs	r3, r3, r2
 800a502:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f023 0307 	bic.w	r3, r3, #7
 800a50a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4a15      	ldr	r2, [pc, #84]	@ (800a564 <prvHeapInit+0xb4>)
 800a510:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a512:	4b14      	ldr	r3, [pc, #80]	@ (800a564 <prvHeapInit+0xb4>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2200      	movs	r2, #0
 800a518:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a51a:	4b12      	ldr	r3, [pc, #72]	@ (800a564 <prvHeapInit+0xb4>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	1ad2      	subs	r2, r2, r3
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a530:	4b0c      	ldr	r3, [pc, #48]	@ (800a564 <prvHeapInit+0xb4>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	4a0a      	ldr	r2, [pc, #40]	@ (800a568 <prvHeapInit+0xb8>)
 800a53e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4a09      	ldr	r2, [pc, #36]	@ (800a56c <prvHeapInit+0xbc>)
 800a546:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a548:	4b09      	ldr	r3, [pc, #36]	@ (800a570 <prvHeapInit+0xc0>)
 800a54a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a54e:	601a      	str	r2, [r3, #0]
}
 800a550:	bf00      	nop
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	24000f18 	.word	0x24000f18
 800a560:	24004b18 	.word	0x24004b18
 800a564:	24004b20 	.word	0x24004b20
 800a568:	24004b28 	.word	0x24004b28
 800a56c:	24004b24 	.word	0x24004b24
 800a570:	24004b34 	.word	0x24004b34

0800a574 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a57c:	4b28      	ldr	r3, [pc, #160]	@ (800a620 <prvInsertBlockIntoFreeList+0xac>)
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	e002      	b.n	800a588 <prvInsertBlockIntoFreeList+0x14>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d8f7      	bhi.n	800a582 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	4413      	add	r3, r2
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d108      	bne.n	800a5b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	441a      	add	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	441a      	add	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d118      	bne.n	800a5fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	4b15      	ldr	r3, [pc, #84]	@ (800a624 <prvInsertBlockIntoFreeList+0xb0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d00d      	beq.n	800a5f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	441a      	add	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	e008      	b.n	800a604 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a624 <prvInsertBlockIntoFreeList+0xb0>)
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	e003      	b.n	800a604 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d002      	beq.n	800a612 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a612:	bf00      	nop
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	24004b18 	.word	0x24004b18
 800a624:	24004b20 	.word	0x24004b20

0800a628 <memset>:
 800a628:	4402      	add	r2, r0
 800a62a:	4603      	mov	r3, r0
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d100      	bne.n	800a632 <memset+0xa>
 800a630:	4770      	bx	lr
 800a632:	f803 1b01 	strb.w	r1, [r3], #1
 800a636:	e7f9      	b.n	800a62c <memset+0x4>

0800a638 <__libc_init_array>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	4d0d      	ldr	r5, [pc, #52]	@ (800a670 <__libc_init_array+0x38>)
 800a63c:	4c0d      	ldr	r4, [pc, #52]	@ (800a674 <__libc_init_array+0x3c>)
 800a63e:	1b64      	subs	r4, r4, r5
 800a640:	10a4      	asrs	r4, r4, #2
 800a642:	2600      	movs	r6, #0
 800a644:	42a6      	cmp	r6, r4
 800a646:	d109      	bne.n	800a65c <__libc_init_array+0x24>
 800a648:	4d0b      	ldr	r5, [pc, #44]	@ (800a678 <__libc_init_array+0x40>)
 800a64a:	4c0c      	ldr	r4, [pc, #48]	@ (800a67c <__libc_init_array+0x44>)
 800a64c:	f000 f826 	bl	800a69c <_init>
 800a650:	1b64      	subs	r4, r4, r5
 800a652:	10a4      	asrs	r4, r4, #2
 800a654:	2600      	movs	r6, #0
 800a656:	42a6      	cmp	r6, r4
 800a658:	d105      	bne.n	800a666 <__libc_init_array+0x2e>
 800a65a:	bd70      	pop	{r4, r5, r6, pc}
 800a65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a660:	4798      	blx	r3
 800a662:	3601      	adds	r6, #1
 800a664:	e7ee      	b.n	800a644 <__libc_init_array+0xc>
 800a666:	f855 3b04 	ldr.w	r3, [r5], #4
 800a66a:	4798      	blx	r3
 800a66c:	3601      	adds	r6, #1
 800a66e:	e7f2      	b.n	800a656 <__libc_init_array+0x1e>
 800a670:	0800a734 	.word	0x0800a734
 800a674:	0800a734 	.word	0x0800a734
 800a678:	0800a734 	.word	0x0800a734
 800a67c:	0800a738 	.word	0x0800a738

0800a680 <memcpy>:
 800a680:	440a      	add	r2, r1
 800a682:	4291      	cmp	r1, r2
 800a684:	f100 33ff 	add.w	r3, r0, #4294967295
 800a688:	d100      	bne.n	800a68c <memcpy+0xc>
 800a68a:	4770      	bx	lr
 800a68c:	b510      	push	{r4, lr}
 800a68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a692:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a696:	4291      	cmp	r1, r2
 800a698:	d1f9      	bne.n	800a68e <memcpy+0xe>
 800a69a:	bd10      	pop	{r4, pc}

0800a69c <_init>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr

0800a6a8 <_fini>:
 800a6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6aa:	bf00      	nop
 800a6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ae:	bc08      	pop	{r3}
 800a6b0:	469e      	mov	lr, r3
 800a6b2:	4770      	bx	lr
